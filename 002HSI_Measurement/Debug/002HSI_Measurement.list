
002HSI_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000264  0800026c  0001026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000264  08000264  0001026c  2**0
                  CONTENTS
  4 .ARM          00000000  08000264  08000264  0001026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000264  0800026c  0001026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000264  08000264  00010264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000268  08000268  00010268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800026c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800026c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001026c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010294  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000113  00000000  00000000  000102d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000009d  00000000  00000000  000103ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  00010488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000033  00000000  00000000  000104d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f52  00000000  00000000  0001050b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004b0  00000000  00000000  0001145d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003bbd  00000000  00000000  0001190d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000078  00000000  00000000  000154cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00015544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800024c 	.word	0x0800024c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800024c 	.word	0x0800024c

08000108 <main>:
#define RCC_CFGR_REG_ADDR		(RCC_BASE_ADDR + RCC_CFGR_REG_OFFSET)

#define GPIOA_BASE_ADDR 		0x48000000UL

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b084      	sub	sp, #16
 800010c:	af00      	add	r7, sp, #0

	uint32_t* pRccCfgrReg = (uint32_t*)RCC_CFGR_REG_ADDR;
 800010e:	4b1f      	ldr	r3, [pc, #124]	; (800018c <main+0x84>)
 8000110:	60fb      	str	r3, [r7, #12]

	// 1. Configure the RCC_CFGR Register MCO bit fields to select HSI as clock source
	*pRccCfgrReg &= ~(0x0F << 24); // Clear 24, 25, 26 and 27 bit positions
 8000112:	68fb      	ldr	r3, [r7, #12]
 8000114:	681b      	ldr	r3, [r3, #0]
 8000116:	4a1e      	ldr	r2, [pc, #120]	; (8000190 <main+0x88>)
 8000118:	401a      	ands	r2, r3
 800011a:	68fb      	ldr	r3, [r7, #12]
 800011c:	601a      	str	r2, [r3, #0]

	// 2. Configure the RCC_CFGR Register MCO bit fields to select HSI as clock source
	*pRccCfgrReg |= (0x5 << 24); // setting up the corresponding bits to select HSI as clock source 0101
 800011e:	68fb      	ldr	r3, [r7, #12]
 8000120:	681b      	ldr	r3, [r3, #0]
 8000122:	22a0      	movs	r2, #160	; 0xa0
 8000124:	04d2      	lsls	r2, r2, #19
 8000126:	431a      	orrs	r2, r3
 8000128:	68fb      	ldr	r3, [r7, #12]
 800012a:	601a      	str	r2, [r3, #0]

	// 2a Configure the Pre-scaler for the RCC clock configuration
	*pRccCfgrReg &= ~(0x7 << 28); // Clearing the bit positions
 800012c:	68fb      	ldr	r3, [r7, #12]
 800012e:	681b      	ldr	r3, [r3, #0]
 8000130:	4a18      	ldr	r2, [pc, #96]	; (8000194 <main+0x8c>)
 8000132:	401a      	ands	r2, r3
 8000134:	68fb      	ldr	r3, [r7, #12]
 8000136:	601a      	str	r2, [r3, #0]

	// 2b. Configure the Pre-scaler for the RCC  clock configuration
	*pRccCfgrReg |= (0x2 << 28); // Setting the bit positions for converting the HSI clock to 8Mhz / 4 = 2MHz
 8000138:	68fb      	ldr	r3, [r7, #12]
 800013a:	681b      	ldr	r3, [r3, #0]
 800013c:	2280      	movs	r2, #128	; 0x80
 800013e:	0592      	lsls	r2, r2, #22
 8000140:	431a      	orrs	r2, r3
 8000142:	68fb      	ldr	r3, [r7, #12]
 8000144:	601a      	str	r2, [r3, #0]
	// 3. Configure PA8 to AF0 mode to behave as MCO signal

	// 3a. Enable the peripheral clock for GPIOA peripheral
	uint32_t *pRCCAhbEnr = (uint32_t*)(RCC_BASE_ADDR + 0x14);
 8000146:	4b14      	ldr	r3, [pc, #80]	; (8000198 <main+0x90>)
 8000148:	60bb      	str	r3, [r7, #8]
	*pRCCAhbEnr |= (1 << 17); // Enable the GPIOA peripheral Clock
 800014a:	68bb      	ldr	r3, [r7, #8]
 800014c:	681b      	ldr	r3, [r3, #0]
 800014e:	2280      	movs	r2, #128	; 0x80
 8000150:	0292      	lsls	r2, r2, #10
 8000152:	431a      	orrs	r2, r3
 8000154:	68bb      	ldr	r3, [r7, #8]
 8000156:	601a      	str	r2, [r3, #0]

	// 3b. Configure the mode of GPIOA pin 8 as alternate function mode
	uint32_t *pGPIOAModeReg = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 8000158:	2390      	movs	r3, #144	; 0x90
 800015a:	05db      	lsls	r3, r3, #23
 800015c:	607b      	str	r3, [r7, #4]
	*pGPIOAModeReg &= ~(0x3 << 16); // Clearing the bit positions
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a0e      	ldr	r2, [pc, #56]	; (800019c <main+0x94>)
 8000164:	401a      	ands	r2, r3
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	601a      	str	r2, [r3, #0]
	*pGPIOAModeReg |= (0x2 << 16); // Setting the bit positions for alternate function mode 10
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	2280      	movs	r2, #128	; 0x80
 8000170:	0292      	lsls	r2, r2, #10
 8000172:	431a      	orrs	r2, r3
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	601a      	str	r2, [r3, #0]

	// 3c. Configure the alternate function register to set the mode 0 for PA8
	uint32_t *pGPIOAAltFunHigReg = (uint32_t*)(GPIOA_BASE_ADDR + 0x24);
 8000178:	4b09      	ldr	r3, [pc, #36]	; (80001a0 <main+0x98>)
 800017a:	603b      	str	r3, [r7, #0]
	*pGPIOAAltFunHigReg &= ~(0xF << 0);
 800017c:	683b      	ldr	r3, [r7, #0]
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	220f      	movs	r2, #15
 8000182:	4393      	bics	r3, r2
 8000184:	001a      	movs	r2, r3
 8000186:	683b      	ldr	r3, [r7, #0]
 8000188:	601a      	str	r2, [r3, #0]

	for(;;);
 800018a:	e7fe      	b.n	800018a <main+0x82>
 800018c:	40021004 	.word	0x40021004
 8000190:	f0ffffff 	.word	0xf0ffffff
 8000194:	8fffffff 	.word	0x8fffffff
 8000198:	40021014 	.word	0x40021014
 800019c:	fffcffff 	.word	0xfffcffff
 80001a0:	48000024 	.word	0x48000024

080001a4 <I2C1_IRQHandler>:
}

void I2C1_IRQHandler(){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0


}
 80001a8:	46c0      	nop			; (mov r8, r8)
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
	...

080001b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001b0:	480d      	ldr	r0, [pc, #52]	; (80001e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001b4:	e000      	b.n	80001b8 <Reset_Handler+0x8>
 80001b6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001b8:	480c      	ldr	r0, [pc, #48]	; (80001ec <LoopForever+0x6>)
  ldr r1, =_edata
 80001ba:	490d      	ldr	r1, [pc, #52]	; (80001f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001bc:	4a0d      	ldr	r2, [pc, #52]	; (80001f4 <LoopForever+0xe>)
  movs r3, #0
 80001be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001c0:	e002      	b.n	80001c8 <LoopCopyDataInit>

080001c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001c6:	3304      	adds	r3, #4

080001c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001cc:	d3f9      	bcc.n	80001c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ce:	4a0a      	ldr	r2, [pc, #40]	; (80001f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001d0:	4c0a      	ldr	r4, [pc, #40]	; (80001fc <LoopForever+0x16>)
  movs r3, #0
 80001d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001d4:	e001      	b.n	80001da <LoopFillZerobss>

080001d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001d8:	3204      	adds	r2, #4

080001da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001dc:	d3fb      	bcc.n	80001d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001de:	f000 f811 	bl	8000204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001e2:	f7ff ff91 	bl	8000108 <main>

080001e6 <LoopForever>:

LoopForever:
  b LoopForever
 80001e6:	e7fe      	b.n	80001e6 <LoopForever>
  ldr   r0, =_estack
 80001e8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80001ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001f4:	0800026c 	.word	0x0800026c
  ldr r2, =_sbss
 80001f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001fc:	2000001c 	.word	0x2000001c

08000200 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000200:	e7fe      	b.n	8000200 <ADC_IRQHandler>
	...

08000204 <__libc_init_array>:
 8000204:	b570      	push	{r4, r5, r6, lr}
 8000206:	2600      	movs	r6, #0
 8000208:	4c0c      	ldr	r4, [pc, #48]	; (800023c <__libc_init_array+0x38>)
 800020a:	4d0d      	ldr	r5, [pc, #52]	; (8000240 <__libc_init_array+0x3c>)
 800020c:	1b64      	subs	r4, r4, r5
 800020e:	10a4      	asrs	r4, r4, #2
 8000210:	42a6      	cmp	r6, r4
 8000212:	d109      	bne.n	8000228 <__libc_init_array+0x24>
 8000214:	2600      	movs	r6, #0
 8000216:	f000 f819 	bl	800024c <_init>
 800021a:	4c0a      	ldr	r4, [pc, #40]	; (8000244 <__libc_init_array+0x40>)
 800021c:	4d0a      	ldr	r5, [pc, #40]	; (8000248 <__libc_init_array+0x44>)
 800021e:	1b64      	subs	r4, r4, r5
 8000220:	10a4      	asrs	r4, r4, #2
 8000222:	42a6      	cmp	r6, r4
 8000224:	d105      	bne.n	8000232 <__libc_init_array+0x2e>
 8000226:	bd70      	pop	{r4, r5, r6, pc}
 8000228:	00b3      	lsls	r3, r6, #2
 800022a:	58eb      	ldr	r3, [r5, r3]
 800022c:	4798      	blx	r3
 800022e:	3601      	adds	r6, #1
 8000230:	e7ee      	b.n	8000210 <__libc_init_array+0xc>
 8000232:	00b3      	lsls	r3, r6, #2
 8000234:	58eb      	ldr	r3, [r5, r3]
 8000236:	4798      	blx	r3
 8000238:	3601      	adds	r6, #1
 800023a:	e7f2      	b.n	8000222 <__libc_init_array+0x1e>
 800023c:	08000264 	.word	0x08000264
 8000240:	08000264 	.word	0x08000264
 8000244:	08000268 	.word	0x08000268
 8000248:	08000264 	.word	0x08000264

0800024c <_init>:
 800024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000252:	bc08      	pop	{r3}
 8000254:	469e      	mov	lr, r3
 8000256:	4770      	bx	lr

08000258 <_fini>:
 8000258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800025e:	bc08      	pop	{r3}
 8000260:	469e      	mov	lr, r3
 8000262:	4770      	bx	lr
