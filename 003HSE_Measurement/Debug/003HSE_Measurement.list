
003HSE_Measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002a4  080002ac  000102ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002a4  080002a4  000102ac  2**0
                  CONTENTS
  4 .ARM          00000000  080002a4  080002a4  000102ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002a4  080002ac  000102ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002a4  080002a4  000102a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002a8  080002a8  000102a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002ac  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002ac  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000102ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000102d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000010e  00000000  00000000  00010317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000086  00000000  00000000  00010425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000104b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  000104f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f5e  00000000  00000000  00010525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004bb  00000000  00000000  00011483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c04  00000000  00000000  0001193e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000005c  00000000  00000000  00015544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000155a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800028c 	.word	0x0800028c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800028c 	.word	0x0800028c

08000108 <main>:
#define RCC_CR_REG_ADDR			(RCC_BASE_ADDR + RCC_CR_REG_OFFSET)

#define GPIOA_BASE_ADDR 		0x48000000UL

int main(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b086      	sub	sp, #24
 800010c:	af00      	add	r7, sp, #0

	uint32_t *pRccCrReg = (uint32_t*)RCC_CR_REG_ADDR;
 800010e:	4b31      	ldr	r3, [pc, #196]	; (80001d4 <main+0xcc>)
 8000110:	617b      	str	r3, [r7, #20]
	uint32_t *pRccCfgrReg = (uint32_t*)RCC_CFGR_REG_ADDR;
 8000112:	4b31      	ldr	r3, [pc, #196]	; (80001d8 <main+0xd0>)
 8000114:	613b      	str	r3, [r7, #16]


	// 1. Enable the HSE clock using HSEBYP bit (RCC_CR)
	*pRccCrReg |= (1 << 18);
 8000116:	697b      	ldr	r3, [r7, #20]
 8000118:	681b      	ldr	r3, [r3, #0]
 800011a:	2280      	movs	r2, #128	; 0x80
 800011c:	02d2      	lsls	r2, r2, #11
 800011e:	431a      	orrs	r2, r3
 8000120:	697b      	ldr	r3, [r7, #20]
 8000122:	601a      	str	r2, [r3, #0]

	*pRccCrReg |= (1 << 16);
 8000124:	697b      	ldr	r3, [r7, #20]
 8000126:	681b      	ldr	r3, [r3, #0]
 8000128:	2280      	movs	r2, #128	; 0x80
 800012a:	0252      	lsls	r2, r2, #9
 800012c:	431a      	orrs	r2, r3
 800012e:	697b      	ldr	r3, [r7, #20]
 8000130:	601a      	str	r2, [r3, #0]

	// 2. Wait until the HSE clock from the external ST-Link crystal stabilizes
	while(!(*pRccCrReg & (1 << 17)));
 8000132:	46c0      	nop			; (mov r8, r8)
 8000134:	697b      	ldr	r3, [r7, #20]
 8000136:	681a      	ldr	r2, [r3, #0]
 8000138:	2380      	movs	r3, #128	; 0x80
 800013a:	029b      	lsls	r3, r3, #10
 800013c:	4013      	ands	r3, r2
 800013e:	d0f9      	beq.n	8000134 <main+0x2c>

	// 3. Switch the system clock to HSE (RCC_CFGR)
	*pRccCfgrReg &= ~(0x3 << 0); // Clearing the bit position
 8000140:	693b      	ldr	r3, [r7, #16]
 8000142:	681b      	ldr	r3, [r3, #0]
 8000144:	2203      	movs	r2, #3
 8000146:	4393      	bics	r3, r2
 8000148:	001a      	movs	r2, r3
 800014a:	693b      	ldr	r3, [r7, #16]
 800014c:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg |= (1 << 0); // setting the system clock as HSE
 800014e:	693b      	ldr	r3, [r7, #16]
 8000150:	681b      	ldr	r3, [r3, #0]
 8000152:	2201      	movs	r2, #1
 8000154:	431a      	orrs	r2, r3
 8000156:	693b      	ldr	r3, [r7, #16]
 8000158:	601a      	str	r2, [r3, #0]

	// 1. Configure the RCC_CFGR Register MCO bit fields to select HSE as clock source
	*pRccCfgrReg &= ~(0x0F << 24); // Clear 24, 25, 26 and 27 bit positions
 800015a:	693b      	ldr	r3, [r7, #16]
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4a1f      	ldr	r2, [pc, #124]	; (80001dc <main+0xd4>)
 8000160:	401a      	ands	r2, r3
 8000162:	693b      	ldr	r3, [r7, #16]
 8000164:	601a      	str	r2, [r3, #0]

	// 2. Configure the RCC_CFGR Register MCO bit fields to select HSE as clock source
	*pRccCfgrReg |= (0x6 << 24); // setting up the corresponding bits to select HSE as clock source 0110
 8000166:	693b      	ldr	r3, [r7, #16]
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	22c0      	movs	r2, #192	; 0xc0
 800016c:	04d2      	lsls	r2, r2, #19
 800016e:	431a      	orrs	r2, r3
 8000170:	693b      	ldr	r3, [r7, #16]
 8000172:	601a      	str	r2, [r3, #0]

	// 2a Configure the Pre-scaler for the RCC clock configuration
	*pRccCfgrReg &= ~(0x7 << 28); // Clearing the bit positions
 8000174:	693b      	ldr	r3, [r7, #16]
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <main+0xd8>)
 800017a:	401a      	ands	r2, r3
 800017c:	693b      	ldr	r3, [r7, #16]
 800017e:	601a      	str	r2, [r3, #0]

	// 2b. Configure the Pre-scaler for the RCC clock configuration
	*pRccCfgrReg |= (0x2 << 28); // Setting the bit positions for converting the HSE clock to 8Mhz / 4 = 2MHz
 8000180:	693b      	ldr	r3, [r7, #16]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2280      	movs	r2, #128	; 0x80
 8000186:	0592      	lsls	r2, r2, #22
 8000188:	431a      	orrs	r2, r3
 800018a:	693b      	ldr	r3, [r7, #16]
 800018c:	601a      	str	r2, [r3, #0]
	// 3. Configure PA8 to AF0 mode to behave as MCO signal

	// 3a. Enable the peripheral clock for GPIOA peripheral
	uint32_t *pRCCAhbEnr = (uint32_t*)(RCC_BASE_ADDR + 0x14);
 800018e:	4b15      	ldr	r3, [pc, #84]	; (80001e4 <main+0xdc>)
 8000190:	60fb      	str	r3, [r7, #12]
	*pRCCAhbEnr |= (1 << 17); // Enable the GPIOA peripheral Clock
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2280      	movs	r2, #128	; 0x80
 8000198:	0292      	lsls	r2, r2, #10
 800019a:	431a      	orrs	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	601a      	str	r2, [r3, #0]

	// 3b. Configure the mode of GPIOA pin 8 as alternate function mode
	uint32_t *pGPIOAModeReg = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 80001a0:	2390      	movs	r3, #144	; 0x90
 80001a2:	05db      	lsls	r3, r3, #23
 80001a4:	60bb      	str	r3, [r7, #8]
	*pGPIOAModeReg &= ~(0x3 << 16); // Clearing the bit positions
 80001a6:	68bb      	ldr	r3, [r7, #8]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a0f      	ldr	r2, [pc, #60]	; (80001e8 <main+0xe0>)
 80001ac:	401a      	ands	r2, r3
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	601a      	str	r2, [r3, #0]
	*pGPIOAModeReg |= (0x2 << 16); // Setting the bit positions for alternate function mode 10
 80001b2:	68bb      	ldr	r3, [r7, #8]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	2280      	movs	r2, #128	; 0x80
 80001b8:	0292      	lsls	r2, r2, #10
 80001ba:	431a      	orrs	r2, r3
 80001bc:	68bb      	ldr	r3, [r7, #8]
 80001be:	601a      	str	r2, [r3, #0]

	// 3c. Configure the alternate function register to set the mode 0 for PA8
	uint32_t *pGPIOAAltFunHigReg = (uint32_t*)(GPIOA_BASE_ADDR + 0x24);
 80001c0:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <main+0xe4>)
 80001c2:	607b      	str	r3, [r7, #4]
	*pGPIOAAltFunHigReg &= ~(0xF << 0);
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	220f      	movs	r2, #15
 80001ca:	4393      	bics	r3, r2
 80001cc:	001a      	movs	r2, r3
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	601a      	str	r2, [r3, #0]

	for(;;);
 80001d2:	e7fe      	b.n	80001d2 <main+0xca>
 80001d4:	40021000 	.word	0x40021000
 80001d8:	40021004 	.word	0x40021004
 80001dc:	f0ffffff 	.word	0xf0ffffff
 80001e0:	8fffffff 	.word	0x8fffffff
 80001e4:	40021014 	.word	0x40021014
 80001e8:	fffcffff 	.word	0xfffcffff
 80001ec:	48000024 	.word	0x48000024

080001f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001f0:	480d      	ldr	r0, [pc, #52]	; (8000228 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001f4:	e000      	b.n	80001f8 <Reset_Handler+0x8>
 80001f6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f8:	480c      	ldr	r0, [pc, #48]	; (800022c <LoopForever+0x6>)
  ldr r1, =_edata
 80001fa:	490d      	ldr	r1, [pc, #52]	; (8000230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001fc:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <LoopForever+0xe>)
  movs r3, #0
 80001fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000200:	e002      	b.n	8000208 <LoopCopyDataInit>

08000202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000206:	3304      	adds	r3, #4

08000208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800020a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800020c:	d3f9      	bcc.n	8000202 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020e:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000210:	4c0a      	ldr	r4, [pc, #40]	; (800023c <LoopForever+0x16>)
  movs r3, #0
 8000212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000214:	e001      	b.n	800021a <LoopFillZerobss>

08000216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000218:	3204      	adds	r2, #4

0800021a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800021a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800021c:	d3fb      	bcc.n	8000216 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021e:	f000 f811 	bl	8000244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000222:	f7ff ff71 	bl	8000108 <main>

08000226 <LoopForever>:

LoopForever:
  b LoopForever
 8000226:	e7fe      	b.n	8000226 <LoopForever>
  ldr   r0, =_estack
 8000228:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800022c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000230:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000234:	080002ac 	.word	0x080002ac
  ldr r2, =_sbss
 8000238:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800023c:	2000001c 	.word	0x2000001c

08000240 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000240:	e7fe      	b.n	8000240 <ADC_IRQHandler>
	...

08000244 <__libc_init_array>:
 8000244:	b570      	push	{r4, r5, r6, lr}
 8000246:	2600      	movs	r6, #0
 8000248:	4c0c      	ldr	r4, [pc, #48]	; (800027c <__libc_init_array+0x38>)
 800024a:	4d0d      	ldr	r5, [pc, #52]	; (8000280 <__libc_init_array+0x3c>)
 800024c:	1b64      	subs	r4, r4, r5
 800024e:	10a4      	asrs	r4, r4, #2
 8000250:	42a6      	cmp	r6, r4
 8000252:	d109      	bne.n	8000268 <__libc_init_array+0x24>
 8000254:	2600      	movs	r6, #0
 8000256:	f000 f819 	bl	800028c <_init>
 800025a:	4c0a      	ldr	r4, [pc, #40]	; (8000284 <__libc_init_array+0x40>)
 800025c:	4d0a      	ldr	r5, [pc, #40]	; (8000288 <__libc_init_array+0x44>)
 800025e:	1b64      	subs	r4, r4, r5
 8000260:	10a4      	asrs	r4, r4, #2
 8000262:	42a6      	cmp	r6, r4
 8000264:	d105      	bne.n	8000272 <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	00b3      	lsls	r3, r6, #2
 800026a:	58eb      	ldr	r3, [r5, r3]
 800026c:	4798      	blx	r3
 800026e:	3601      	adds	r6, #1
 8000270:	e7ee      	b.n	8000250 <__libc_init_array+0xc>
 8000272:	00b3      	lsls	r3, r6, #2
 8000274:	58eb      	ldr	r3, [r5, r3]
 8000276:	4798      	blx	r3
 8000278:	3601      	adds	r6, #1
 800027a:	e7f2      	b.n	8000262 <__libc_init_array+0x1e>
 800027c:	080002a4 	.word	0x080002a4
 8000280:	080002a4 	.word	0x080002a4
 8000284:	080002a8 	.word	0x080002a8
 8000288:	080002a4 	.word	0x080002a4

0800028c <_init>:
 800028c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000292:	bc08      	pop	{r3}
 8000294:	469e      	mov	lr, r3
 8000296:	4770      	bx	lr

08000298 <_fini>:
 8000298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029e:	bc08      	pop	{r3}
 80002a0:	469e      	mov	lr, r3
 80002a2:	4770      	bx	lr
