
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000654  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000818  08000820  00010820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000818  08000818  00010820  2**0
                  CONTENTS
  4 .ARM          00000000  08000818  08000818  00010820  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000818  08000820  00010820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000818  08000818  00010818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800081c  0800081c  0001081c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000820  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000820  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010820  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010850  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a32  00000000  00000000  00010893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002e2  00000000  00000000  000112c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000115a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000085  00000000  00000000  00011668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001e4b  00000000  00000000  000116ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fd0  00000000  00000000  00013538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007f5f  00000000  00000000  00014508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000024c  00000000  00000000  0001c468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0001c6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000800 	.word	0x08000800

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000800 	.word	0x08000800

08000204 <delay>:
 */

#include "stm32f446xx.h"

void delay(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for (uint32_t i; i <= 500000/2; i++);
 800020a:	e002      	b.n	8000212 <delay+0xe>
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3301      	adds	r3, #1
 8000210:	607b      	str	r3, [r7, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <delay+0x24>)
 8000216:	4293      	cmp	r3, r2
 8000218:	d9f8      	bls.n	800020c <delay+0x8>
}
 800021a:	bf00      	nop
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	0003d090 	.word	0x0003d090

0800022c <main>:


int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOA;
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <main+0x34>)
 8000234:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_5;
 8000236:	2305      	movs	r3, #5
 8000238:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800023a:	2301      	movs	r3, #1
 800023c:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800023e:	2302      	movs	r3, #2
 8000240:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000242:	2300      	movs	r3, #0
 8000244:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000246:	2300      	movs	r3, #0
 8000248:	72fb      	strb	r3, [r7, #11]


	GPIO_Init(&GpioLed);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f903 	bl	8000458 <GPIO_Init>

	while(1)
	{
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NUM_5);
 8000252:	2105      	movs	r1, #5
 8000254:	4802      	ldr	r0, [pc, #8]	; (8000260 <main+0x34>)
 8000256:	f000 fa99 	bl	800078c <GPIO_ToggleOutputPin>
		delay();
 800025a:	f7ff ffd3 	bl	8000204 <delay>
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NUM_5);
 800025e:	e7f8      	b.n	8000252 <main+0x26>
 8000260:	40020000 	.word	0x40020000

08000264 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000264:	480d      	ldr	r0, [pc, #52]	; (800029c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000266:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000268:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800026c:	480c      	ldr	r0, [pc, #48]	; (80002a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800026e:	490d      	ldr	r1, [pc, #52]	; (80002a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <LoopForever+0xe>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000274:	e002      	b.n	800027c <LoopCopyDataInit>

08000276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027a:	3304      	adds	r3, #4

0800027c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800027c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000280:	d3f9      	bcc.n	8000276 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000282:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000284:	4c0a      	ldr	r4, [pc, #40]	; (80002b0 <LoopForever+0x16>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000288:	e001      	b.n	800028e <LoopFillZerobss>

0800028a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800028c:	3204      	adds	r2, #4

0800028e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000290:	d3fb      	bcc.n	800028a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000292:	f000 fa91 	bl	80007b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000296:	f7ff ffc9 	bl	800022c <main>

0800029a <LoopForever>:

LoopForever:
  b LoopForever
 800029a:	e7fe      	b.n	800029a <LoopForever>
  ldr   r0, =_estack
 800029c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a8:	08000820 	.word	0x08000820
  ldr r2, =_sbss
 80002ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC_IRQHandler>
	...

080002b8 <GPIO_PeriClockControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	460b      	mov	r3, r1
 80002c2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d157      	bne.n	800037a <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a59      	ldr	r2, [pc, #356]	; (8000434 <GPIO_PeriClockControl+0x17c>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002d2:	4b59      	ldr	r3, [pc, #356]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80002d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d6:	4a58      	ldr	r2, [pc, #352]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80002de:	e0a3      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a56      	ldr	r2, [pc, #344]	; (800043c <GPIO_PeriClockControl+0x184>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002e8:	4b53      	ldr	r3, [pc, #332]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ec:	4a52      	ldr	r2, [pc, #328]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f4:	e098      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a51      	ldr	r2, [pc, #324]	; (8000440 <GPIO_PeriClockControl+0x188>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002fe:	4b4e      	ldr	r3, [pc, #312]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	4a4d      	ldr	r2, [pc, #308]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000304:	f043 0304 	orr.w	r3, r3, #4
 8000308:	6313      	str	r3, [r2, #48]	; 0x30
}
 800030a:	e08d      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a4d      	ldr	r2, [pc, #308]	; (8000444 <GPIO_PeriClockControl+0x18c>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000314:	4b48      	ldr	r3, [pc, #288]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000318:	4a47      	ldr	r2, [pc, #284]	; (8000438 <GPIO_PeriClockControl+0x180>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000320:	e082      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a48      	ldr	r2, [pc, #288]	; (8000448 <GPIO_PeriClockControl+0x190>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800032a:	4b43      	ldr	r3, [pc, #268]	; (8000438 <GPIO_PeriClockControl+0x180>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a42      	ldr	r2, [pc, #264]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000330:	f043 0310 	orr.w	r3, r3, #16
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000336:	e077      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a44      	ldr	r2, [pc, #272]	; (800044c <GPIO_PeriClockControl+0x194>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000340:	4b3d      	ldr	r3, [pc, #244]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a3c      	ldr	r2, [pc, #240]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000346:	f043 0320 	orr.w	r3, r3, #32
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	e06c      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a3f      	ldr	r2, [pc, #252]	; (8000450 <GPIO_PeriClockControl+0x198>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000356:	4b38      	ldr	r3, [pc, #224]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	4a37      	ldr	r2, [pc, #220]	; (8000438 <GPIO_PeriClockControl+0x180>)
 800035c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000362:	e061      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a3b      	ldr	r2, [pc, #236]	; (8000454 <GPIO_PeriClockControl+0x19c>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d15d      	bne.n	8000428 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800036c:	4b32      	ldr	r3, [pc, #200]	; (8000438 <GPIO_PeriClockControl+0x180>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a31      	ldr	r2, [pc, #196]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000378:	e056      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a2d      	ldr	r2, [pc, #180]	; (8000434 <GPIO_PeriClockControl+0x17c>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000382:	4b2d      	ldr	r3, [pc, #180]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a2c      	ldr	r2, [pc, #176]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000388:	f023 0301 	bic.w	r3, r3, #1
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038e:	e04b      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a2a      	ldr	r2, [pc, #168]	; (800043c <GPIO_PeriClockControl+0x184>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000398:	4b27      	ldr	r3, [pc, #156]	; (8000438 <GPIO_PeriClockControl+0x180>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a26      	ldr	r2, [pc, #152]	; (8000438 <GPIO_PeriClockControl+0x180>)
 800039e:	f023 0302 	bic.w	r3, r3, #2
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e040      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a25      	ldr	r2, [pc, #148]	; (8000440 <GPIO_PeriClockControl+0x188>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80003ae:	4b22      	ldr	r3, [pc, #136]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a21      	ldr	r2, [pc, #132]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80003b4:	f023 0304 	bic.w	r3, r3, #4
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e035      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a21      	ldr	r2, [pc, #132]	; (8000444 <GPIO_PeriClockControl+0x18c>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80003c4:	4b1c      	ldr	r3, [pc, #112]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a1b      	ldr	r2, [pc, #108]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80003ca:	f023 0308 	bic.w	r3, r3, #8
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e02a      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a1c      	ldr	r2, [pc, #112]	; (8000448 <GPIO_PeriClockControl+0x190>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a16      	ldr	r2, [pc, #88]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80003e0:	f023 0310 	bic.w	r3, r3, #16
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e01f      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a18      	ldr	r2, [pc, #96]	; (800044c <GPIO_PeriClockControl+0x194>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_EN();
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a10      	ldr	r2, [pc, #64]	; (8000438 <GPIO_PeriClockControl+0x180>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e014      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a13      	ldr	r2, [pc, #76]	; (8000450 <GPIO_PeriClockControl+0x198>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <GPIO_PeriClockControl+0x180>)
 800040c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e009      	b.n	8000428 <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a0f      	ldr	r2, [pc, #60]	; (8000454 <GPIO_PeriClockControl+0x19c>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d105      	bne.n	8000428 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <GPIO_PeriClockControl+0x180>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a05      	ldr	r2, [pc, #20]	; (8000438 <GPIO_PeriClockControl+0x180>)
 8000422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	40020000 	.word	0x40020000
 8000438:	40023800 	.word	0x40023800
 800043c:	40020400 	.word	0x40020400
 8000440:	40020800 	.word	0x40020800
 8000444:	40020c00 	.word	0x40020c00
 8000448:	40021000 	.word	0x40021000
 800044c:	40021400 	.word	0x40021400
 8000450:	40021800 	.word	0x40021800
 8000454:	40021c00 	.word	0x40021c00

08000458 <GPIO_Init>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // Temp register
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]

	// Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2101      	movs	r1, #1
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff24 	bl	80002b8 <GPIO_PeriClockControl>

	//1. Configure the mode of GPIO PIN
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	2b03      	cmp	r3, #3
 8000476:	d81f      	bhi.n	80004b8 <GPIO_Init+0x60>
	{
		// Non interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	795b      	ldrb	r3, [r3, #5]
 800047c:	461a      	mov	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	791b      	ldrb	r3, [r3, #4]
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	fa02 f303 	lsl.w	r3, r2, r3
 8000488:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// Clearing
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	791b      	ldrb	r3, [r3, #4]
 8000494:	4619      	mov	r1, r3
 8000496:	2303      	movs	r3, #3
 8000498:	408b      	lsls	r3, r1
 800049a:	43db      	mvns	r3, r3
 800049c:	4619      	mov	r1, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	400a      	ands	r2, r1
 80004a4:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;	// Setting
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	6819      	ldr	r1, [r3, #0]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	430a      	orrs	r2, r1
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	e0c2      	b.n	800063e <GPIO_Init+0x1e6>
	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	795b      	ldrb	r3, [r3, #5]
 80004bc:	2b04      	cmp	r3, #4
 80004be:	d117      	bne.n	80004f0 <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80004c0:	4b47      	ldr	r3, [pc, #284]	; (80005e0 <GPIO_Init+0x188>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	7912      	ldrb	r2, [r2, #4]
 80004c8:	4611      	mov	r1, r2
 80004ca:	2201      	movs	r2, #1
 80004cc:	408a      	lsls	r2, r1
 80004ce:	4611      	mov	r1, r2
 80004d0:	4a43      	ldr	r2, [pc, #268]	; (80005e0 <GPIO_Init+0x188>)
 80004d2:	430b      	orrs	r3, r1
 80004d4:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80004d6:	4b42      	ldr	r3, [pc, #264]	; (80005e0 <GPIO_Init+0x188>)
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	7912      	ldrb	r2, [r2, #4]
 80004de:	4611      	mov	r1, r2
 80004e0:	2201      	movs	r2, #1
 80004e2:	408a      	lsls	r2, r1
 80004e4:	43d2      	mvns	r2, r2
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a3d      	ldr	r2, [pc, #244]	; (80005e0 <GPIO_Init+0x188>)
 80004ea:	400b      	ands	r3, r1
 80004ec:	6093      	str	r3, [r2, #8]
 80004ee:	e035      	b.n	800055c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	795b      	ldrb	r3, [r3, #5]
 80004f4:	2b05      	cmp	r3, #5
 80004f6:	d117      	bne.n	8000528 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80004f8:	4b39      	ldr	r3, [pc, #228]	; (80005e0 <GPIO_Init+0x188>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	7912      	ldrb	r2, [r2, #4]
 8000500:	4611      	mov	r1, r2
 8000502:	2201      	movs	r2, #1
 8000504:	408a      	lsls	r2, r1
 8000506:	4611      	mov	r1, r2
 8000508:	4a35      	ldr	r2, [pc, #212]	; (80005e0 <GPIO_Init+0x188>)
 800050a:	430b      	orrs	r3, r1
 800050c:	6093      	str	r3, [r2, #8]
			// Clear the corresponding FTSR bit
			EXTI ->FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800050e:	4b34      	ldr	r3, [pc, #208]	; (80005e0 <GPIO_Init+0x188>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	7912      	ldrb	r2, [r2, #4]
 8000516:	4611      	mov	r1, r2
 8000518:	2201      	movs	r2, #1
 800051a:	408a      	lsls	r2, r1
 800051c:	43d2      	mvns	r2, r2
 800051e:	4611      	mov	r1, r2
 8000520:	4a2f      	ldr	r2, [pc, #188]	; (80005e0 <GPIO_Init+0x188>)
 8000522:	400b      	ands	r3, r1
 8000524:	60d3      	str	r3, [r2, #12]
 8000526:	e019      	b.n	800055c <GPIO_Init+0x104>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	2b06      	cmp	r3, #6
 800052e:	d115      	bne.n	800055c <GPIO_Init+0x104>
		{
			//1. Configure both FTSR and RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000530:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <GPIO_Init+0x188>)
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	7912      	ldrb	r2, [r2, #4]
 8000538:	4611      	mov	r1, r2
 800053a:	2201      	movs	r2, #1
 800053c:	408a      	lsls	r2, r1
 800053e:	4611      	mov	r1, r2
 8000540:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <GPIO_Init+0x188>)
 8000542:	430b      	orrs	r3, r1
 8000544:	6093      	str	r3, [r2, #8]

			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000546:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <GPIO_Init+0x188>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	7912      	ldrb	r2, [r2, #4]
 800054e:	4611      	mov	r1, r2
 8000550:	2201      	movs	r2, #1
 8000552:	408a      	lsls	r2, r1
 8000554:	4611      	mov	r1, r2
 8000556:	4a22      	ldr	r2, [pc, #136]	; (80005e0 <GPIO_Init+0x188>)
 8000558:	430b      	orrs	r3, r1
 800055a:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	089b      	lsrs	r3, r3, #2
 8000562:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	f003 0303 	and.w	r3, r3, #3
 800056c:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle ->pGPIOx);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <GPIO_Init+0x18c>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d045      	beq.n	8000604 <GPIO_Init+0x1ac>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <GPIO_Init+0x190>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d02b      	beq.n	80005da <GPIO_Init+0x182>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a19      	ldr	r2, [pc, #100]	; (80005ec <GPIO_Init+0x194>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d024      	beq.n	80005d6 <GPIO_Init+0x17e>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <GPIO_Init+0x198>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d01d      	beq.n	80005d2 <GPIO_Init+0x17a>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <GPIO_Init+0x19c>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d016      	beq.n	80005ce <GPIO_Init+0x176>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <GPIO_Init+0x1a0>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00f      	beq.n	80005ca <GPIO_Init+0x172>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a13      	ldr	r2, [pc, #76]	; (80005fc <GPIO_Init+0x1a4>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d008      	beq.n	80005c6 <GPIO_Init+0x16e>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a11      	ldr	r2, [pc, #68]	; (8000600 <GPIO_Init+0x1a8>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d101      	bne.n	80005c2 <GPIO_Init+0x16a>
 80005be:	2307      	movs	r3, #7
 80005c0:	e021      	b.n	8000606 <GPIO_Init+0x1ae>
 80005c2:	2300      	movs	r3, #0
 80005c4:	e01f      	b.n	8000606 <GPIO_Init+0x1ae>
 80005c6:	2306      	movs	r3, #6
 80005c8:	e01d      	b.n	8000606 <GPIO_Init+0x1ae>
 80005ca:	2305      	movs	r3, #5
 80005cc:	e01b      	b.n	8000606 <GPIO_Init+0x1ae>
 80005ce:	2304      	movs	r3, #4
 80005d0:	e019      	b.n	8000606 <GPIO_Init+0x1ae>
 80005d2:	2303      	movs	r3, #3
 80005d4:	e017      	b.n	8000606 <GPIO_Init+0x1ae>
 80005d6:	2302      	movs	r3, #2
 80005d8:	e015      	b.n	8000606 <GPIO_Init+0x1ae>
 80005da:	2301      	movs	r3, #1
 80005dc:	e013      	b.n	8000606 <GPIO_Init+0x1ae>
 80005de:	bf00      	nop
 80005e0:	40013c00 	.word	0x40013c00
 80005e4:	40020000 	.word	0x40020000
 80005e8:	40020400 	.word	0x40020400
 80005ec:	40020800 	.word	0x40020800
 80005f0:	40020c00 	.word	0x40020c00
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40021400 	.word	0x40021400
 80005fc:	40021800 	.word	0x40021800
 8000600:	40021c00 	.word	0x40021c00
 8000604:	2300      	movs	r3, #0
 8000606:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000608:	4b5d      	ldr	r3, [pc, #372]	; (8000780 <GPIO_Init+0x328>)
 800060a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060c:	4a5c      	ldr	r2, [pc, #368]	; (8000780 <GPIO_Init+0x328>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6453      	str	r3, [r2, #68]	; 0x44
		SYSGFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 8000614:	7c7a      	ldrb	r2, [r7, #17]
 8000616:	7cbb      	ldrb	r3, [r7, #18]
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	fa02 f103 	lsl.w	r1, r2, r3
 800061e:	4a59      	ldr	r2, [pc, #356]	; (8000784 <GPIO_Init+0x32c>)
 8000620:	7cfb      	ldrb	r3, [r7, #19]
 8000622:	3302      	adds	r3, #2
 8000624:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000628:	4b57      	ldr	r3, [pc, #348]	; (8000788 <GPIO_Init+0x330>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	7912      	ldrb	r2, [r2, #4]
 8000630:	4611      	mov	r1, r2
 8000632:	2201      	movs	r2, #1
 8000634:	408a      	lsls	r2, r1
 8000636:	4611      	mov	r1, r2
 8000638:	4a53      	ldr	r2, [pc, #332]	; (8000788 <GPIO_Init+0x330>)
 800063a:	430b      	orrs	r3, r1
 800063c:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	799b      	ldrb	r3, [r3, #6]
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// clearing
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	4619      	mov	r1, r3
 8000660:	2303      	movs	r3, #3
 8000662:	408b      	lsls	r3, r1
 8000664:	43db      	mvns	r3, r3
 8000666:	4619      	mov	r1, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	400a      	ands	r2, r1
 800066e:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;	// Setting
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6899      	ldr	r1, [r3, #8]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	430a      	orrs	r2, r1
 800067e:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
	//3. Configure the Push-pull settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	79db      	ldrb	r3, [r3, #7]
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68da      	ldr	r2, [r3, #12]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	4619      	mov	r1, r3
 80006a2:	2303      	movs	r3, #3
 80006a4:	408b      	lsls	r3, r1
 80006a6:	43db      	mvns	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	400a      	ands	r2, r1
 80006b0:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	68d9      	ldr	r1, [r3, #12]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	430a      	orrs	r2, r1
 80006c0:	60da      	str	r2, [r3, #12]

	temp = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
	//4. Configure the Output Type
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	795b      	ldrb	r3, [r3, #5]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d11d      	bne.n	800070a <GPIO_Init+0x2b2>
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7a1b      	ldrb	r3, [r3, #8]
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	791b      	ldrb	r3, [r3, #4]
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	685a      	ldr	r2, [r3, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	4619      	mov	r1, r3
 80006ea:	2303      	movs	r3, #3
 80006ec:	408b      	lsls	r3, r1
 80006ee:	43db      	mvns	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	400a      	ands	r2, r1
 80006f8:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6859      	ldr	r1, [r3, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	430a      	orrs	r2, r1
 8000708:	605a      	str	r2, [r3, #4]
	}
	//5. Configure the Alternate functionality, if required
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	795b      	ldrb	r3, [r3, #5]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d131      	bne.n	8000776 <GPIO_Init+0x31e>
	{
		// Configure the alternate function here
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle -> pGPIOx -> AFR[temp1] &= ~(0xF << (4 * temp2));
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	7c3a      	ldrb	r2, [r7, #16]
 800072a:	3208      	adds	r2, #8
 800072c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	220f      	movs	r2, #15
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43db      	mvns	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	7c3a      	ldrb	r2, [r7, #16]
 8000744:	4001      	ands	r1, r0
 8000746:	3208      	adds	r2, #8
 8000748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle -> pGPIOx -> AFR[temp1] |= pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	7c3a      	ldrb	r2, [r7, #16]
 8000752:	3208      	adds	r2, #8
 8000754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7a5b      	ldrb	r3, [r3, #9]
 800075c:	461a      	mov	r2, r3
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	7c3a      	ldrb	r2, [r7, #16]
 800076e:	4301      	orrs	r1, r0
 8000770:	3208      	adds	r2, #8
 8000772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40013800 	.word	0x40013800
 8000788:	40013c00 	.word	0x40013c00

0800078c <GPIO_ToggleOutputPin>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
	pGPIOx -> ODR ^= (1 << PinNumber);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	78fa      	ldrb	r2, [r7, #3]
 800079e:	2101      	movs	r1, #1
 80007a0:	fa01 f202 	lsl.w	r2, r1, r2
 80007a4:	405a      	eors	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	615a      	str	r2, [r3, #20]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
	...

080007b8 <__libc_init_array>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	4d0d      	ldr	r5, [pc, #52]	; (80007f0 <__libc_init_array+0x38>)
 80007bc:	4c0d      	ldr	r4, [pc, #52]	; (80007f4 <__libc_init_array+0x3c>)
 80007be:	1b64      	subs	r4, r4, r5
 80007c0:	10a4      	asrs	r4, r4, #2
 80007c2:	2600      	movs	r6, #0
 80007c4:	42a6      	cmp	r6, r4
 80007c6:	d109      	bne.n	80007dc <__libc_init_array+0x24>
 80007c8:	4d0b      	ldr	r5, [pc, #44]	; (80007f8 <__libc_init_array+0x40>)
 80007ca:	4c0c      	ldr	r4, [pc, #48]	; (80007fc <__libc_init_array+0x44>)
 80007cc:	f000 f818 	bl	8000800 <_init>
 80007d0:	1b64      	subs	r4, r4, r5
 80007d2:	10a4      	asrs	r4, r4, #2
 80007d4:	2600      	movs	r6, #0
 80007d6:	42a6      	cmp	r6, r4
 80007d8:	d105      	bne.n	80007e6 <__libc_init_array+0x2e>
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e0:	4798      	blx	r3
 80007e2:	3601      	adds	r6, #1
 80007e4:	e7ee      	b.n	80007c4 <__libc_init_array+0xc>
 80007e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ea:	4798      	blx	r3
 80007ec:	3601      	adds	r6, #1
 80007ee:	e7f2      	b.n	80007d6 <__libc_init_array+0x1e>
 80007f0:	08000818 	.word	0x08000818
 80007f4:	08000818 	.word	0x08000818
 80007f8:	08000818 	.word	0x08000818
 80007fc:	0800081c 	.word	0x0800081c

08000800 <_init>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	bf00      	nop
 8000804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000806:	bc08      	pop	{r3}
 8000808:	469e      	mov	lr, r3
 800080a:	4770      	bx	lr

0800080c <_fini>:
 800080c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800080e:	bf00      	nop
 8000810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000812:	bc08      	pop	{r3}
 8000814:	469e      	mov	lr, r3
 8000816:	4770      	bx	lr
