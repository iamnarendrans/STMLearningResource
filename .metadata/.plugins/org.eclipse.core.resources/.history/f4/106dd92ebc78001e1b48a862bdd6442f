/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#define RCC_BASE_ADDR			0x40021000UL

#define RCC_CFGR_REG_OFFSET		0x04UL

#define RCC_CFGR_REG_ADDR		(RCC_BASE_ADDR + RCC_CFGR_REG_OFFSET)

#define GPIOA_BASE_ADDR 		0x48000000UL

int main(void)
{

	uint32_t* pRccCfgrReg = (uint32_t*)RCC_CFGR_REG_ADDR;

	// 1. Configure the RCC_CFGR Register MCO bit fields to select HSI as clock source
	*pRccCfgrReg &= ~(0x0F << 24); // Clear 24, 25, 26 and 27 bit positions

	// 2. Configure the RCC_CFGR Register MCO bit fields to select HSI as clock source
	*pRccCfgrReg |= (0x5 << 24); // setting up the corresponding bits to select HSI as clock source 0101

	// 3. Configure PA8 to AF0 mode to behave as MCO signal

	// 3a. Enable the peripheral clock for GPIOA peripheral
	uint32_t *pRCCAhbEnr = (uint32_t*)(RCC_BASE_ADDR + 0x14);
	*pRCCAhbEnr |= (1 << 17); // Enable the GPIOA peripheral Clock

	// 3b. Configure the mode of GPIOA pin 8 as alternate function mode
	uint32_t *pGPIOAModeReg = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
	*pGPIOAModeReg &= ~(0x3 << 30); // Clearing the bit positions
	*pGPIOAModeReg |= (0x2 << 30); // Setting the bit positions for alternate function mode 10

	// 3c. Configure the alternate function register to set the mode 0 for PA8





	for(;;);
}
