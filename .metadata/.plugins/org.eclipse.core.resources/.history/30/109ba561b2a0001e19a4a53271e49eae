/*
 * PID.c
 *
 *  Created on: Dec 8, 2023
 *      Author: Narendran Srinivasan
 */
#include "PID.h"
#include <stdio.h>

void PIDControllerInit(PIDController *pid)
{

	// Clearing the controller variables

	pid->differentiator = 0.0f;
	pid->integrator = 0.0f;

	pid->prevError = 0.0f;
	pid->prevMeasurement = 0.0f;

	pid->out = 0.0f;

}


float PIDControllerUpdate(PIDController *pid, float setpoint, float measurement)
{

	/* Error Signal */
	float error = setpoint - measurement;

	/* Propotional Gain */
	float propotional = pid->Kp * error;

	/* Integrator Gain */
	pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->Ts * (error + pid->prevError);

	/* Anti-windup clamping */
	if(pid->integrator > pid->limMaxInt)
	{
		pid->integrator = pid->limMaxInt;
	}
	else if(pid->integrator < pid->limMinInt)
	{
		pid->integrator = pid->limMinInt;
	}

	/* Derivative Gain with (band-limited differentiator) */

	/* Note: Derivative on measurement, therefore -ve sign in front of the below equation */
	pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)
						+ (2.0f * pid->tau - pid->Ts) * pid->differentiator)
						/(2.0f * pid->tau - pid->Ts);

	/* Compute the output and apply limits */
	pid->out = propotional + pid->integrator + pid->differentiator;

	// Chec the output limits
	if(pid->out > pid->limMax)
	{
		pid->out = pid->limMax;
	}
	else if(pid->out < pid->limMin)
	{
		pid->out = pid->limMin;
	}

	/* Store the error and measurement for next update */
	pid->prevError = error;
	pid->prevMeasurement = measurement;

	/* Return the controller output */
	return pid->out;


}


// Initialise PI controller with gains and output limits
void PI_Init(PIController *ctrl, float Kp, float Ki, float limMin, float limMax)
{
	ctrl->Kp = Kp;
	ctrl->Ki = Ki;
	ctrl->limMin = limMin;
	ctrl->limMax = limMax;
	ctrl->integrator = 0.0f;
	ctrl->prevError = 0.0f;
	ctrl->output = 0.0f;

	// Disbale the feedforware while doing initialisation
	ctrl->limMinFF = 0.0f;
	ctrl->limMaxFF = 0.0f;
}

// Reset presistent variables and set output to zero
void PI_Reset(PIController *ctrl)
{
	ctrl->prevError = 0.0f;
	ctrl->integrator = 0.0f;
	ctrl->output = 0.0f;
}

// Enable feedforward control
void PI_SetFF(PIController *ctrl, float Kff, float limMinFF, float limMaxFF)
{
	ctrl->Kff = Kff;
	ctrl->limMinFF = limMinFF;
	ctrl->limMaxFF = limMaxFF;
}

// Main controller update routine, requires sample time T (in seconds)
void PI_Update(PIController *ctrl, float setpoint, float measurement, float T)
{
	/* Finding error signal */
	float error = setpoint - measurement;

	/* Propotional */
	float propotional = ctrl->Kp * error;

	/* Feedforward */
	float ff = ctrl->Kff * setpoint;

	if(ff > ctrl->limMaxFF)
	{
		ff = ctrl->limMaxFF;

	}
	else if(ff < ctrl->limMinFF)
	{
		ff = ctrl->limMinFF;
	}

	/* Integrator */
	ctrl->integrator = ctrl->integrator + 0.5f * T * ctrl->Ki + (error + ctrl->prevError);

	/* Dynamic Integrator clamping*/
	float limMinInt, limMaxInt;

	if (ctrl->limMax - propotional - ff > 0.0f)
	{
		limMaxInt = ctrl->limMax - propotional;
	}
	else
	{
		limMaxInt = 0.0f;
	}

	if (ctrl->limMin - propotional - ff < 0.0f)
	{
		limMinInt = ctrl->limMin - propotional;
	}
	else
	{
		limMinInt = 0.0f;
	}

	if (ctrl->integrator > limMaxInt)
	{
		ctrl->integrator = limMaxInt;
	}

}


