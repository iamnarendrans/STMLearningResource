
stm32f070xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000870  08000878  00010878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000870  08000870  00010878  2**0
                  CONTENTS
  4 .ARM          00000000  08000870  08000870  00010878  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000870  08000878  00010878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000870  08000870  00010870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000874  08000874  00010874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000878  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000878  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010878  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000108a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000096e  00000000  00000000  000108e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002ba  00000000  00000000  00011251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00011510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008b  00000000  00000000  000115d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001e8b  00000000  00000000  00011663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fbf  00000000  00000000  000134ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008a14  00000000  00000000  000144ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000022c  00000000  00000000  0001cec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0001d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000858 	.word	0x08000858

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000858 	.word	0x08000858

08000108 <main>:
	for (uint32_t i; i <= 500000; i++);
}


int main(void)
{
 8000108:	b590      	push	{r4, r7, lr}
 800010a:	b087      	sub	sp, #28
 800010c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed, GPIOBtn;
	memset(&GpioLed, 0, sizeof(GpioLed));
 800010e:	240c      	movs	r4, #12
 8000110:	193b      	adds	r3, r7, r4
 8000112:	220c      	movs	r2, #12
 8000114:	2100      	movs	r1, #0
 8000116:	0018      	movs	r0, r3
 8000118:	f000 fb72 	bl	8000800 <memset>
	memset(&GPIOBtn, 0, sizeof(GPIOBtn));
 800011c:	003b      	movs	r3, r7
 800011e:	220c      	movs	r2, #12
 8000120:	2100      	movs	r1, #0
 8000122:	0018      	movs	r0, r3
 8000124:	f000 fb6c 	bl	8000800 <memset>

	GpioLed.pGPIOx = GPIOA;
 8000128:	193b      	adds	r3, r7, r4
 800012a:	2290      	movs	r2, #144	; 0x90
 800012c:	05d2      	lsls	r2, r2, #23
 800012e:	601a      	str	r2, [r3, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_5;
 8000130:	193b      	adds	r3, r7, r4
 8000132:	2205      	movs	r2, #5
 8000134:	711a      	strb	r2, [r3, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000136:	193b      	adds	r3, r7, r4
 8000138:	2201      	movs	r2, #1
 800013a:	715a      	strb	r2, [r3, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800013c:	193b      	adds	r3, r7, r4
 800013e:	2202      	movs	r2, #2
 8000140:	719a      	strb	r2, [r3, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOType = GPIO_OP_TYPE_PP;
 8000142:	193b      	adds	r3, r7, r4
 8000144:	2200      	movs	r2, #0
 8000146:	721a      	strb	r2, [r3, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000148:	193b      	adds	r3, r7, r4
 800014a:	2200      	movs	r2, #0
 800014c:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 800014e:	2390      	movs	r3, #144	; 0x90
 8000150:	05db      	lsls	r3, r3, #23
 8000152:	2101      	movs	r1, #1
 8000154:	0018      	movs	r0, r3
 8000156:	f000 f867 	bl	8000228 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 800015a:	193b      	adds	r3, r7, r4
 800015c:	0018      	movs	r0, r3
 800015e:	f000 f8fb 	bl	8000358 <GPIO_Init>

	GPIOBtn.pGPIOx = GPIOC;
 8000162:	003b      	movs	r3, r7
 8000164:	4a13      	ldr	r2, [pc, #76]	; (80001b4 <main+0xac>)
 8000166:	601a      	str	r2, [r3, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 8000168:	003b      	movs	r3, r7
 800016a:	220d      	movs	r2, #13
 800016c:	711a      	strb	r2, [r3, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800016e:	003b      	movs	r3, r7
 8000170:	2204      	movs	r2, #4
 8000172:	715a      	strb	r2, [r3, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000174:	003b      	movs	r3, r7
 8000176:	2202      	movs	r2, #2
 8000178:	719a      	strb	r2, [r3, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800017a:	003b      	movs	r3, r7
 800017c:	2201      	movs	r2, #1
 800017e:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <main+0xac>)
 8000182:	2101      	movs	r1, #1
 8000184:	0018      	movs	r0, r3
 8000186:	f000 f84f 	bl	8000228 <GPIO_PeriClockControl>

	GPIO_Init(&GPIOBtn);
 800018a:	003b      	movs	r3, r7
 800018c:	0018      	movs	r0, r3
 800018e:	f000 f8e3 	bl	8000358 <GPIO_Init>

	GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NUM_5, GPIO_PIN_RESET);
 8000192:	2390      	movs	r3, #144	; 0x90
 8000194:	05db      	lsls	r3, r3, #23
 8000196:	2200      	movs	r2, #0
 8000198:	2105      	movs	r1, #5
 800019a:	0018      	movs	r0, r3
 800019c:	f000 fa66 	bl	800066c <GPIO_WriteToOutputPin>
	// IRQ Configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI4_15, NVIC_IRQ_PRI15);
 80001a0:	210f      	movs	r1, #15
 80001a2:	2007      	movs	r0, #7
 80001a4:	f000 fad6 	bl	8000754 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI4_15, ENABLE);
 80001a8:	2101      	movs	r1, #1
 80001aa:	2007      	movs	r0, #7
 80001ac:	f000 fa9e 	bl	80006ec <GPIO_IRQInterruptConfig>

	while(1);
 80001b0:	e7fe      	b.n	80001b0 <main+0xa8>
 80001b2:	46c0      	nop			; (mov r8, r8)
 80001b4:	48000800 	.word	0x48000800

080001b8 <EXTI4_15_IRQHandler>:
	return 0;
}


void EXTI4_15_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NUM_13);
 80001bc:	200d      	movs	r0, #13
 80001be:	f000 faff 	bl	80007c0 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NUM_5);
 80001c2:	2390      	movs	r3, #144	; 0x90
 80001c4:	05db      	lsls	r3, r3, #23
 80001c6:	2105      	movs	r1, #5
 80001c8:	0018      	movs	r0, r3
 80001ca:	f000 fa79 	bl	80006c0 <GPIO_ToggleOutputPin>
}
 80001ce:	46c0      	nop			; (mov r8, r8)
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001d4:	480d      	ldr	r0, [pc, #52]	; (800020c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001d8:	e000      	b.n	80001dc <Reset_Handler+0x8>
 80001da:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001dc:	480c      	ldr	r0, [pc, #48]	; (8000210 <LoopForever+0x6>)
  ldr r1, =_edata
 80001de:	490d      	ldr	r1, [pc, #52]	; (8000214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e0:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <LoopForever+0xe>)
  movs r3, #0
 80001e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e4:	e002      	b.n	80001ec <LoopCopyDataInit>

080001e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ea:	3304      	adds	r3, #4

080001ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f0:	d3f9      	bcc.n	80001e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <LoopForever+0x12>)
  ldr r4, =_ebss
 80001f4:	4c0a      	ldr	r4, [pc, #40]	; (8000220 <LoopForever+0x16>)
  movs r3, #0
 80001f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001f8:	e001      	b.n	80001fe <LoopFillZerobss>

080001fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001fc:	3204      	adds	r2, #4

080001fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000200:	d3fb      	bcc.n	80001fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000202:	f000 fb05 	bl	8000810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000206:	f7ff ff7f 	bl	8000108 <main>

0800020a <LoopForever>:

LoopForever:
  b LoopForever
 800020a:	e7fe      	b.n	800020a <LoopForever>
  ldr   r0, =_estack
 800020c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000214:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000218:	08000878 	.word	0x08000878
  ldr r2, =_sbss
 800021c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000220:	2000001c 	.word	0x2000001c

08000224 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000224:	e7fe      	b.n	8000224 <ADC_IRQHandler>
	...

08000228 <GPIO_PeriClockControl>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	000a      	movs	r2, r1
 8000232:	1cfb      	adds	r3, r7, #3
 8000234:	701a      	strb	r2, [r3, #0]
	if(EnorDi == ENABLE)
 8000236:	1cfb      	adds	r3, r7, #3
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d13c      	bne.n	80002b8 <GPIO_PeriClockControl+0x90>
	{
		if(pGPIOx == GPIOA)
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	429a      	cmp	r2, r3
 8000246:	d107      	bne.n	8000258 <GPIO_PeriClockControl+0x30>
		{
			GPIOA_PCLK_EN();
 8000248:	4b39      	ldr	r3, [pc, #228]	; (8000330 <GPIO_PeriClockControl+0x108>)
 800024a:	695a      	ldr	r2, [r3, #20]
 800024c:	4b38      	ldr	r3, [pc, #224]	; (8000330 <GPIO_PeriClockControl+0x108>)
 800024e:	2180      	movs	r1, #128	; 0x80
 8000250:	0289      	lsls	r1, r1, #10
 8000252:	430a      	orrs	r2, r1
 8000254:	615a      	str	r2, [r3, #20]
		else if(pGPIOx == GPIOF)
		{
			GPIOF_PCLK_DI();
		}
	}
}
 8000256:	e066      	b.n	8000326 <GPIO_PeriClockControl+0xfe>
		else if(pGPIOx == GPIOB)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a36      	ldr	r2, [pc, #216]	; (8000334 <GPIO_PeriClockControl+0x10c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d107      	bne.n	8000270 <GPIO_PeriClockControl+0x48>
			GPIOB_PCLK_EN();
 8000260:	4b33      	ldr	r3, [pc, #204]	; (8000330 <GPIO_PeriClockControl+0x108>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	4b32      	ldr	r3, [pc, #200]	; (8000330 <GPIO_PeriClockControl+0x108>)
 8000266:	2180      	movs	r1, #128	; 0x80
 8000268:	02c9      	lsls	r1, r1, #11
 800026a:	430a      	orrs	r2, r1
 800026c:	615a      	str	r2, [r3, #20]
}
 800026e:	e05a      	b.n	8000326 <GPIO_PeriClockControl+0xfe>
		else if(pGPIOx == GPIOC)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a31      	ldr	r2, [pc, #196]	; (8000338 <GPIO_PeriClockControl+0x110>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d107      	bne.n	8000288 <GPIO_PeriClockControl+0x60>
			GPIOC_PCLK_EN();
 8000278:	4b2d      	ldr	r3, [pc, #180]	; (8000330 <GPIO_PeriClockControl+0x108>)
 800027a:	695a      	ldr	r2, [r3, #20]
 800027c:	4b2c      	ldr	r3, [pc, #176]	; (8000330 <GPIO_PeriClockControl+0x108>)
 800027e:	2180      	movs	r1, #128	; 0x80
 8000280:	0309      	lsls	r1, r1, #12
 8000282:	430a      	orrs	r2, r1
 8000284:	615a      	str	r2, [r3, #20]
}
 8000286:	e04e      	b.n	8000326 <GPIO_PeriClockControl+0xfe>
		else if(pGPIOx == GPIOD)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a2c      	ldr	r2, [pc, #176]	; (800033c <GPIO_PeriClockControl+0x114>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d107      	bne.n	80002a0 <GPIO_PeriClockControl+0x78>
			GPIOD_PCLK_EN();
 8000290:	4b27      	ldr	r3, [pc, #156]	; (8000330 <GPIO_PeriClockControl+0x108>)
 8000292:	695a      	ldr	r2, [r3, #20]
 8000294:	4b26      	ldr	r3, [pc, #152]	; (8000330 <GPIO_PeriClockControl+0x108>)
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	0349      	lsls	r1, r1, #13
 800029a:	430a      	orrs	r2, r1
 800029c:	615a      	str	r2, [r3, #20]
}
 800029e:	e042      	b.n	8000326 <GPIO_PeriClockControl+0xfe>
		else if(pGPIOx == GPIOF)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a27      	ldr	r2, [pc, #156]	; (8000340 <GPIO_PeriClockControl+0x118>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d13e      	bne.n	8000326 <GPIO_PeriClockControl+0xfe>
			GPIOF_PCLK_EN();
 80002a8:	4b21      	ldr	r3, [pc, #132]	; (8000330 <GPIO_PeriClockControl+0x108>)
 80002aa:	695a      	ldr	r2, [r3, #20]
 80002ac:	4b20      	ldr	r3, [pc, #128]	; (8000330 <GPIO_PeriClockControl+0x108>)
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	03c9      	lsls	r1, r1, #15
 80002b2:	430a      	orrs	r2, r1
 80002b4:	615a      	str	r2, [r3, #20]
}
 80002b6:	e036      	b.n	8000326 <GPIO_PeriClockControl+0xfe>
		if(pGPIOx == GPIOA)
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	2390      	movs	r3, #144	; 0x90
 80002bc:	05db      	lsls	r3, r3, #23
 80002be:	429a      	cmp	r2, r3
 80002c0:	d106      	bne.n	80002d0 <GPIO_PeriClockControl+0xa8>
			GPIOA_PCLK_DI();
 80002c2:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <GPIO_PeriClockControl+0x108>)
 80002c4:	695a      	ldr	r2, [r3, #20]
 80002c6:	4b1a      	ldr	r3, [pc, #104]	; (8000330 <GPIO_PeriClockControl+0x108>)
 80002c8:	491e      	ldr	r1, [pc, #120]	; (8000344 <GPIO_PeriClockControl+0x11c>)
 80002ca:	400a      	ands	r2, r1
 80002cc:	615a      	str	r2, [r3, #20]
}
 80002ce:	e02a      	b.n	8000326 <GPIO_PeriClockControl+0xfe>
		else if(pGPIOx == GPIOB)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a18      	ldr	r2, [pc, #96]	; (8000334 <GPIO_PeriClockControl+0x10c>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0xbe>
			GPIOB_PCLK_DI();
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <GPIO_PeriClockControl+0x108>)
 80002da:	695a      	ldr	r2, [r3, #20]
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <GPIO_PeriClockControl+0x108>)
 80002de:	491a      	ldr	r1, [pc, #104]	; (8000348 <GPIO_PeriClockControl+0x120>)
 80002e0:	400a      	ands	r2, r1
 80002e2:	615a      	str	r2, [r3, #20]
}
 80002e4:	e01f      	b.n	8000326 <GPIO_PeriClockControl+0xfe>
		else if(pGPIOx == GPIOC)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a13      	ldr	r2, [pc, #76]	; (8000338 <GPIO_PeriClockControl+0x110>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_PeriClockControl+0xd4>
			GPIOC_PCLK_DI();
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <GPIO_PeriClockControl+0x108>)
 80002f0:	695a      	ldr	r2, [r3, #20]
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <GPIO_PeriClockControl+0x108>)
 80002f4:	4915      	ldr	r1, [pc, #84]	; (800034c <GPIO_PeriClockControl+0x124>)
 80002f6:	400a      	ands	r2, r1
 80002f8:	615a      	str	r2, [r3, #20]
}
 80002fa:	e014      	b.n	8000326 <GPIO_PeriClockControl+0xfe>
		else if(pGPIOx == GPIOD)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a0f      	ldr	r2, [pc, #60]	; (800033c <GPIO_PeriClockControl+0x114>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0xea>
			GPIOD_PCLK_DI();
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <GPIO_PeriClockControl+0x108>)
 8000306:	695a      	ldr	r2, [r3, #20]
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <GPIO_PeriClockControl+0x108>)
 800030a:	4911      	ldr	r1, [pc, #68]	; (8000350 <GPIO_PeriClockControl+0x128>)
 800030c:	400a      	ands	r2, r1
 800030e:	615a      	str	r2, [r3, #20]
}
 8000310:	e009      	b.n	8000326 <GPIO_PeriClockControl+0xfe>
		else if(pGPIOx == GPIOF)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <GPIO_PeriClockControl+0x118>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d105      	bne.n	8000326 <GPIO_PeriClockControl+0xfe>
			GPIOF_PCLK_DI();
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <GPIO_PeriClockControl+0x108>)
 800031c:	695a      	ldr	r2, [r3, #20]
 800031e:	4b04      	ldr	r3, [pc, #16]	; (8000330 <GPIO_PeriClockControl+0x108>)
 8000320:	490c      	ldr	r1, [pc, #48]	; (8000354 <GPIO_PeriClockControl+0x12c>)
 8000322:	400a      	ands	r2, r1
 8000324:	615a      	str	r2, [r3, #20]
}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b002      	add	sp, #8
 800032c:	bd80      	pop	{r7, pc}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	40021000 	.word	0x40021000
 8000334:	48000400 	.word	0x48000400
 8000338:	48000800 	.word	0x48000800
 800033c:	48000c00 	.word	0x48000c00
 8000340:	48001400 	.word	0x48001400
 8000344:	fffdffff 	.word	0xfffdffff
 8000348:	fffbffff 	.word	0xfffbffff
 800034c:	fff7ffff 	.word	0xfff7ffff
 8000350:	ffefffff 	.word	0xffefffff
 8000354:	ffbfffff 	.word	0xffbfffff

08000358 <GPIO_Init>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000358:	b5b0      	push	{r4, r5, r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // Temp register
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]

	//1. Configure the mode of GPIO PIN
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	795b      	ldrb	r3, [r3, #5]
 8000368:	2b03      	cmp	r3, #3
 800036a:	d81f      	bhi.n	80003ac <GPIO_Init+0x54>
	{
		// Non interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	795b      	ldrb	r3, [r3, #5]
 8000370:	001a      	movs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	791b      	ldrb	r3, [r3, #4]
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	409a      	lsls	r2, r3
 800037a:	0013      	movs	r3, r2
 800037c:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> MODER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// Clearing
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	0019      	movs	r1, r3
 800038a:	2303      	movs	r3, #3
 800038c:	408b      	lsls	r3, r1
 800038e:	43db      	mvns	r3, r3
 8000390:	0019      	movs	r1, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	400a      	ands	r2, r1
 8000398:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp;	// Setting
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	6819      	ldr	r1, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	697a      	ldr	r2, [r7, #20]
 80003a6:	430a      	orrs	r2, r1
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	e0a7      	b.n	80004fc <GPIO_Init+0x1a4>
	}
	else
	{
		// this part will code later (interrupt mode)
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	795b      	ldrb	r3, [r3, #5]
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d117      	bne.n	80003e4 <GPIO_Init+0x8c>
		{
			//1. Configure the FTSR
			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80003b4:	4ba6      	ldr	r3, [pc, #664]	; (8000650 <GPIO_Init+0x2f8>)
 80003b6:	68da      	ldr	r2, [r3, #12]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	791b      	ldrb	r3, [r3, #4]
 80003bc:	0019      	movs	r1, r3
 80003be:	2301      	movs	r3, #1
 80003c0:	408b      	lsls	r3, r1
 80003c2:	0019      	movs	r1, r3
 80003c4:	4ba2      	ldr	r3, [pc, #648]	; (8000650 <GPIO_Init+0x2f8>)
 80003c6:	430a      	orrs	r2, r1
 80003c8:	60da      	str	r2, [r3, #12]
			// Clear the corresponding RTSR bit
			EXTI ->RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80003ca:	4ba1      	ldr	r3, [pc, #644]	; (8000650 <GPIO_Init+0x2f8>)
 80003cc:	689a      	ldr	r2, [r3, #8]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	791b      	ldrb	r3, [r3, #4]
 80003d2:	0019      	movs	r1, r3
 80003d4:	2301      	movs	r3, #1
 80003d6:	408b      	lsls	r3, r1
 80003d8:	43db      	mvns	r3, r3
 80003da:	0019      	movs	r1, r3
 80003dc:	4b9c      	ldr	r3, [pc, #624]	; (8000650 <GPIO_Init+0x2f8>)
 80003de:	400a      	ands	r2, r1
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	e035      	b.n	8000450 <GPIO_Init+0xf8>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	795b      	ldrb	r3, [r3, #5]
 80003e8:	2b05      	cmp	r3, #5
 80003ea:	d117      	bne.n	800041c <GPIO_Init+0xc4>
		{
			//1. Configure the RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80003ec:	4b98      	ldr	r3, [pc, #608]	; (8000650 <GPIO_Init+0x2f8>)
 80003ee:	689a      	ldr	r2, [r3, #8]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	791b      	ldrb	r3, [r3, #4]
 80003f4:	0019      	movs	r1, r3
 80003f6:	2301      	movs	r3, #1
 80003f8:	408b      	lsls	r3, r1
 80003fa:	0019      	movs	r1, r3
 80003fc:	4b94      	ldr	r3, [pc, #592]	; (8000650 <GPIO_Init+0x2f8>)
 80003fe:	430a      	orrs	r2, r1
 8000400:	609a      	str	r2, [r3, #8]
			// Clear the corresponding FTSR bit
			EXTI ->FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000402:	4b93      	ldr	r3, [pc, #588]	; (8000650 <GPIO_Init+0x2f8>)
 8000404:	68da      	ldr	r2, [r3, #12]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	791b      	ldrb	r3, [r3, #4]
 800040a:	0019      	movs	r1, r3
 800040c:	2301      	movs	r3, #1
 800040e:	408b      	lsls	r3, r1
 8000410:	43db      	mvns	r3, r3
 8000412:	0019      	movs	r1, r3
 8000414:	4b8e      	ldr	r3, [pc, #568]	; (8000650 <GPIO_Init+0x2f8>)
 8000416:	400a      	ands	r2, r1
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	e019      	b.n	8000450 <GPIO_Init+0xf8>
		}
		else if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	795b      	ldrb	r3, [r3, #5]
 8000420:	2b06      	cmp	r3, #6
 8000422:	d115      	bne.n	8000450 <GPIO_Init+0xf8>
		{
			//1. Configure both FTSR and RTSR
			EXTI ->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000424:	4b8a      	ldr	r3, [pc, #552]	; (8000650 <GPIO_Init+0x2f8>)
 8000426:	689a      	ldr	r2, [r3, #8]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	0019      	movs	r1, r3
 800042e:	2301      	movs	r3, #1
 8000430:	408b      	lsls	r3, r1
 8000432:	0019      	movs	r1, r3
 8000434:	4b86      	ldr	r3, [pc, #536]	; (8000650 <GPIO_Init+0x2f8>)
 8000436:	430a      	orrs	r2, r1
 8000438:	609a      	str	r2, [r3, #8]

			EXTI ->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800043a:	4b85      	ldr	r3, [pc, #532]	; (8000650 <GPIO_Init+0x2f8>)
 800043c:	68da      	ldr	r2, [r3, #12]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	0019      	movs	r1, r3
 8000444:	2301      	movs	r3, #1
 8000446:	408b      	lsls	r3, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4b81      	ldr	r3, [pc, #516]	; (8000650 <GPIO_Init+0x2f8>)
 800044c:	430a      	orrs	r2, r1
 800044e:	60da      	str	r2, [r3, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	791a      	ldrb	r2, [r3, #4]
 8000454:	2313      	movs	r3, #19
 8000456:	18fb      	adds	r3, r7, r3
 8000458:	0892      	lsrs	r2, r2, #2
 800045a:	701a      	strb	r2, [r3, #0]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791a      	ldrb	r2, [r3, #4]
 8000460:	2312      	movs	r3, #18
 8000462:	18fb      	adds	r3, r7, r3
 8000464:	2103      	movs	r1, #3
 8000466:	400a      	ands	r2, r1
 8000468:	701a      	strb	r2, [r3, #0]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle ->pGPIOx);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	2390      	movs	r3, #144	; 0x90
 8000470:	05db      	lsls	r3, r3, #23
 8000472:	429a      	cmp	r2, r3
 8000474:	d01d      	beq.n	80004b2 <GPIO_Init+0x15a>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a76      	ldr	r2, [pc, #472]	; (8000654 <GPIO_Init+0x2fc>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d016      	beq.n	80004ae <GPIO_Init+0x156>
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a74      	ldr	r2, [pc, #464]	; (8000658 <GPIO_Init+0x300>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d00f      	beq.n	80004aa <GPIO_Init+0x152>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a73      	ldr	r2, [pc, #460]	; (800065c <GPIO_Init+0x304>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d008      	beq.n	80004a6 <GPIO_Init+0x14e>
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a71      	ldr	r2, [pc, #452]	; (8000660 <GPIO_Init+0x308>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d101      	bne.n	80004a2 <GPIO_Init+0x14a>
 800049e:	2304      	movs	r3, #4
 80004a0:	e008      	b.n	80004b4 <GPIO_Init+0x15c>
 80004a2:	2300      	movs	r3, #0
 80004a4:	e006      	b.n	80004b4 <GPIO_Init+0x15c>
 80004a6:	2303      	movs	r3, #3
 80004a8:	e004      	b.n	80004b4 <GPIO_Init+0x15c>
 80004aa:	2302      	movs	r3, #2
 80004ac:	e002      	b.n	80004b4 <GPIO_Init+0x15c>
 80004ae:	2301      	movs	r3, #1
 80004b0:	e000      	b.n	80004b4 <GPIO_Init+0x15c>
 80004b2:	2300      	movs	r3, #0
 80004b4:	2011      	movs	r0, #17
 80004b6:	183a      	adds	r2, r7, r0
 80004b8:	7013      	strb	r3, [r2, #0]
		SYSCFG_PCLK_EN();
 80004ba:	4b6a      	ldr	r3, [pc, #424]	; (8000664 <GPIO_Init+0x30c>)
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	4b69      	ldr	r3, [pc, #420]	; (8000664 <GPIO_Init+0x30c>)
 80004c0:	2101      	movs	r1, #1
 80004c2:	430a      	orrs	r2, r1
 80004c4:	619a      	str	r2, [r3, #24]
		SYSGFG -> EXTICR[temp1] = portcode << (temp2 * 4);
 80004c6:	183b      	adds	r3, r7, r0
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	2312      	movs	r3, #18
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	409a      	lsls	r2, r3
 80004d4:	0011      	movs	r1, r2
 80004d6:	4a64      	ldr	r2, [pc, #400]	; (8000668 <GPIO_Init+0x310>)
 80004d8:	2313      	movs	r3, #19
 80004da:	18fb      	adds	r3, r7, r3
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	18d3      	adds	r3, r2, r3
 80004e2:	3304      	adds	r3, #4
 80004e4:	6019      	str	r1, [r3, #0]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80004e6:	4b5a      	ldr	r3, [pc, #360]	; (8000650 <GPIO_Init+0x2f8>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	791b      	ldrb	r3, [r3, #4]
 80004ee:	0019      	movs	r1, r3
 80004f0:	2301      	movs	r3, #1
 80004f2:	408b      	lsls	r3, r1
 80004f4:	0019      	movs	r1, r3
 80004f6:	4b56      	ldr	r3, [pc, #344]	; (8000650 <GPIO_Init+0x2f8>)
 80004f8:	430a      	orrs	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]

	}

	temp = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	001a      	movs	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	409a      	lsls	r2, r3
 800050e:	0013      	movs	r3, r2
 8000510:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);	// clearing
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	689a      	ldr	r2, [r3, #8]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	0019      	movs	r1, r3
 800051e:	2303      	movs	r3, #3
 8000520:	408b      	lsls	r3, r1
 8000522:	43db      	mvns	r3, r3
 8000524:	0019      	movs	r1, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	400a      	ands	r2, r1
 800052c:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp;	// Setting
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	6899      	ldr	r1, [r3, #8]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	430a      	orrs	r2, r1
 800053c:	609a      	str	r2, [r3, #8]

	temp = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
	//3. Configure the Push-pull settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	79db      	ldrb	r3, [r3, #7]
 8000546:	001a      	movs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	791b      	ldrb	r3, [r3, #4]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	409a      	lsls	r2, r3
 8000550:	0013      	movs	r3, r2
 8000552:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	68da      	ldr	r2, [r3, #12]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	0019      	movs	r1, r3
 8000560:	2303      	movs	r3, #3
 8000562:	408b      	lsls	r3, r1
 8000564:	43db      	mvns	r3, r3
 8000566:	0019      	movs	r1, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	400a      	ands	r2, r1
 800056e:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	68d9      	ldr	r1, [r3, #12]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	697a      	ldr	r2, [r7, #20]
 800057c:	430a      	orrs	r2, r1
 800057e:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
	//4. Configure the Output Type
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_OUT){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	795b      	ldrb	r3, [r3, #5]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d11d      	bne.n	80005c8 <GPIO_Init+0x270>
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7a1b      	ldrb	r3, [r3, #8]
 8000590:	001a      	movs	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	409a      	lsls	r2, r3
 8000598:	0013      	movs	r3, r2
 800059a:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x3 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	0019      	movs	r1, r3
 80005a8:	2303      	movs	r3, #3
 80005aa:	408b      	lsls	r3, r1
 80005ac:	43db      	mvns	r3, r3
 80005ae:	0019      	movs	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	400a      	ands	r2, r1
 80005b6:	605a      	str	r2, [r3, #4]
		pGPIOHandle -> pGPIOx -> OTYPER |= temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6859      	ldr	r1, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	697a      	ldr	r2, [r7, #20]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	605a      	str	r2, [r3, #4]
	}
	//5. Configure the Alternate functionality, if required
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d13b      	bne.n	8000648 <GPIO_Init+0x2f0>
	{
		// Configure the alternate function here
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791a      	ldrb	r2, [r3, #4]
 80005d4:	2410      	movs	r4, #16
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	08d2      	lsrs	r2, r2, #3
 80005da:	701a      	strb	r2, [r3, #0]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 8;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791a      	ldrb	r2, [r3, #4]
 80005e0:	250f      	movs	r5, #15
 80005e2:	197b      	adds	r3, r7, r5
 80005e4:	2107      	movs	r1, #7
 80005e6:	400a      	ands	r2, r1
 80005e8:	701a      	strb	r2, [r3, #0]

		pGPIOHandle -> pGPIOx -> AFR[temp1] &= ~(0xF << (4 * temp2));
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	193a      	adds	r2, r7, r4
 80005f0:	7812      	ldrb	r2, [r2, #0]
 80005f2:	3208      	adds	r2, #8
 80005f4:	0092      	lsls	r2, r2, #2
 80005f6:	58d1      	ldr	r1, [r2, r3]
 80005f8:	197b      	adds	r3, r7, r5
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	220f      	movs	r2, #15
 8000600:	409a      	lsls	r2, r3
 8000602:	0013      	movs	r3, r2
 8000604:	43db      	mvns	r3, r3
 8000606:	0018      	movs	r0, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	193a      	adds	r2, r7, r4
 800060e:	7812      	ldrb	r2, [r2, #0]
 8000610:	4001      	ands	r1, r0
 8000612:	3208      	adds	r2, #8
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	50d1      	str	r1, [r2, r3]
		pGPIOHandle -> pGPIOx -> AFR[temp1] |= pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	193a      	adds	r2, r7, r4
 800061e:	7812      	ldrb	r2, [r2, #0]
 8000620:	3208      	adds	r2, #8
 8000622:	0092      	lsls	r2, r2, #2
 8000624:	58d1      	ldr	r1, [r2, r3]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7a5b      	ldrb	r3, [r3, #9]
 800062a:	001a      	movs	r2, r3
 800062c:	197b      	adds	r3, r7, r5
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	409a      	lsls	r2, r3
 8000634:	0013      	movs	r3, r2
 8000636:	0018      	movs	r0, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	193a      	adds	r2, r7, r4
 800063e:	7812      	ldrb	r2, [r2, #0]
 8000640:	4301      	orrs	r1, r0
 8000642:	3208      	adds	r2, #8
 8000644:	0092      	lsls	r2, r2, #2
 8000646:	50d1      	str	r1, [r2, r3]

	}
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b006      	add	sp, #24
 800064e:	bdb0      	pop	{r4, r5, r7, pc}
 8000650:	40010400 	.word	0x40010400
 8000654:	48000400 	.word	0x48000400
 8000658:	48000800 	.word	0x48000800
 800065c:	48000c00 	.word	0x48000c00
 8000660:	48001400 	.word	0x48001400
 8000664:	40021000 	.word	0x40021000
 8000668:	40010000 	.word	0x40010000

0800066c <GPIO_WriteToOutputPin>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	0008      	movs	r0, r1
 8000676:	0011      	movs	r1, r2
 8000678:	1cfb      	adds	r3, r7, #3
 800067a:	1c02      	adds	r2, r0, #0
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	1cbb      	adds	r3, r7, #2
 8000680:	1c0a      	adds	r2, r1, #0
 8000682:	701a      	strb	r2, [r3, #0]

	if(Value == GPIO_PIN_SET)
 8000684:	1cbb      	adds	r3, r7, #2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d10a      	bne.n	80006a2 <GPIO_WriteToOutputPin+0x36>
	{
		// Write 1 to the output data register at the bit field corresponding to the pin number
		pGPIOx -> ODR |= (1 << PinNumber);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	1cfa      	adds	r2, r7, #3
 8000692:	7812      	ldrb	r2, [r2, #0]
 8000694:	2101      	movs	r1, #1
 8000696:	4091      	lsls	r1, r2
 8000698:	000a      	movs	r2, r1
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	615a      	str	r2, [r3, #20]
	else
	{
		// Write 0 to the output data register at the bit field corresponding to the pin number
		pGPIOx -> ODR &= ~(1 << PinNumber);
	}
}
 80006a0:	e00a      	b.n	80006b8 <GPIO_WriteToOutputPin+0x4c>
		pGPIOx -> ODR &= ~(1 << PinNumber);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	1cfa      	adds	r2, r7, #3
 80006a8:	7812      	ldrb	r2, [r2, #0]
 80006aa:	2101      	movs	r1, #1
 80006ac:	4091      	lsls	r1, r2
 80006ae:	000a      	movs	r2, r1
 80006b0:	43d2      	mvns	r2, r2
 80006b2:	401a      	ands	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	615a      	str	r2, [r3, #20]
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b002      	add	sp, #8
 80006be:	bd80      	pop	{r7, pc}

080006c0 <GPIO_ToggleOutputPin>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	000a      	movs	r2, r1
 80006ca:	1cfb      	adds	r3, r7, #3
 80006cc:	701a      	strb	r2, [r3, #0]
	pGPIOx -> ODR ^= (1 << PinNumber);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	1cfa      	adds	r2, r7, #3
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	2101      	movs	r1, #1
 80006d8:	4091      	lsls	r1, r2
 80006da:	000a      	movs	r2, r1
 80006dc:	405a      	eors	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	615a      	str	r2, [r3, #20]
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <GPIO_IRQInterruptConfig>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	0002      	movs	r2, r0
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	701a      	strb	r2, [r3, #0]
 80006f8:	1dbb      	adds	r3, r7, #6
 80006fa:	1c0a      	adds	r2, r1, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	if(EnorDi == ENABLE){
 80006fe:	1dbb      	adds	r3, r7, #6
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d10f      	bne.n	8000726 <GPIO_IRQInterruptConfig+0x3a>
		if(IRQNumber <= 31)
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b1f      	cmp	r3, #31
 800070c:	d81a      	bhi.n	8000744 <GPIO_IRQInterruptConfig+0x58>
		{
			// Program ISER Register (bewteen 0 - 31)
			*NVIC_ISER |= (1 << IRQNumber);
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <GPIO_IRQInterruptConfig+0x60>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2101      	movs	r1, #1
 8000718:	4099      	lsls	r1, r3
 800071a:	000b      	movs	r3, r1
 800071c:	0019      	movs	r1, r3
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <GPIO_IRQInterruptConfig+0x60>)
 8000720:	430a      	orrs	r2, r1
 8000722:	601a      	str	r2, [r3, #0]
			// Program ISER2 Register (bewteen 64 - 95)
			 * NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
*******************************************FOR CORTEX M4 PROCESSOR NVIC REGISTER**********************************/
	}
}
 8000724:	e00e      	b.n	8000744 <GPIO_IRQInterruptConfig+0x58>
		if(IRQNumber <= 31)
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b1f      	cmp	r3, #31
 800072c:	d80a      	bhi.n	8000744 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ICER |= (1 << IRQNumber);
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <GPIO_IRQInterruptConfig+0x64>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2101      	movs	r1, #1
 8000738:	4099      	lsls	r1, r3
 800073a:	000b      	movs	r3, r1
 800073c:	0019      	movs	r1, r3
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <GPIO_IRQInterruptConfig+0x64>)
 8000740:	430a      	orrs	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b002      	add	sp, #8
 800074a:	bd80      	pop	{r7, pc}
 800074c:	e000e100 	.word	0xe000e100
 8000750:	e000e180 	.word	0xe000e180

08000754 <GPIO_IRQPriorityConfig>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	0002      	movs	r2, r0
 800075c:	6039      	str	r1, [r7, #0]
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	701a      	strb	r2, [r3, #0]
	//1. First lets findout the IPR Register
	uint8_t iprx = IRQNumber / 4;
 8000762:	200f      	movs	r0, #15
 8000764:	183b      	adds	r3, r7, r0
 8000766:	1dfa      	adds	r2, r7, #7
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	0892      	lsrs	r2, r2, #2
 800076c:	701a      	strb	r2, [r3, #0]
	uint8_t iprx_section = IRQNumber % 4;
 800076e:	240e      	movs	r4, #14
 8000770:	193b      	adds	r3, r7, r4
 8000772:	1dfa      	adds	r2, r7, #7
 8000774:	7812      	ldrb	r2, [r2, #0]
 8000776:	2103      	movs	r1, #3
 8000778:	400a      	ands	r2, r1
 800077a:	701a      	strb	r2, [r3, #0]

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 800077c:	193b      	adds	r3, r7, r4
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	b2da      	uxtb	r2, r3
 8000784:	240d      	movs	r4, #13
 8000786:	193b      	adds	r3, r7, r4
 8000788:	3204      	adds	r2, #4
 800078a:	701a      	strb	r2, [r3, #0]
	*(NVIC_PR_BASEADDR + iprx) |= (IRQPriority << shift_amount);
 800078c:	183b      	adds	r3, r7, r0
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <GPIO_IRQPriorityConfig+0x68>)
 8000794:	4694      	mov	ip, r2
 8000796:	4463      	add	r3, ip
 8000798:	6819      	ldr	r1, [r3, #0]
 800079a:	193b      	adds	r3, r7, r4
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	409a      	lsls	r2, r3
 80007a2:	183b      	adds	r3, r7, r0
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <GPIO_IRQPriorityConfig+0x68>)
 80007aa:	4684      	mov	ip, r0
 80007ac:	4463      	add	r3, ip
 80007ae:	430a      	orrs	r2, r1
 80007b0:	601a      	str	r2, [r3, #0]
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b005      	add	sp, #20
 80007b8:	bd90      	pop	{r4, r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	e000e400 	.word	0xe000e400

080007c0 <GPIO_IRQHandling>:
 * @return								- None
 *
 * @note								- None
 *****************************************************************************************************************/
void GPIO_IRQHandling(uint8_t PinNumber)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	0002      	movs	r2, r0
 80007c8:	1dfb      	adds	r3, r7, #7
 80007ca:	701a      	strb	r2, [r3, #0]
	// Clear the EXTI PR register
	if(EXTI -> PR & (1 << PinNumber))
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <GPIO_IRQHandling+0x3c>)
 80007ce:	695b      	ldr	r3, [r3, #20]
 80007d0:	1dfa      	adds	r2, r7, #7
 80007d2:	7812      	ldrb	r2, [r2, #0]
 80007d4:	2101      	movs	r1, #1
 80007d6:	4091      	lsls	r1, r2
 80007d8:	000a      	movs	r2, r1
 80007da:	4013      	ands	r3, r2
 80007dc:	d00a      	beq.n	80007f4 <GPIO_IRQHandling+0x34>
	{
		EXTI -> PR |= (1 << PinNumber);
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <GPIO_IRQHandling+0x3c>)
 80007e0:	695a      	ldr	r2, [r3, #20]
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2101      	movs	r1, #1
 80007e8:	4099      	lsls	r1, r3
 80007ea:	000b      	movs	r3, r1
 80007ec:	0019      	movs	r1, r3
 80007ee:	4b03      	ldr	r3, [pc, #12]	; (80007fc <GPIO_IRQHandling+0x3c>)
 80007f0:	430a      	orrs	r2, r1
 80007f2:	615a      	str	r2, [r3, #20]
	}
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b002      	add	sp, #8
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40010400 	.word	0x40010400

08000800 <memset>:
 8000800:	0003      	movs	r3, r0
 8000802:	1882      	adds	r2, r0, r2
 8000804:	4293      	cmp	r3, r2
 8000806:	d100      	bne.n	800080a <memset+0xa>
 8000808:	4770      	bx	lr
 800080a:	7019      	strb	r1, [r3, #0]
 800080c:	3301      	adds	r3, #1
 800080e:	e7f9      	b.n	8000804 <memset+0x4>

08000810 <__libc_init_array>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	2600      	movs	r6, #0
 8000814:	4c0c      	ldr	r4, [pc, #48]	; (8000848 <__libc_init_array+0x38>)
 8000816:	4d0d      	ldr	r5, [pc, #52]	; (800084c <__libc_init_array+0x3c>)
 8000818:	1b64      	subs	r4, r4, r5
 800081a:	10a4      	asrs	r4, r4, #2
 800081c:	42a6      	cmp	r6, r4
 800081e:	d109      	bne.n	8000834 <__libc_init_array+0x24>
 8000820:	2600      	movs	r6, #0
 8000822:	f000 f819 	bl	8000858 <_init>
 8000826:	4c0a      	ldr	r4, [pc, #40]	; (8000850 <__libc_init_array+0x40>)
 8000828:	4d0a      	ldr	r5, [pc, #40]	; (8000854 <__libc_init_array+0x44>)
 800082a:	1b64      	subs	r4, r4, r5
 800082c:	10a4      	asrs	r4, r4, #2
 800082e:	42a6      	cmp	r6, r4
 8000830:	d105      	bne.n	800083e <__libc_init_array+0x2e>
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	00b3      	lsls	r3, r6, #2
 8000836:	58eb      	ldr	r3, [r5, r3]
 8000838:	4798      	blx	r3
 800083a:	3601      	adds	r6, #1
 800083c:	e7ee      	b.n	800081c <__libc_init_array+0xc>
 800083e:	00b3      	lsls	r3, r6, #2
 8000840:	58eb      	ldr	r3, [r5, r3]
 8000842:	4798      	blx	r3
 8000844:	3601      	adds	r6, #1
 8000846:	e7f2      	b.n	800082e <__libc_init_array+0x1e>
 8000848:	08000870 	.word	0x08000870
 800084c:	08000870 	.word	0x08000870
 8000850:	08000874 	.word	0x08000874
 8000854:	08000870 	.word	0x08000870

08000858 <_init>:
 8000858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800085e:	bc08      	pop	{r3}
 8000860:	469e      	mov	lr, r3
 8000862:	4770      	bx	lr

08000864 <_fini>:
 8000864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800086a:	bc08      	pop	{r3}
 800086c:	469e      	mov	lr, r3
 800086e:	4770      	bx	lr
