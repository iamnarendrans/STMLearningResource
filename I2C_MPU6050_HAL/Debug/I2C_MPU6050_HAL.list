
I2C_MPU6050_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a864  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800aa38  0800aa38  0001aa38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae04  0800ae04  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae04  0800ae04  0001ae04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae0c  0800ae0c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae0c  0800ae0c  0001ae0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae10  0800ae10  0001ae10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800ae14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a34  200001d8  0800afe8  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000c0c  0800afe8  00020c0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155d2  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003431  00000000  00000000  00035819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00038c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d31  00000000  00000000  00039d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025100  00000000  00000000  0003aaa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ae9  00000000  00000000  0005fba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1449  00000000  00000000  00077692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005944  00000000  00000000  00148adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0014e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aa1c 	.word	0x0800aa1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800aa1c 	.word	0x0800aa1c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fa0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fa4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00b      	beq.n	8000fc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fac:	e000      	b.n	8000fb0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f9      	beq.n	8000fae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e009      	b.n	8000ff8 <_write+0x26>
  {
    ITM_SendChar((*ptr++));
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ffc9 	bl	8000f84 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf1      	blt.n	8000fe4 <_write+0x12>
  }
  return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001010:	b0a4      	sub	sp, #144	; 0x90
 8001012:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f000 fc50 	bl	80018b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f882 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 f946 	bl	80012ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001020:	f000 f91a 	bl	8001258 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001024:	f000 f8ea 	bl	80011fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef ret =  HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_I2C_ADDR, 1, 100);
 8001028:	2364      	movs	r3, #100	; 0x64
 800102a:	2201      	movs	r2, #1
 800102c:	21d0      	movs	r1, #208	; 0xd0
 800102e:	4834      	ldr	r0, [pc, #208]	; (8001100 <main+0xf4>)
 8001030:	f001 fbdc 	bl	80027ec <HAL_I2C_IsDeviceReady>
 8001034:	4603      	mov	r3, r0
 8001036:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  if(ret == HAL_OK)
 800103a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800103e:	2b00      	cmp	r3, #0
 8001040:	d103      	bne.n	800104a <main+0x3e>
  {
	  printf("The device is ready\n");
 8001042:	4830      	ldr	r0, [pc, #192]	; (8001104 <main+0xf8>)
 8001044:	f007 fb88 	bl	8008758 <puts>
 8001048:	e002      	b.n	8001050 <main+0x44>
  }else
  {
	  printf("The device is not ready\n");
 800104a:	482f      	ldr	r0, [pc, #188]	; (8001108 <main+0xfc>)
 800104c:	f007 fb84 	bl	8008758 <puts>
  }
  while (MPU6050_Init(&hi2c1) == 1);
 8001050:	bf00      	nop
 8001052:	482b      	ldr	r0, [pc, #172]	; (8001100 <main+0xf4>)
 8001054:	f000 f99d 	bl	8001392 <MPU6050_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b01      	cmp	r3, #1
 800105c:	d0f9      	beq.n	8001052 <main+0x46>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MPU6050_Read_Accel(&hi2c1, &MPU6050);
 800105e:	492b      	ldr	r1, [pc, #172]	; (800110c <main+0x100>)
 8001060:	4827      	ldr	r0, [pc, #156]	; (8001100 <main+0xf4>)
 8001062:	f000 f9ed 	bl	8001440 <MPU6050_Read_Accel>
	  floatAx = (float)MPU6050.Ax;
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <main+0x100>)
 8001068:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fdba 	bl	8000be8 <__aeabi_d2f>
 8001074:	4603      	mov	r3, r0
 8001076:	4a26      	ldr	r2, [pc, #152]	; (8001110 <main+0x104>)
 8001078:	6013      	str	r3, [r2, #0]
	  floatAy = (float)MPU6050.Ay;
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <main+0x100>)
 800107c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fdb0 	bl	8000be8 <__aeabi_d2f>
 8001088:	4603      	mov	r3, r0
 800108a:	4a22      	ldr	r2, [pc, #136]	; (8001114 <main+0x108>)
 800108c:	6013      	str	r3, [r2, #0]
	  floatAz = (float)MPU6050.Az;
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <main+0x100>)
 8001090:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fda6 	bl	8000be8 <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <main+0x10c>)
 80010a0:	6013      	str	r3, [r2, #0]
	  char logbuf[120];
	  sprintf(logbuf, "%.4f, %.4f, %.4f\r\n", floatAx, floatAy, floatAz);
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <main+0x104>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa6e 	bl	8000588 <__aeabi_f2d>
 80010ac:	4680      	mov	r8, r0
 80010ae:	4689      	mov	r9, r1
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <main+0x108>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa67 	bl	8000588 <__aeabi_f2d>
 80010ba:	4604      	mov	r4, r0
 80010bc:	460d      	mov	r5, r1
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <main+0x10c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa60 	bl	8000588 <__aeabi_f2d>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	1d38      	adds	r0, r7, #4
 80010ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80010d2:	e9cd 4500 	strd	r4, r5, [sp]
 80010d6:	4642      	mov	r2, r8
 80010d8:	464b      	mov	r3, r9
 80010da:	4910      	ldr	r1, [pc, #64]	; (800111c <main+0x110>)
 80010dc:	f007 fb44 	bl	8008768 <siprintf>
	  CDC_Transmit_FS((uint8_t*)logbuf, strlen(logbuf));
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f8e4 	bl	80002b0 <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f006 fb31 	bl	8007758 <CDC_Transmit_FS>
	  HAL_Delay (1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f000 fc50 	bl	800199c <HAL_Delay>
  {
 80010fc:	e7af      	b.n	800105e <main+0x52>
 80010fe:	bf00      	nop
 8001100:	200001f4 	.word	0x200001f4
 8001104:	0800aa38 	.word	0x0800aa38
 8001108:	0800aa4c 	.word	0x0800aa4c
 800110c:	20000290 	.word	0x20000290
 8001110:	200002e8 	.word	0x200002e8
 8001114:	200002ec 	.word	0x200002ec
 8001118:	200002f0 	.word	0x200002f0
 800111c:	0800aa64 	.word	0x0800aa64

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b094      	sub	sp, #80	; 0x50
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2234      	movs	r2, #52	; 0x34
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f007 fc12 	bl	8008958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <SystemClock_Config+0xd4>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	4a29      	ldr	r2, [pc, #164]	; (80011f4 <SystemClock_Config+0xd4>)
 800114e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001152:	6413      	str	r3, [r2, #64]	; 0x40
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <SystemClock_Config+0xd4>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001160:	2300      	movs	r3, #0
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <SystemClock_Config+0xd8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800116c:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <SystemClock_Config+0xd8>)
 800116e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <SystemClock_Config+0xd8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001180:	2302      	movs	r3, #2
 8001182:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001184:	2301      	movs	r3, #1
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001188:	2310      	movs	r3, #16
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001190:	2300      	movs	r3, #0
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001194:	2310      	movs	r3, #16
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001198:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800119c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800119e:	2304      	movs	r3, #4
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fbbc 	bl	800492c <HAL_RCC_OscConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011ba:	f000 f8e5 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011be:	230f      	movs	r3, #15
 80011c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c2:	2302      	movs	r3, #2
 80011c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	2102      	movs	r1, #2
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 f85c 	bl	8004298 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011e6:	f000 f8cf 	bl	8001388 <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3750      	adds	r7, #80	; 0x50
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_I2C1_Init+0x50>)
 8001202:	4a13      	ldr	r2, [pc, #76]	; (8001250 <MX_I2C1_Init+0x54>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_I2C1_Init+0x50>)
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <MX_I2C1_Init+0x58>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_I2C1_Init+0x50>)
 800121a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_I2C1_Init+0x50>)
 800123a:	f000 fe67 	bl	8001f0c <HAL_I2C_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001244:	f000 f8a0 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200001f4 	.word	0x200001f4
 8001250:	40005400 	.word	0x40005400
 8001254:	000186a0 	.word	0x000186a0

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_USART2_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001290:	f003 fdea 	bl	8004e68 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 f875 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000248 	.word	0x20000248
 80012a8:	40004400 	.word	0x40004400

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <MX_GPIO_Init+0xd0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a2c      	ldr	r2, [pc, #176]	; (800137c <MX_GPIO_Init+0xd0>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <MX_GPIO_Init+0xd0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <MX_GPIO_Init+0xd0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a25      	ldr	r2, [pc, #148]	; (800137c <MX_GPIO_Init+0xd0>)
 80012e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <MX_GPIO_Init+0xd0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <MX_GPIO_Init+0xd0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a1e      	ldr	r2, [pc, #120]	; (800137c <MX_GPIO_Init+0xd0>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <MX_GPIO_Init+0xd0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <MX_GPIO_Init+0xd0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <MX_GPIO_Init+0xd0>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <MX_GPIO_Init+0xd0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2120      	movs	r1, #32
 8001336:	4812      	ldr	r0, [pc, #72]	; (8001380 <MX_GPIO_Init+0xd4>)
 8001338:	f000 fdce 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800133c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001342:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	480c      	ldr	r0, [pc, #48]	; (8001384 <MX_GPIO_Init+0xd8>)
 8001354:	f000 fc2c 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001358:	2320      	movs	r3, #32
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_GPIO_Init+0xd4>)
 8001370:	f000 fc1e 	bl	8001bb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	; 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020800 	.word	0x40020800

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	e7fe      	b.n	8001390 <Error_Handler+0x8>

08001392 <MPU6050_Init>:

const double Accel_Z_corrector = 14418.0;


uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b088      	sub	sp, #32
 8001396:	af04      	add	r7, sp, #16
 8001398:	6078      	str	r0, [r7, #4]
	uint8_t checkAddr;
	// uint8_t data;

	// Check device ID WHO_AM_I
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &checkAddr, 1, i2c_timeout);
 800139a:	2364      	movs	r3, #100	; 0x64
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	f107 030f 	add.w	r3, r7, #15
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	2275      	movs	r2, #117	; 0x75
 80013ac:	21d0      	movs	r1, #208	; 0xd0
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 ffea 	bl	8002388 <HAL_I2C_Mem_Read>

	// 0x68 will be returned by the sensor if everything goes well
	if(checkAddr == MPU6050_SENSOR_ADDR)
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b68      	cmp	r3, #104	; 0x68
 80013b8:	d13d      	bne.n	8001436 <MPU6050_Init+0xa4>
	{
		// Power Management register 0x6B we should write  all 0's to wake up the sensor
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &((uint8_t){PWR_MGMR_SENSOR_WP}), 1, i2c_timeout);
 80013ba:	2300      	movs	r3, #0
 80013bc:	73bb      	strb	r3, [r7, #14]
 80013be:	2364      	movs	r3, #100	; 0x64
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	f107 030e 	add.w	r3, r7, #14
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	226b      	movs	r2, #107	; 0x6b
 80013d0:	21d0      	movs	r1, #208	; 0xd0
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fede 	bl	8002194 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV Register
		// Sample rate = (Gyroscope output rate)/(1 +SPLRT_DIV)
		// If I want 1KHz, then SPLRT_DIV should be 7 with Gyro output of 8KHz
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &((uint8_t){DATA_RATE_1KHZ}), 1, i2c_timeout);
 80013d8:	2307      	movs	r3, #7
 80013da:	737b      	strb	r3, [r7, #13]
 80013dc:	2364      	movs	r3, #100	; 0x64
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	2301      	movs	r3, #1
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	f107 030d 	add.w	r3, r7, #13
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	2219      	movs	r2, #25
 80013ee:	21d0      	movs	r1, #208	; 0xd0
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 fecf 	bl	8002194 <HAL_I2C_Mem_Write>

		// Set Accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST = 0; YA_ST = 0; ZA_ST = 0; FS_SET -> 2g
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CFG_REG, 1, &((uint8_t){ACCEL_FSR_2G}), 1, i2c_timeout);
 80013f6:	2300      	movs	r3, #0
 80013f8:	733b      	strb	r3, [r7, #12]
 80013fa:	2364      	movs	r3, #100	; 0x64
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	2301      	movs	r3, #1
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	221c      	movs	r2, #28
 800140c:	21d0      	movs	r1, #208	; 0xd0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fec0 	bl	8002194 <HAL_I2C_Mem_Write>

		// Set Gyroscope configuration in Gyro Register
		// XG_ST = 0; YG_ST = 0; ZG_ST = 0; FS_SET -> 250°
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CFG_REG, 1, &((uint8_t){GYRO_FSR_250D}), 1, i2c_timeout);
 8001414:	2300      	movs	r3, #0
 8001416:	72fb      	strb	r3, [r7, #11]
 8001418:	2364      	movs	r3, #100	; 0x64
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2301      	movs	r3, #1
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	f107 030b 	add.w	r3, r7, #11
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	221c      	movs	r2, #28
 800142a:	21d0      	movs	r1, #208	; 0xd0
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 feb1 	bl	8002194 <HAL_I2C_Mem_Write>

		return 0;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <MPU6050_Init+0xa6>
	}

	return 1;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af04      	add	r7, sp, #16
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 800144a:	2364      	movs	r3, #100	; 0x64
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	2306      	movs	r3, #6
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2301      	movs	r3, #1
 800145a:	223b      	movs	r2, #59	; 0x3b
 800145c:	21d0      	movs	r1, #208	; 0xd0
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 ff92 	bl	8002388 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001464:	7a3b      	ldrb	r3, [r7, #8]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b21a      	sxth	r2, r3
 800146a:	7a7b      	ldrb	r3, [r7, #9]
 800146c:	b21b      	sxth	r3, r3
 800146e:	4313      	orrs	r3, r2
 8001470:	b21b      	sxth	r3, r3
 8001472:	b29a      	uxth	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001478:	7abb      	ldrb	r3, [r7, #10]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21a      	sxth	r2, r3
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21b      	sxth	r3, r3
 8001486:	b29a      	uxth	r2, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800148c:	7b3b      	ldrb	r3, [r7, #12]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	b21b      	sxth	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b21b      	sxth	r3, r3
 800149a:	b29a      	uxth	r2, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / Accel_Corrector_2g;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f85d 	bl	8000564 <__aeabi_i2d>
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MPU6050_Read_Accel+0xd0>)
 80014b0:	f7ff f9ec 	bl	800088c <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	6839      	ldr	r1, [r7, #0]
 80014ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / Accel_Corrector_2g;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	885b      	ldrh	r3, [r3, #2]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f84e 	bl	8000564 <__aeabi_i2d>
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MPU6050_Read_Accel+0xd0>)
 80014ce:	f7ff f9dd 	bl	800088c <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	889b      	ldrh	r3, [r3, #4]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f83f 	bl	8000564 <__aeabi_i2d>
 80014e6:	a308      	add	r3, pc, #32	; (adr r3, 8001508 <MPU6050_Read_Accel+0xc8>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7ff f9ce 	bl	800088c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	6839      	ldr	r1, [r7, #0]
 80014f6:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	f3af 8000 	nop.w
 8001508:	00000000 	.word	0x00000000
 800150c:	40cc2900 	.word	0x40cc2900
 8001510:	40d00000 	.word	0x40d00000

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <HAL_MspInit+0x4c>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <HAL_MspInit+0x4c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_MspInit+0x4c>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_MspInit+0x4c>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001552:	2007      	movs	r0, #7
 8001554:	f000 faf8 	bl	8001b48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800

08001564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_I2C_MspInit+0x84>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d12b      	bne.n	80015de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_I2C_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_I2C_MspInit+0x88>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_I2C_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015a2:	23c0      	movs	r3, #192	; 0xc0
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a6:	2312      	movs	r3, #18
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b2:	2304      	movs	r3, #4
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <HAL_I2C_MspInit+0x8c>)
 80015be:	f000 faf7 	bl	8001bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_I2C_MspInit+0x88>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <HAL_I2C_MspInit+0x88>)
 80015cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_I2C_MspInit+0x88>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40005400 	.word	0x40005400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020400 	.word	0x40020400

080015f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_UART_MspInit+0x84>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d12b      	bne.n	800166e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_UART_MspInit+0x88>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <HAL_UART_MspInit+0x88>)
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_UART_MspInit+0x88>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_UART_MspInit+0x88>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a10      	ldr	r2, [pc, #64]	; (800167c <HAL_UART_MspInit+0x88>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_UART_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800164e:	230c      	movs	r3, #12
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800165e:	2307      	movs	r3, #7
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_UART_MspInit+0x8c>)
 800166a:	f000 faa1 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40004400 	.word	0x40004400
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d0:	f000 f944 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <OTG_FS_IRQHandler+0x10>)
 80016de:	f001 fd67 	bl	80031b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200005dc 	.word	0x200005dc

080016ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return 1;
 80016f0:	2301      	movs	r3, #1
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_kill>:

int _kill(int pid, int sig)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001706:	f007 f979 	bl	80089fc <__errno>
 800170a:	4603      	mov	r3, r0
 800170c:	2216      	movs	r2, #22
 800170e:	601a      	str	r2, [r3, #0]
  return -1;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_exit>:

void _exit (int status)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ffe7 	bl	80016fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800172e:	e7fe      	b.n	800172e <_exit+0x12>

08001730 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e00a      	b.n	8001758 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001742:	f3af 8000 	nop.w
 8001746:	4601      	mov	r1, r0
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf0      	blt.n	8001742 <_read+0x12>
  }

  return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_close>:
  }
  return len;
}

int _close(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001792:	605a      	str	r2, [r3, #4]
  return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_isatty>:

int _isatty(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f007 f8fa 	bl	80089fc <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20020000 	.word	0x20020000
 8001834:	00000400 	.word	0x00000400
 8001838:	200002f4 	.word	0x200002f4
 800183c:	20000c10 	.word	0x20000c10

08001840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <SystemInit+0x20>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <SystemInit+0x20>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800189c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001868:	f7ff ffea 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800186e:	490d      	ldr	r1, [pc, #52]	; (80018a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001874:	e002      	b.n	800187c <LoopCopyDataInit>

08001876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187a:	3304      	adds	r3, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800187c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001880:	d3f9      	bcc.n	8001876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001884:	4c0a      	ldr	r4, [pc, #40]	; (80018b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001888:	e001      	b.n	800188e <LoopFillZerobss>

0800188a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188c:	3204      	adds	r2, #4

0800188e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001890:	d3fb      	bcc.n	800188a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001892:	f007 f8b9 	bl	8008a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001896:	f7ff fbb9 	bl	800100c <main>
  bx  lr    
 800189a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800189c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018a8:	0800ae14 	.word	0x0800ae14
  ldr r2, =_sbss
 80018ac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80018b0:	20000c0c 	.word	0x20000c0c

080018b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_Init+0x40>)
 80018c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_Init+0x40>)
 80018ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_Init+0x40>)
 80018da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f000 f931 	bl	8001b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f808 	bl	80018fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ec:	f7ff fe12 	bl	8001514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x54>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x58>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f93b 	bl	8001b96 <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00e      	b.n	8001948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d80a      	bhi.n	8001946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f000 f911 	bl	8001b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800193c:	4a06      	ldr	r2, [pc, #24]	; (8001958 <HAL_InitTick+0x5c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000000 	.word	0x20000000
 8001954:	20000008 	.word	0x20000008
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x20>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x24>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_IncTick+0x24>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000008 	.word	0x20000008
 8001980:	200002f8 	.word	0x200002f8

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	200002f8 	.word	0x200002f8

0800199c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff ffee 	bl	8001984 <HAL_GetTick>
 80019a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d005      	beq.n	80019c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_Delay+0x44>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019c2:	bf00      	nop
 80019c4:	f7ff ffde 	bl	8001984 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d8f7      	bhi.n	80019c4 <HAL_Delay+0x28>
  {
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000008 	.word	0x20000008

080019e4 <__NVIC_SetPriorityGrouping>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_SetPriority>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	db0a      	blt.n	8001a72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	490c      	ldr	r1, [pc, #48]	; (8001a94 <__NVIC_SetPriority+0x4c>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	0112      	lsls	r2, r2, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a70:	e00a      	b.n	8001a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <__NVIC_SetPriority+0x50>)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	761a      	strb	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <NVIC_EncodePriority>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f1c3 0307 	rsb	r3, r3, #7
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	bf28      	it	cs
 8001aba:	2304      	movcs	r3, #4
 8001abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d902      	bls.n	8001acc <NVIC_EncodePriority+0x30>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3b03      	subs	r3, #3
 8001aca:	e000      	b.n	8001ace <NVIC_EncodePriority+0x32>
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	4313      	orrs	r3, r2
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3724      	adds	r7, #36	; 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <SysTick_Config>:
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b14:	d301      	bcc.n	8001b1a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00f      	b.n	8001b3a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <SysTick_Config+0x40>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b22:	210f      	movs	r1, #15
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f7ff ff8e 	bl	8001a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <SysTick_Config+0x40>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <SysTick_Config+0x40>)
 8001b34:	2207      	movs	r2, #7
 8001b36:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	e000e010 	.word	0xe000e010

08001b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff47 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b70:	f7ff ff5c 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f7ff ff8e 	bl	8001a9c <NVIC_EncodePriority>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff5d 	bl	8001a48 <__NVIC_SetPriority>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffb0 	bl	8001b04 <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	e165      	b.n	8001e98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f040 8154 	bne.w	8001e92 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d005      	beq.n	8001c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d130      	bne.n	8001c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c38:	2201      	movs	r2, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 0201 	and.w	r2, r3, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d017      	beq.n	8001ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d123      	bne.n	8001cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3208      	adds	r2, #8
 8001cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	69b9      	ldr	r1, [r7, #24]
 8001cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0203 	and.w	r2, r3, #3
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80ae 	beq.w	8001e92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	; (8001eb0 <HAL_GPIO_Init+0x300>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	4a5c      	ldr	r2, [pc, #368]	; (8001eb0 <HAL_GPIO_Init+0x300>)
 8001d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d44:	6453      	str	r3, [r2, #68]	; 0x44
 8001d46:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <HAL_GPIO_Init+0x300>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d52:	4a58      	ldr	r2, [pc, #352]	; (8001eb4 <HAL_GPIO_Init+0x304>)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4f      	ldr	r2, [pc, #316]	; (8001eb8 <HAL_GPIO_Init+0x308>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d025      	beq.n	8001dca <HAL_GPIO_Init+0x21a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4e      	ldr	r2, [pc, #312]	; (8001ebc <HAL_GPIO_Init+0x30c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01f      	beq.n	8001dc6 <HAL_GPIO_Init+0x216>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4d      	ldr	r2, [pc, #308]	; (8001ec0 <HAL_GPIO_Init+0x310>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d019      	beq.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4c      	ldr	r2, [pc, #304]	; (8001ec4 <HAL_GPIO_Init+0x314>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0x20e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4b      	ldr	r2, [pc, #300]	; (8001ec8 <HAL_GPIO_Init+0x318>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00d      	beq.n	8001dba <HAL_GPIO_Init+0x20a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4a      	ldr	r2, [pc, #296]	; (8001ecc <HAL_GPIO_Init+0x31c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d007      	beq.n	8001db6 <HAL_GPIO_Init+0x206>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a49      	ldr	r2, [pc, #292]	; (8001ed0 <HAL_GPIO_Init+0x320>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_GPIO_Init+0x202>
 8001dae:	2306      	movs	r3, #6
 8001db0:	e00c      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001db2:	2307      	movs	r3, #7
 8001db4:	e00a      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001db6:	2305      	movs	r3, #5
 8001db8:	e008      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dba:	2304      	movs	r3, #4
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e004      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e002      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_GPIO_Init+0x21c>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	f002 0203 	and.w	r2, r2, #3
 8001dd2:	0092      	lsls	r2, r2, #2
 8001dd4:	4093      	lsls	r3, r2
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ddc:	4935      	ldr	r1, [pc, #212]	; (8001eb4 <HAL_GPIO_Init+0x304>)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	3302      	adds	r3, #2
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dea:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0e:	4a31      	ldr	r2, [pc, #196]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e14:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e38:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e3e:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e62:	4a1c      	ldr	r2, [pc, #112]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8c:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_GPIO_Init+0x324>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3301      	adds	r3, #1
 8001e96:	61fb      	str	r3, [r7, #28]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	2b0f      	cmp	r3, #15
 8001e9c:	f67f ae96 	bls.w	8001bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3724      	adds	r7, #36	; 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40013800 	.word	0x40013800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40021400 	.word	0x40021400
 8001ed0:	40021800 	.word	0x40021800
 8001ed4:	40013c00 	.word	0x40013c00

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ef4:	e003      	b.n	8001efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	041a      	lsls	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	619a      	str	r2, [r3, #24]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e12b      	b.n	8002176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fb16 	bl	8001564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2224      	movs	r2, #36	; 0x24
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f70:	f002 fa84 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8001f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a81      	ldr	r2, [pc, #516]	; (8002180 <HAL_I2C_Init+0x274>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d807      	bhi.n	8001f90 <HAL_I2C_Init+0x84>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a80      	ldr	r2, [pc, #512]	; (8002184 <HAL_I2C_Init+0x278>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e006      	b.n	8001f9e <HAL_I2C_Init+0x92>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4a7d      	ldr	r2, [pc, #500]	; (8002188 <HAL_I2C_Init+0x27c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	bf94      	ite	ls
 8001f98:	2301      	movls	r3, #1
 8001f9a:	2300      	movhi	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0e7      	b.n	8002176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a78      	ldr	r2, [pc, #480]	; (800218c <HAL_I2C_Init+0x280>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9b      	lsrs	r3, r3, #18
 8001fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a6a      	ldr	r2, [pc, #424]	; (8002180 <HAL_I2C_Init+0x274>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d802      	bhi.n	8001fe0 <HAL_I2C_Init+0xd4>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	e009      	b.n	8001ff4 <HAL_I2C_Init+0xe8>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	4a69      	ldr	r2, [pc, #420]	; (8002190 <HAL_I2C_Init+0x284>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002006:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	495c      	ldr	r1, [pc, #368]	; (8002180 <HAL_I2C_Init+0x274>)
 8002010:	428b      	cmp	r3, r1
 8002012:	d819      	bhi.n	8002048 <HAL_I2C_Init+0x13c>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1e59      	subs	r1, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002028:	400b      	ands	r3, r1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_I2C_Init+0x138>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e59      	subs	r1, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fbb1 f3f3 	udiv	r3, r1, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002042:	e051      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002044:	2304      	movs	r3, #4
 8002046:	e04f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d111      	bne.n	8002074 <HAL_I2C_Init+0x168>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1e58      	subs	r0, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e012      	b.n	800209a <HAL_I2C_Init+0x18e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	0099      	lsls	r1, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Init+0x196>
 800209e:	2301      	movs	r3, #1
 80020a0:	e022      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10e      	bne.n	80020c8 <HAL_I2C_Init+0x1bc>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e58      	subs	r0, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	440b      	add	r3, r1
 80020b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c6:	e00f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e58      	subs	r0, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	0099      	lsls	r1, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	fbb0 f3f3 	udiv	r3, r0, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	6809      	ldr	r1, [r1, #0]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6911      	ldr	r1, [r2, #16]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68d2      	ldr	r2, [r2, #12]
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	430b      	orrs	r3, r1
 800212a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	000186a0 	.word	0x000186a0
 8002184:	001e847f 	.word	0x001e847f
 8002188:	003d08ff 	.word	0x003d08ff
 800218c:	431bde83 	.word	0x431bde83
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	4608      	mov	r0, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	817b      	strh	r3, [r7, #10]
 80021a6:	460b      	mov	r3, r1
 80021a8:	813b      	strh	r3, [r7, #8]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021ae:	f7ff fbe9 	bl	8001984 <HAL_GetTick>
 80021b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b20      	cmp	r3, #32
 80021be:	f040 80d9 	bne.w	8002374 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2319      	movs	r3, #25
 80021c8:	2201      	movs	r2, #1
 80021ca:	496d      	ldr	r1, [pc, #436]	; (8002380 <HAL_I2C_Mem_Write+0x1ec>)
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 fdb9 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
 80021da:	e0cc      	b.n	8002376 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_I2C_Mem_Write+0x56>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e0c5      	b.n	8002376 <HAL_I2C_Mem_Write+0x1e2>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d007      	beq.n	8002210 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2221      	movs	r2, #33	; 0x21
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2240      	movs	r2, #64	; 0x40
 800222c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a3a      	ldr	r2, [r7, #32]
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002240:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4a4d      	ldr	r2, [pc, #308]	; (8002384 <HAL_I2C_Mem_Write+0x1f0>)
 8002250:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002252:	88f8      	ldrh	r0, [r7, #6]
 8002254:	893a      	ldrh	r2, [r7, #8]
 8002256:	8979      	ldrh	r1, [r7, #10]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	4603      	mov	r3, r0
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fbf0 	bl	8002a48 <I2C_RequestMemoryWrite>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d052      	beq.n	8002314 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e081      	b.n	8002376 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fe7e 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00d      	beq.n	800229e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b04      	cmp	r3, #4
 8002288:	d107      	bne.n	800229a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e06b      	b.n	8002376 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d11b      	bne.n	8002314 <HAL_I2C_Mem_Write+0x180>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d017      	beq.n	8002314 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230a:	b29b      	uxth	r3, r3
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1aa      	bne.n	8002272 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fe71 	bl	8003008 <I2C_WaitOnBTFFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	2b04      	cmp	r3, #4
 8002332:	d107      	bne.n	8002344 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e016      	b.n	8002376 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e000      	b.n	8002376 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002374:	2302      	movs	r3, #2
  }
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	00100002 	.word	0x00100002
 8002384:	ffff0000 	.word	0xffff0000

08002388 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08c      	sub	sp, #48	; 0x30
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	4603      	mov	r3, r0
 8002398:	817b      	strh	r3, [r7, #10]
 800239a:	460b      	mov	r3, r1
 800239c:	813b      	strh	r3, [r7, #8]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a2:	f7ff faef 	bl	8001984 <HAL_GetTick>
 80023a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	f040 8214 	bne.w	80027de <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2319      	movs	r3, #25
 80023bc:	2201      	movs	r2, #1
 80023be:	497b      	ldr	r1, [pc, #492]	; (80025ac <HAL_I2C_Mem_Read+0x224>)
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fcbf 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023cc:	2302      	movs	r3, #2
 80023ce:	e207      	b.n	80027e0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_I2C_Mem_Read+0x56>
 80023da:	2302      	movs	r3, #2
 80023dc:	e200      	b.n	80027e0 <HAL_I2C_Mem_Read+0x458>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d007      	beq.n	8002404 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2222      	movs	r2, #34	; 0x22
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2240      	movs	r2, #64	; 0x40
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a5b      	ldr	r2, [pc, #364]	; (80025b0 <HAL_I2C_Mem_Read+0x228>)
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002446:	88f8      	ldrh	r0, [r7, #6]
 8002448:	893a      	ldrh	r2, [r7, #8]
 800244a:	8979      	ldrh	r1, [r7, #10]
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	4603      	mov	r3, r0
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fb8c 	bl	8002b74 <I2C_RequestMemoryRead>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e1bc      	b.n	80027e0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	2b00      	cmp	r3, #0
 800246c:	d113      	bne.n	8002496 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	623b      	str	r3, [r7, #32]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e190      	b.n	80027b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	2b01      	cmp	r3, #1
 800249c:	d11b      	bne.n	80024d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e170      	b.n	80027b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d11b      	bne.n	8002516 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	61bb      	str	r3, [r7, #24]
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	e150      	b.n	80027b8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800252c:	e144      	b.n	80027b8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002532:	2b03      	cmp	r3, #3
 8002534:	f200 80f1 	bhi.w	800271a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	2b01      	cmp	r3, #1
 800253e:	d123      	bne.n	8002588 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002542:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fda7 	bl	8003098 <I2C_WaitOnRXNEFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e145      	b.n	80027e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002586:	e117      	b.n	80027b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b02      	cmp	r3, #2
 800258e:	d14e      	bne.n	800262e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	2200      	movs	r2, #0
 8002598:	4906      	ldr	r1, [pc, #24]	; (80025b4 <HAL_I2C_Mem_Read+0x22c>)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fbd2 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e11a      	b.n	80027e0 <HAL_I2C_Mem_Read+0x458>
 80025aa:	bf00      	nop
 80025ac:	00100002 	.word	0x00100002
 80025b0:	ffff0000 	.word	0xffff0000
 80025b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800262c:	e0c4      	b.n	80027b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	2200      	movs	r2, #0
 8002636:	496c      	ldr	r1, [pc, #432]	; (80027e8 <HAL_I2C_Mem_Read+0x460>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fb83 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0cb      	b.n	80027e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	2200      	movs	r2, #0
 8002692:	4955      	ldr	r1, [pc, #340]	; (80027e8 <HAL_I2C_Mem_Read+0x460>)
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fb55 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e09d      	b.n	80027e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002718:	e04e      	b.n	80027b8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 fcba 	bl	8003098 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e058      	b.n	80027e0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b04      	cmp	r3, #4
 800276c:	d124      	bne.n	80027b8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	2b03      	cmp	r3, #3
 8002774:	d107      	bne.n	8002786 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002784:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f47f aeb6 	bne.w	800252e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3728      	adds	r7, #40	; 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	00010004 	.word	0x00010004

080027ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	; 0x28
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	460b      	mov	r3, r1
 80027fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80027fc:	f7ff f8c2 	bl	8001984 <HAL_GetTick>
 8002800:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	f040 8111 	bne.w	8002a36 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2319      	movs	r3, #25
 800281a:	2201      	movs	r2, #1
 800281c:	4988      	ldr	r1, [pc, #544]	; (8002a40 <HAL_I2C_IsDeviceReady+0x254>)
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fa90 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	e104      	b.n	8002a38 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_I2C_IsDeviceReady+0x50>
 8002838:	2302      	movs	r3, #2
 800283a:	e0fd      	b.n	8002a38 <HAL_I2C_IsDeviceReady+0x24c>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d007      	beq.n	8002862 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002870:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2224      	movs	r2, #36	; 0x24
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a70      	ldr	r2, [pc, #448]	; (8002a44 <HAL_I2C_IsDeviceReady+0x258>)
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002894:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2200      	movs	r2, #0
 800289e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fa4e 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028bc:	d103      	bne.n	80028c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e0b6      	b.n	8002a38 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80028da:	f7ff f853 	bl	8001984 <HAL_GetTick>
 80028de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	bf0c      	ite	eq
 80028ee:	2301      	moveq	r3, #1
 80028f0:	2300      	movne	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800290e:	e025      	b.n	800295c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002910:	f7ff f838 	bl	8001984 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d302      	bcc.n	8002926 <HAL_I2C_IsDeviceReady+0x13a>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	22a0      	movs	r2, #160	; 0xa0
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b02      	cmp	r3, #2
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2ba0      	cmp	r3, #160	; 0xa0
 8002966:	d005      	beq.n	8002974 <HAL_I2C_IsDeviceReady+0x188>
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <HAL_I2C_IsDeviceReady+0x188>
 800296e:	7dbb      	ldrb	r3, [r7, #22]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0cd      	beq.n	8002910 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b02      	cmp	r3, #2
 8002988:	d129      	bne.n	80029de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002998:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2319      	movs	r3, #25
 80029b6:	2201      	movs	r2, #1
 80029b8:	4921      	ldr	r1, [pc, #132]	; (8002a40 <HAL_I2C_IsDeviceReady+0x254>)
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f9c2 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e036      	b.n	8002a38 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e02c      	b.n	8002a38 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2319      	movs	r3, #25
 80029fe:	2201      	movs	r2, #1
 8002a00:	490f      	ldr	r1, [pc, #60]	; (8002a40 <HAL_I2C_IsDeviceReady+0x254>)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f99e 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e012      	b.n	8002a38 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	3301      	adds	r3, #1
 8002a16:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	f4ff af32 	bcc.w	8002886 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	00100002 	.word	0x00100002
 8002a44:	ffff0000 	.word	0xffff0000

08002a48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	4608      	mov	r0, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	461a      	mov	r2, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	817b      	strh	r3, [r7, #10]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	813b      	strh	r3, [r7, #8]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f960 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00d      	beq.n	8002aa6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a98:	d103      	bne.n	8002aa2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e05f      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aa6:	897b      	ldrh	r3, [r7, #10]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ab4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	492d      	ldr	r1, [pc, #180]	; (8002b70 <I2C_RequestMemoryWrite+0x128>)
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f9bb 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e04c      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae4:	6a39      	ldr	r1, [r7, #32]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fa46 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00d      	beq.n	8002b0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d107      	bne.n	8002b0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e02b      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d105      	bne.n	8002b20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b14:	893b      	ldrh	r3, [r7, #8]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	611a      	str	r2, [r3, #16]
 8002b1e:	e021      	b.n	8002b64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b20:	893b      	ldrh	r3, [r7, #8]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b30:	6a39      	ldr	r1, [r7, #32]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fa20 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d107      	bne.n	8002b56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e005      	b.n	8002b66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5a:	893b      	ldrh	r3, [r7, #8]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	00010002 	.word	0x00010002

08002b74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4611      	mov	r1, r2
 8002b80:	461a      	mov	r2, r3
 8002b82:	4603      	mov	r3, r0
 8002b84:	817b      	strh	r3, [r7, #10]
 8002b86:	460b      	mov	r3, r1
 8002b88:	813b      	strh	r3, [r7, #8]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f8c2 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00d      	beq.n	8002be2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd4:	d103      	bne.n	8002bde <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0aa      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002be2:	897b      	ldrh	r3, [r7, #10]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	4952      	ldr	r1, [pc, #328]	; (8002d40 <I2C_RequestMemoryRead+0x1cc>)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f91d 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e097      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	6a39      	ldr	r1, [r7, #32]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f9a8 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d107      	bne.n	8002c46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e076      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c50:	893b      	ldrh	r3, [r7, #8]
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	611a      	str	r2, [r3, #16]
 8002c5a:	e021      	b.n	8002ca0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c5c:	893b      	ldrh	r3, [r7, #8]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	6a39      	ldr	r1, [r7, #32]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f982 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00d      	beq.n	8002c96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d107      	bne.n	8002c92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e050      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c96:	893b      	ldrh	r3, [r7, #8]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca2:	6a39      	ldr	r1, [r7, #32]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f967 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d107      	bne.n	8002cc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e035      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f82b 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d02:	d103      	bne.n	8002d0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e013      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d10:	897b      	ldrh	r3, [r7, #10]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	6a3a      	ldr	r2, [r7, #32]
 8002d24:	4906      	ldr	r1, [pc, #24]	; (8002d40 <I2C_RequestMemoryRead+0x1cc>)
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f886 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	00010002 	.word	0x00010002

08002d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d54:	e048      	b.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d044      	beq.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5e:	f7fe fe11 	bl	8001984 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d139      	bne.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	0c1b      	lsrs	r3, r3, #16
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d10d      	bne.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	e00c      	b.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	43da      	mvns	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4013      	ands	r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d116      	bne.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e023      	b.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d10d      	bne.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	e00c      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d093      	beq.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e46:	e071      	b.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d123      	bne.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f043 0204 	orr.w	r2, r3, #4
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e067      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d041      	beq.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7fe fd6c 	bl	8001984 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d136      	bne.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d10c      	bne.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	e00b      	b.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e021      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10c      	bne.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e00b      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f47f af6d 	bne.w	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	e034      	b.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f8e3 	bl	8003152 <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e034      	b.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d028      	beq.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fcf1 	bl	8001984 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11d      	bne.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d016      	beq.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b80      	cmp	r3, #128	; 0x80
 8002ffc:	d1c3      	bne.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003014:	e034      	b.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f89b 	bl	8003152 <I2C_IsAcknowledgeFailed>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e034      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d028      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fe fca9 	bl	8001984 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11d      	bne.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b04      	cmp	r3, #4
 8003050:	d016      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e007      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d1c3      	bne.n	8003016 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030a4:	e049      	b.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d119      	bne.n	80030e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0210 	mvn.w	r2, #16
 80030bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e030      	b.n	800314a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e8:	f7fe fc4c 	bl	8001984 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d302      	bcc.n	80030fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11d      	bne.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d016      	beq.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e007      	b.n	800314a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d1ae      	bne.n	80030a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003168:	d11b      	bne.n	80031a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003172:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f043 0204 	orr.w	r2, r3, #4
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b08d      	sub	sp, #52	; 0x34
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f002 fff7 	bl	80061ba <USB_GetMode>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 84b9 	bne.w	8003b46 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 ff5b 	bl	8006094 <USB_ReadInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 84af 	beq.w	8003b44 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f002 ff48 	bl	8006094 <USB_ReadInterrupts>
 8003204:	4603      	mov	r3, r0
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b02      	cmp	r3, #2
 800320c:	d107      	bne.n	800321e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f002 0202 	and.w	r2, r2, #2
 800321c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f002 ff36 	bl	8006094 <USB_ReadInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b10      	cmp	r3, #16
 8003230:	d161      	bne.n	80032f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699a      	ldr	r2, [r3, #24]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0210 	bic.w	r2, r2, #16
 8003240:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4413      	add	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	0c5b      	lsrs	r3, r3, #17
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	2b02      	cmp	r3, #2
 800326c:	d124      	bne.n	80032b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d035      	beq.n	80032e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003288:	b29b      	uxth	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	6a38      	ldr	r0, [r7, #32]
 800328e:	f002 fdaf 	bl	8005df0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800329e:	441a      	add	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032b0:	441a      	add	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	615a      	str	r2, [r3, #20]
 80032b6:	e016      	b.n	80032e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	0c5b      	lsrs	r3, r3, #17
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d110      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80032ca:	2208      	movs	r2, #8
 80032cc:	4619      	mov	r1, r3
 80032ce:	6a38      	ldr	r0, [r7, #32]
 80032d0:	f002 fd8e 	bl	8005df0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e0:	441a      	add	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0210 	orr.w	r2, r2, #16
 80032f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f002 feca 	bl	8006094 <USB_ReadInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003306:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800330a:	f040 80a7 	bne.w	800345c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f002 fecf 	bl	80060ba <USB_ReadDevAllOutEpInterrupt>
 800331c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800331e:	e099      	b.n	8003454 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 808e 	beq.w	8003448 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f002 fef3 	bl	8006122 <USB_ReadDevOutEPInterrupt>
 800333c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00c      	beq.n	8003362 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003354:	461a      	mov	r2, r3
 8003356:	2301      	movs	r3, #1
 8003358:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800335a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fe6d 	bl	800403c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00c      	beq.n	8003386 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003378:	461a      	mov	r2, r3
 800337a:	2308      	movs	r3, #8
 800337c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800337e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 ff43 	bl	800420c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339c:	461a      	mov	r2, r3
 800339e:	2310      	movs	r3, #16
 80033a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d030      	beq.n	800340e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d109      	bne.n	80033cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	3304      	adds	r3, #4
 80033e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	78db      	ldrb	r3, [r3, #3]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d108      	bne.n	80033fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	4619      	mov	r1, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f004 fa86 	bl	8007908 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003408:	461a      	mov	r2, r3
 800340a:	2302      	movs	r3, #2
 800340c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003424:	461a      	mov	r2, r3
 8003426:	2320      	movs	r3, #32
 8003428:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	4413      	add	r3, r2
 800343c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003440:	461a      	mov	r2, r3
 8003442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003446:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	3301      	adds	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	2b00      	cmp	r3, #0
 8003458:	f47f af62 	bne.w	8003320 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f002 fe17 	bl	8006094 <USB_ReadInterrupts>
 8003466:	4603      	mov	r3, r0
 8003468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003470:	f040 80db 	bne.w	800362a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f002 fe38 	bl	80060ee <USB_ReadDevAllInEpInterrupt>
 800347e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003484:	e0cd      	b.n	8003622 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80c2 	beq.w	8003616 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f002 fe5e 	bl	800615e <USB_ReadDevInEPInterrupt>
 80034a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d057      	beq.n	800355e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	2201      	movs	r2, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69f9      	ldr	r1, [r7, #28]
 80034ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034ce:	4013      	ands	r3, r2
 80034d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034de:	461a      	mov	r2, r3
 80034e0:	2301      	movs	r3, #1
 80034e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	799b      	ldrb	r3, [r3, #6]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d132      	bne.n	8003552 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3320      	adds	r3, #32
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4403      	add	r3, r0
 800350c:	331c      	adds	r3, #28
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4419      	add	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4403      	add	r3, r0
 8003520:	3320      	adds	r3, #32
 8003522:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d113      	bne.n	8003552 <HAL_PCD_IRQHandler+0x3a2>
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3324      	adds	r3, #36	; 0x24
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d108      	bne.n	8003552 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800354a:	461a      	mov	r2, r3
 800354c:	2101      	movs	r1, #1
 800354e:	f002 fe65 	bl	800621c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f004 f950 	bl	80077fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003574:	461a      	mov	r2, r3
 8003576:	2308      	movs	r3, #8
 8003578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003590:	461a      	mov	r2, r3
 8003592:	2310      	movs	r3, #16
 8003594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ac:	461a      	mov	r2, r3
 80035ae:	2340      	movs	r3, #64	; 0x40
 80035b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d023      	beq.n	8003604 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035be:	6a38      	ldr	r0, [r7, #32]
 80035c0:	f001 ffb8 	bl	8005534 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	3310      	adds	r3, #16
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	3304      	adds	r3, #4
 80035d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	78db      	ldrb	r3, [r3, #3]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d108      	bne.n	80035f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2200      	movs	r2, #0
 80035e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	4619      	mov	r1, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f004 f99d 	bl	800792c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fe:	461a      	mov	r2, r3
 8003600:	2302      	movs	r3, #2
 8003602:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800360e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fc86 	bl	8003f22 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	3301      	adds	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	f47f af2e 	bne.w	8003486 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f002 fd30 	bl	8006094 <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800363a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800363e:	d122      	bne.n	8003686 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800365a:	2b01      	cmp	r3, #1
 800365c:	d108      	bne.n	8003670 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003666:	2100      	movs	r1, #0
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f004 fa7f 	bl	8007b6c <HAL_PCDEx_LPM_Callback>
 800366e:	e002      	b.n	8003676 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f004 f93b 	bl	80078ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f002 fd02 	bl	8006094 <USB_ReadInterrupts>
 8003690:	4603      	mov	r3, r0
 8003692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369a:	d112      	bne.n	80036c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d102      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f004 f8f7 	bl	80078a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036c0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f002 fce4 	bl	8006094 <USB_ReadInterrupts>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d6:	d121      	bne.n	800371c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80036e6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d111      	bne.n	8003716 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	f003 020f 	and.w	r2, r3, #15
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800370c:	2101      	movs	r1, #1
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f004 fa2c 	bl	8007b6c <HAL_PCDEx_LPM_Callback>
 8003714:	e002      	b.n	800371c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f004 f8c2 	bl	80078a0 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f002 fcb7 	bl	8006094 <USB_ReadInterrupts>
 8003726:	4603      	mov	r3, r0
 8003728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003730:	f040 80b7 	bne.w	80038a2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2110      	movs	r1, #16
 800374e:	4618      	mov	r0, r3
 8003750:	f001 fef0 	bl	8005534 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003754:	2300      	movs	r3, #0
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003758:	e046      	b.n	80037e8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003766:	461a      	mov	r2, r3
 8003768:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800376c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800377e:	0151      	lsls	r1, r2, #5
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	440a      	add	r2, r1
 8003784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003788:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800378c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	461a      	mov	r2, r3
 800379c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b2:	0151      	lsls	r1, r2, #5
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	440a      	add	r2, r1
 80037b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d2:	0151      	lsls	r1, r2, #5
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	440a      	add	r2, r1
 80037d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	3301      	adds	r3, #1
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	791b      	ldrb	r3, [r3, #4]
 80037ec:	461a      	mov	r2, r3
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d3b2      	bcc.n	800375a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003802:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003806:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	7bdb      	ldrb	r3, [r3, #15]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d016      	beq.n	800383e <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003820:	f043 030b 	orr.w	r3, r3, #11
 8003824:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003836:	f043 030b 	orr.w	r3, r3, #11
 800383a:	6453      	str	r3, [r2, #68]	; 0x44
 800383c:	e015      	b.n	800386a <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800384c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003850:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003854:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003864:	f043 030b 	orr.w	r3, r3, #11
 8003868:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003878:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800387c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800388c:	461a      	mov	r2, r3
 800388e:	f002 fcc5 	bl	800621c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f002 fbf4 	bl	8006094 <USB_ReadInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b6:	d123      	bne.n	8003900 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f002 fc8a 	bl	80061d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 fe66 	bl	8005598 <USB_GetDevSpeed>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681c      	ldr	r4, [r3, #0]
 80038d8:	f000 fdc4 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80038dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038e2:	461a      	mov	r2, r3
 80038e4:	4620      	mov	r0, r4
 80038e6:	f001 fd83 	bl	80053f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f003 ffaf 	bl	800784e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80038fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f002 fbc5 	bl	8006094 <USB_ReadInterrupts>
 800390a:	4603      	mov	r3, r0
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b08      	cmp	r3, #8
 8003912:	d10a      	bne.n	800392a <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f003 ff8c 	bl	8007832 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f002 0208 	and.w	r2, r2, #8
 8003928:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f002 fbb0 	bl	8006094 <USB_ReadInterrupts>
 8003934:	4603      	mov	r3, r0
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b80      	cmp	r3, #128	; 0x80
 800393c:	d123      	bne.n	8003986 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800394a:	2301      	movs	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	; 0x24
 800394e:	e014      	b.n	800397a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003954:	4613      	mov	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4413      	add	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d105      	bne.n	8003974 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 faa6 	bl	8003ec0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	3301      	adds	r3, #1
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	791b      	ldrb	r3, [r3, #4]
 800397e:	461a      	mov	r2, r3
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	4293      	cmp	r3, r2
 8003984:	d3e4      	bcc.n	8003950 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f002 fb82 	bl	8006094 <USB_ReadInterrupts>
 8003990:	4603      	mov	r3, r0
 8003992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399a:	d13c      	bne.n	8003a16 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800399c:	2301      	movs	r3, #1
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	e02b      	b.n	80039fa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	3318      	adds	r3, #24
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d115      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	da12      	bge.n	80039f4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d2:	4613      	mov	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3317      	adds	r3, #23
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	4619      	mov	r1, r3
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fa66 	bl	8003ec0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	3301      	adds	r3, #1
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	791b      	ldrb	r3, [r3, #4]
 80039fe:	461a      	mov	r2, r3
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d3cd      	bcc.n	80039a2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f002 fb3a 	bl	8006094 <USB_ReadInterrupts>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a2a:	d156      	bne.n	8003ada <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a30:	e045      	b.n	8003abe <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d12e      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	da2b      	bge.n	8003ab8 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003a6c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d121      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ab4:	6053      	str	r3, [r2, #4]
            break;
 8003ab6:	e008      	b.n	8003aca <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	3301      	adds	r3, #1
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	791b      	ldrb	r3, [r3, #4]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d3b3      	bcc.n	8003a32 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 fad8 	bl	8006094 <USB_ReadInterrupts>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d10a      	bne.n	8003b06 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f003 ff2d 	bl	8007950 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f002 fac2 	bl	8006094 <USB_ReadInterrupts>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d115      	bne.n	8003b46 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f003 ff1d 	bl	800796c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	e000      	b.n	8003b46 <HAL_PCD_IRQHandler+0x996>
      return;
 8003b44:	bf00      	nop
    }
  }
}
 8003b46:	3734      	adds	r7, #52	; 0x34
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd90      	pop	{r4, r7, pc}

08003b4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_PCD_SetAddress+0x1a>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e012      	b.n	8003b8c <HAL_PCD_SetAddress+0x40>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f002 fa63 	bl	8006048 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	70fb      	strb	r3, [r7, #3]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	803b      	strh	r3, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da0f      	bge.n	8003bda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	3310      	adds	r3, #16
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	705a      	strb	r2, [r3, #1]
 8003bd8:	e00f      	b.n	8003bfa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 020f 	and.w	r2, r3, #15
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c06:	883a      	ldrh	r2, [r7, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	78ba      	ldrb	r2, [r7, #2]
 8003c10:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	785b      	ldrb	r3, [r3, #1]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c24:	78bb      	ldrb	r3, [r7, #2]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d102      	bne.n	8003c30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_PCD_EP_Open+0xaa>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e00e      	b.n	8003c5c <HAL_PCD_EP_Open+0xc8>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68f9      	ldr	r1, [r7, #12]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 fcc8 	bl	80055e2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	460b      	mov	r3, r1
 8003c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c74:	7afb      	ldrb	r3, [r7, #11]
 8003c76:	f003 020f 	and.w	r2, r3, #15
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	799b      	ldrb	r3, [r3, #6]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d102      	bne.n	8003cc0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	799b      	ldrb	r3, [r3, #6]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6979      	ldr	r1, [r7, #20]
 8003ccc:	f001 fd10 	bl	80056f0 <USB_EPStartXfer>

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cea:	7afb      	ldrb	r3, [r7, #11]
 8003cec:	f003 020f 	and.w	r2, r3, #15
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	3310      	adds	r3, #16
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3304      	adds	r3, #4
 8003d00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2200      	movs	r2, #0
 8003d12:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2201      	movs	r2, #1
 8003d18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d1a:	7afb      	ldrb	r3, [r7, #11]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	799b      	ldrb	r3, [r3, #6]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d102      	bne.n	8003d34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	799b      	ldrb	r3, [r3, #6]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6979      	ldr	r1, [r7, #20]
 8003d40:	f001 fcd6 	bl	80056f0 <USB_EPStartXfer>

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	7912      	ldrb	r2, [r2, #4]
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e04f      	b.n	8003e0c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	da0f      	bge.n	8003d94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	f003 020f 	and.w	r2, r3, #15
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	3310      	adds	r3, #16
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	4413      	add	r3, r2
 8003d88:	3304      	adds	r3, #4
 8003d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	705a      	strb	r2, [r3, #1]
 8003d92:	e00d      	b.n	8003db0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	4613      	mov	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	3304      	adds	r3, #4
 8003da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_PCD_EP_SetStall+0x82>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e01d      	b.n	8003e0c <HAL_PCD_EP_SetStall+0xbe>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68f9      	ldr	r1, [r7, #12]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f002 f85e 	bl	8005ea0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	7999      	ldrb	r1, [r3, #6]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f002 fa0d 	bl	800621c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	7912      	ldrb	r2, [r2, #4]
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e042      	b.n	8003eb8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da0f      	bge.n	8003e5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	f003 020f 	and.w	r2, r3, #15
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	3310      	adds	r3, #16
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3304      	adds	r3, #4
 8003e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	705a      	strb	r2, [r3, #1]
 8003e58:	e00f      	b.n	8003e7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 020f 	and.w	r2, r3, #15
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	4413      	add	r3, r2
 8003e70:	3304      	adds	r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_PCD_EP_ClrStall+0x86>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e00e      	b.n	8003eb8 <HAL_PCD_EP_ClrStall+0xa4>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f002 f867 	bl	8005f7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da0c      	bge.n	8003eee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	f003 020f 	and.w	r2, r3, #15
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	3310      	adds	r3, #16
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3304      	adds	r3, #4
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	e00c      	b.n	8003f08 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	f003 020f 	and.w	r2, r3, #15
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	4413      	add	r3, r2
 8003f04:	3304      	adds	r3, #4
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 fe86 	bl	8005c20 <USB_EPStopXfer>
 8003f14:	4603      	mov	r3, r0
 8003f16:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f18:	7afb      	ldrb	r3, [r7, #11]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b08a      	sub	sp, #40	; 0x28
 8003f26:	af02      	add	r7, sp, #8
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	3310      	adds	r3, #16
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	3304      	adds	r3, #4
 8003f48:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d901      	bls.n	8003f5a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e06b      	b.n	8004032 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d902      	bls.n	8003f76 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3303      	adds	r3, #3
 8003f7a:	089b      	lsrs	r3, r3, #2
 8003f7c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f7e:	e02a      	b.n	8003fd6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d902      	bls.n	8003f9c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	3303      	adds	r3, #3
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	68d9      	ldr	r1, [r3, #12]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	6978      	ldr	r0, [r7, #20]
 8003fba:	f001 fedb 	bl	8005d74 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d809      	bhi.n	8004000 <PCD_WriteEmptyTxFifo+0xde>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d203      	bcs.n	8004000 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1bf      	bne.n	8003f80 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	429a      	cmp	r2, r3
 800400a:	d811      	bhi.n	8004030 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	2201      	movs	r2, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	43db      	mvns	r3, r3
 8004026:	6939      	ldr	r1, [r7, #16]
 8004028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800402c:	4013      	ands	r3, r2
 800402e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	333c      	adds	r3, #60	; 0x3c
 8004054:	3304      	adds	r3, #4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	799b      	ldrb	r3, [r3, #6]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d17b      	bne.n	800416a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	4a61      	ldr	r2, [pc, #388]	; (8004204 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	f240 80b9 	bls.w	80041f8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80b3 	beq.w	80041f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	461a      	mov	r2, r3
 80040a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a4:	6093      	str	r3, [r2, #8]
 80040a6:	e0a7      	b.n	80041f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	461a      	mov	r2, r3
 80040c0:	2320      	movs	r3, #32
 80040c2:	6093      	str	r3, [r2, #8]
 80040c4:	e098      	b.n	80041f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f040 8093 	bne.w	80041f8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	4a4b      	ldr	r2, [pc, #300]	; (8004204 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d90f      	bls.n	80040fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	461a      	mov	r2, r3
 80040f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f6:	6093      	str	r3, [r2, #8]
 80040f8:	e07e      	b.n	80041f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	3304      	adds	r3, #4
 800410e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a1a      	ldr	r2, [r3, #32]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	0159      	lsls	r1, r3, #5
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	440b      	add	r3, r1
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004126:	1ad2      	subs	r2, r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d114      	bne.n	800415c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004144:	461a      	mov	r2, r3
 8004146:	2101      	movs	r1, #1
 8004148:	f002 f868 	bl	800621c <USB_EP0_OutStart>
 800414c:	e006      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	441a      	add	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f003 fb30 	bl	80077c8 <HAL_PCD_DataOutStageCallback>
 8004168:	e046      	b.n	80041f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d124      	bne.n	80041bc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004188:	461a      	mov	r2, r3
 800418a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800418e:	6093      	str	r3, [r2, #8]
 8004190:	e032      	b.n	80041f8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a8:	461a      	mov	r2, r3
 80041aa:	2320      	movs	r3, #32
 80041ac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f003 fb07 	bl	80077c8 <HAL_PCD_DataOutStageCallback>
 80041ba:	e01d      	b.n	80041f8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d114      	bne.n	80041ec <PCD_EP_OutXfrComplete_int+0x1b0>
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	4613      	mov	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d108      	bne.n	80041ec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80041e4:	461a      	mov	r2, r3
 80041e6:	2100      	movs	r1, #0
 80041e8:	f002 f818 	bl	800621c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f003 fae8 	bl	80077c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	4f54300a 	.word	0x4f54300a
 8004208:	4f54310a 	.word	0x4f54310a

0800420c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	333c      	adds	r3, #60	; 0x3c
 8004224:	3304      	adds	r3, #4
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <PCD_EP_OutSetupPacket_int+0x88>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d90e      	bls.n	8004260 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	461a      	mov	r2, r3
 800425a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f003 fa9f 	bl	80077a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <PCD_EP_OutSetupPacket_int+0x88>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d90c      	bls.n	8004288 <PCD_EP_OutSetupPacket_int+0x7c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	799b      	ldrb	r3, [r3, #6]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d108      	bne.n	8004288 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004280:	461a      	mov	r2, r3
 8004282:	2101      	movs	r1, #1
 8004284:	f001 ffca 	bl	800621c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	4f54300a 	.word	0x4f54300a

08004298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0cc      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ac:	4b68      	ldr	r3, [pc, #416]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d90c      	bls.n	80042d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b65      	ldr	r3, [pc, #404]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b63      	ldr	r3, [pc, #396]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0b8      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d020      	beq.n	8004322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042ec:	4b59      	ldr	r3, [pc, #356]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a58      	ldr	r2, [pc, #352]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004304:	4b53      	ldr	r3, [pc, #332]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a52      	ldr	r2, [pc, #328]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800430e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b50      	ldr	r3, [pc, #320]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	494d      	ldr	r1, [pc, #308]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d044      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	4b47      	ldr	r3, [pc, #284]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d119      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e07f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d003      	beq.n	8004356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004352:	2b03      	cmp	r3, #3
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004356:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e06f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004366:	4b3b      	ldr	r3, [pc, #236]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e067      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004376:	4b37      	ldr	r3, [pc, #220]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f023 0203 	bic.w	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4934      	ldr	r1, [pc, #208]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	4313      	orrs	r3, r2
 8004386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004388:	f7fd fafc 	bl	8001984 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004390:	f7fd faf8 	bl	8001984 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	; 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e04f      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 020c 	and.w	r2, r3, #12
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1eb      	bne.n	8004390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b8:	4b25      	ldr	r3, [pc, #148]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d20c      	bcs.n	80043e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e032      	b.n	8004446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	4916      	ldr	r1, [pc, #88]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	490e      	ldr	r1, [pc, #56]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800441e:	f000 f855 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8004422:	4602      	mov	r2, r0
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	490a      	ldr	r1, [pc, #40]	; (8004458 <HAL_RCC_ClockConfig+0x1c0>)
 8004430:	5ccb      	ldrb	r3, [r1, r3]
 8004432:	fa22 f303 	lsr.w	r3, r2, r3
 8004436:	4a09      	ldr	r2, [pc, #36]	; (800445c <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_RCC_ClockConfig+0x1c8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fd fa5c 	bl	80018fc <HAL_InitTick>

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023c00 	.word	0x40023c00
 8004454:	40023800 	.word	0x40023800
 8004458:	0800aa78 	.word	0x0800aa78
 800445c:	20000000 	.word	0x20000000
 8004460:	20000004 	.word	0x20000004

08004464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_RCC_GetHCLKFreq+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000000 	.word	0x20000000

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004480:	f7ff fff0 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0a9b      	lsrs	r3, r3, #10
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	0800aa88 	.word	0x0800aa88

080044a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044a8:	f7ff ffdc 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	0b5b      	lsrs	r3, r3, #13
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4903      	ldr	r1, [pc, #12]	; (80044c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40023800 	.word	0x40023800
 80044c8:	0800aa88 	.word	0x0800aa88

080044cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d0:	b0ae      	sub	sp, #184	; 0xb8
 80044d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044f2:	4bcb      	ldr	r3, [pc, #812]	; (8004820 <HAL_RCC_GetSysClockFreq+0x354>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b0c      	cmp	r3, #12
 80044fc:	f200 8206 	bhi.w	800490c <HAL_RCC_GetSysClockFreq+0x440>
 8004500:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	0800453d 	.word	0x0800453d
 800450c:	0800490d 	.word	0x0800490d
 8004510:	0800490d 	.word	0x0800490d
 8004514:	0800490d 	.word	0x0800490d
 8004518:	08004545 	.word	0x08004545
 800451c:	0800490d 	.word	0x0800490d
 8004520:	0800490d 	.word	0x0800490d
 8004524:	0800490d 	.word	0x0800490d
 8004528:	0800454d 	.word	0x0800454d
 800452c:	0800490d 	.word	0x0800490d
 8004530:	0800490d 	.word	0x0800490d
 8004534:	0800490d 	.word	0x0800490d
 8004538:	0800473d 	.word	0x0800473d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800453c:	4bb9      	ldr	r3, [pc, #740]	; (8004824 <HAL_RCC_GetSysClockFreq+0x358>)
 800453e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004542:	e1e7      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004544:	4bb8      	ldr	r3, [pc, #736]	; (8004828 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800454a:	e1e3      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800454c:	4bb4      	ldr	r3, [pc, #720]	; (8004820 <HAL_RCC_GetSysClockFreq+0x354>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004554:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004558:	4bb1      	ldr	r3, [pc, #708]	; (8004820 <HAL_RCC_GetSysClockFreq+0x354>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d071      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004564:	4bae      	ldr	r3, [pc, #696]	; (8004820 <HAL_RCC_GetSysClockFreq+0x354>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	099b      	lsrs	r3, r3, #6
 800456a:	2200      	movs	r2, #0
 800456c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004570:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004580:	2300      	movs	r3, #0
 8004582:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004586:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800458a:	4622      	mov	r2, r4
 800458c:	462b      	mov	r3, r5
 800458e:	f04f 0000 	mov.w	r0, #0
 8004592:	f04f 0100 	mov.w	r1, #0
 8004596:	0159      	lsls	r1, r3, #5
 8004598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800459c:	0150      	lsls	r0, r2, #5
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4621      	mov	r1, r4
 80045a4:	1a51      	subs	r1, r2, r1
 80045a6:	6439      	str	r1, [r7, #64]	; 0x40
 80045a8:	4629      	mov	r1, r5
 80045aa:	eb63 0301 	sbc.w	r3, r3, r1
 80045ae:	647b      	str	r3, [r7, #68]	; 0x44
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80045bc:	4649      	mov	r1, r9
 80045be:	018b      	lsls	r3, r1, #6
 80045c0:	4641      	mov	r1, r8
 80045c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045c6:	4641      	mov	r1, r8
 80045c8:	018a      	lsls	r2, r1, #6
 80045ca:	4641      	mov	r1, r8
 80045cc:	1a51      	subs	r1, r2, r1
 80045ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80045d0:	4649      	mov	r1, r9
 80045d2:	eb63 0301 	sbc.w	r3, r3, r1
 80045d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80045e4:	4649      	mov	r1, r9
 80045e6:	00cb      	lsls	r3, r1, #3
 80045e8:	4641      	mov	r1, r8
 80045ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ee:	4641      	mov	r1, r8
 80045f0:	00ca      	lsls	r2, r1, #3
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	4622      	mov	r2, r4
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	633b      	str	r3, [r7, #48]	; 0x30
 80045fe:	462b      	mov	r3, r5
 8004600:	460a      	mov	r2, r1
 8004602:	eb42 0303 	adc.w	r3, r2, r3
 8004606:	637b      	str	r3, [r7, #52]	; 0x34
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004614:	4629      	mov	r1, r5
 8004616:	024b      	lsls	r3, r1, #9
 8004618:	4621      	mov	r1, r4
 800461a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800461e:	4621      	mov	r1, r4
 8004620:	024a      	lsls	r2, r1, #9
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800462a:	2200      	movs	r2, #0
 800462c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004630:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004634:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004638:	f7fc fb26 	bl	8000c88 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4613      	mov	r3, r2
 8004642:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004646:	e067      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004648:	4b75      	ldr	r3, [pc, #468]	; (8004820 <HAL_RCC_GetSysClockFreq+0x354>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	2200      	movs	r2, #0
 8004650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004654:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004658:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800465c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004660:	67bb      	str	r3, [r7, #120]	; 0x78
 8004662:	2300      	movs	r3, #0
 8004664:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004666:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800466a:	4622      	mov	r2, r4
 800466c:	462b      	mov	r3, r5
 800466e:	f04f 0000 	mov.w	r0, #0
 8004672:	f04f 0100 	mov.w	r1, #0
 8004676:	0159      	lsls	r1, r3, #5
 8004678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800467c:	0150      	lsls	r0, r2, #5
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4621      	mov	r1, r4
 8004684:	1a51      	subs	r1, r2, r1
 8004686:	62b9      	str	r1, [r7, #40]	; 0x28
 8004688:	4629      	mov	r1, r5
 800468a:	eb63 0301 	sbc.w	r3, r3, r1
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800469c:	4649      	mov	r1, r9
 800469e:	018b      	lsls	r3, r1, #6
 80046a0:	4641      	mov	r1, r8
 80046a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046a6:	4641      	mov	r1, r8
 80046a8:	018a      	lsls	r2, r1, #6
 80046aa:	4641      	mov	r1, r8
 80046ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80046b0:	4649      	mov	r1, r9
 80046b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046ca:	4692      	mov	sl, r2
 80046cc:	469b      	mov	fp, r3
 80046ce:	4623      	mov	r3, r4
 80046d0:	eb1a 0303 	adds.w	r3, sl, r3
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	462b      	mov	r3, r5
 80046d8:	eb4b 0303 	adc.w	r3, fp, r3
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80046ea:	4629      	mov	r1, r5
 80046ec:	028b      	lsls	r3, r1, #10
 80046ee:	4621      	mov	r1, r4
 80046f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046f4:	4621      	mov	r1, r4
 80046f6:	028a      	lsls	r2, r1, #10
 80046f8:	4610      	mov	r0, r2
 80046fa:	4619      	mov	r1, r3
 80046fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004700:	2200      	movs	r2, #0
 8004702:	673b      	str	r3, [r7, #112]	; 0x70
 8004704:	677a      	str	r2, [r7, #116]	; 0x74
 8004706:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800470a:	f7fc fabd 	bl	8000c88 <__aeabi_uldivmod>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4613      	mov	r3, r2
 8004714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004718:	4b41      	ldr	r3, [pc, #260]	; (8004820 <HAL_RCC_GetSysClockFreq+0x354>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	0c1b      	lsrs	r3, r3, #16
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	3301      	adds	r3, #1
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800472a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800472e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800473a:	e0eb      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800473c:	4b38      	ldr	r3, [pc, #224]	; (8004820 <HAL_RCC_GetSysClockFreq+0x354>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004748:	4b35      	ldr	r3, [pc, #212]	; (8004820 <HAL_RCC_GetSysClockFreq+0x354>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d06b      	beq.n	800482c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004754:	4b32      	ldr	r3, [pc, #200]	; (8004820 <HAL_RCC_GetSysClockFreq+0x354>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	099b      	lsrs	r3, r3, #6
 800475a:	2200      	movs	r2, #0
 800475c:	66bb      	str	r3, [r7, #104]	; 0x68
 800475e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004766:	663b      	str	r3, [r7, #96]	; 0x60
 8004768:	2300      	movs	r3, #0
 800476a:	667b      	str	r3, [r7, #100]	; 0x64
 800476c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004770:	4622      	mov	r2, r4
 8004772:	462b      	mov	r3, r5
 8004774:	f04f 0000 	mov.w	r0, #0
 8004778:	f04f 0100 	mov.w	r1, #0
 800477c:	0159      	lsls	r1, r3, #5
 800477e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004782:	0150      	lsls	r0, r2, #5
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4621      	mov	r1, r4
 800478a:	1a51      	subs	r1, r2, r1
 800478c:	61b9      	str	r1, [r7, #24]
 800478e:	4629      	mov	r1, r5
 8004790:	eb63 0301 	sbc.w	r3, r3, r1
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80047a2:	4659      	mov	r1, fp
 80047a4:	018b      	lsls	r3, r1, #6
 80047a6:	4651      	mov	r1, sl
 80047a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ac:	4651      	mov	r1, sl
 80047ae:	018a      	lsls	r2, r1, #6
 80047b0:	4651      	mov	r1, sl
 80047b2:	ebb2 0801 	subs.w	r8, r2, r1
 80047b6:	4659      	mov	r1, fp
 80047b8:	eb63 0901 	sbc.w	r9, r3, r1
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d0:	4690      	mov	r8, r2
 80047d2:	4699      	mov	r9, r3
 80047d4:	4623      	mov	r3, r4
 80047d6:	eb18 0303 	adds.w	r3, r8, r3
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	462b      	mov	r3, r5
 80047de:	eb49 0303 	adc.w	r3, r9, r3
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80047f0:	4629      	mov	r1, r5
 80047f2:	024b      	lsls	r3, r1, #9
 80047f4:	4621      	mov	r1, r4
 80047f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047fa:	4621      	mov	r1, r4
 80047fc:	024a      	lsls	r2, r1, #9
 80047fe:	4610      	mov	r0, r2
 8004800:	4619      	mov	r1, r3
 8004802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004806:	2200      	movs	r2, #0
 8004808:	65bb      	str	r3, [r7, #88]	; 0x58
 800480a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800480c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004810:	f7fc fa3a 	bl	8000c88 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4613      	mov	r3, r2
 800481a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800481e:	e065      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x420>
 8004820:	40023800 	.word	0x40023800
 8004824:	00f42400 	.word	0x00f42400
 8004828:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482c:	4b3d      	ldr	r3, [pc, #244]	; (8004924 <HAL_RCC_GetSysClockFreq+0x458>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	2200      	movs	r2, #0
 8004834:	4618      	mov	r0, r3
 8004836:	4611      	mov	r1, r2
 8004838:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800483c:	653b      	str	r3, [r7, #80]	; 0x50
 800483e:	2300      	movs	r3, #0
 8004840:	657b      	str	r3, [r7, #84]	; 0x54
 8004842:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004846:	4642      	mov	r2, r8
 8004848:	464b      	mov	r3, r9
 800484a:	f04f 0000 	mov.w	r0, #0
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	0159      	lsls	r1, r3, #5
 8004854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004858:	0150      	lsls	r0, r2, #5
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4641      	mov	r1, r8
 8004860:	1a51      	subs	r1, r2, r1
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	4649      	mov	r1, r9
 8004866:	eb63 0301 	sbc.w	r3, r3, r1
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004878:	4659      	mov	r1, fp
 800487a:	018b      	lsls	r3, r1, #6
 800487c:	4651      	mov	r1, sl
 800487e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004882:	4651      	mov	r1, sl
 8004884:	018a      	lsls	r2, r1, #6
 8004886:	4651      	mov	r1, sl
 8004888:	1a54      	subs	r4, r2, r1
 800488a:	4659      	mov	r1, fp
 800488c:	eb63 0501 	sbc.w	r5, r3, r1
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	00eb      	lsls	r3, r5, #3
 800489a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800489e:	00e2      	lsls	r2, r4, #3
 80048a0:	4614      	mov	r4, r2
 80048a2:	461d      	mov	r5, r3
 80048a4:	4643      	mov	r3, r8
 80048a6:	18e3      	adds	r3, r4, r3
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	464b      	mov	r3, r9
 80048ac:	eb45 0303 	adc.w	r3, r5, r3
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048be:	4629      	mov	r1, r5
 80048c0:	028b      	lsls	r3, r1, #10
 80048c2:	4621      	mov	r1, r4
 80048c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048c8:	4621      	mov	r1, r4
 80048ca:	028a      	lsls	r2, r1, #10
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048d4:	2200      	movs	r2, #0
 80048d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80048da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048de:	f7fc f9d3 	bl	8000c88 <__aeabi_uldivmod>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4613      	mov	r3, r2
 80048e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80048ec:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <HAL_RCC_GetSysClockFreq+0x458>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	0f1b      	lsrs	r3, r3, #28
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80048fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004902:	fbb2 f3f3 	udiv	r3, r2, r3
 8004906:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800490a:	e003      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_RCC_GetSysClockFreq+0x45c>)
 800490e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004912:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004914:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004918:	4618      	mov	r0, r3
 800491a:	37b8      	adds	r7, #184	; 0xb8
 800491c:	46bd      	mov	sp, r7
 800491e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004922:	bf00      	nop
 8004924:	40023800 	.word	0x40023800
 8004928:	00f42400 	.word	0x00f42400

0800492c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e28d      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8083 	beq.w	8004a52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800494c:	4b94      	ldr	r3, [pc, #592]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 030c 	and.w	r3, r3, #12
 8004954:	2b04      	cmp	r3, #4
 8004956:	d019      	beq.n	800498c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004958:	4b91      	ldr	r3, [pc, #580]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004960:	2b08      	cmp	r3, #8
 8004962:	d106      	bne.n	8004972 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004964:	4b8e      	ldr	r3, [pc, #568]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004970:	d00c      	beq.n	800498c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004972:	4b8b      	ldr	r3, [pc, #556]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800497a:	2b0c      	cmp	r3, #12
 800497c:	d112      	bne.n	80049a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800497e:	4b88      	ldr	r3, [pc, #544]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800498a:	d10b      	bne.n	80049a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498c:	4b84      	ldr	r3, [pc, #528]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d05b      	beq.n	8004a50 <HAL_RCC_OscConfig+0x124>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d157      	bne.n	8004a50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e25a      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ac:	d106      	bne.n	80049bc <HAL_RCC_OscConfig+0x90>
 80049ae:	4b7c      	ldr	r3, [pc, #496]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a7b      	ldr	r2, [pc, #492]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	e01d      	b.n	80049f8 <HAL_RCC_OscConfig+0xcc>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCC_OscConfig+0xb4>
 80049c6:	4b76      	ldr	r3, [pc, #472]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a75      	ldr	r2, [pc, #468]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 80049cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	4b73      	ldr	r3, [pc, #460]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a72      	ldr	r2, [pc, #456]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	e00b      	b.n	80049f8 <HAL_RCC_OscConfig+0xcc>
 80049e0:	4b6f      	ldr	r3, [pc, #444]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a6e      	ldr	r2, [pc, #440]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 80049e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	4b6c      	ldr	r3, [pc, #432]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a6b      	ldr	r2, [pc, #428]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 80049f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d013      	beq.n	8004a28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fc ffc0 	bl	8001984 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a08:	f7fc ffbc 	bl	8001984 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	; 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e21f      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1a:	4b61      	ldr	r3, [pc, #388]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0xdc>
 8004a26:	e014      	b.n	8004a52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fc ffac 	bl	8001984 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a30:	f7fc ffa8 	bl	8001984 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b64      	cmp	r3, #100	; 0x64
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e20b      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a42:	4b57      	ldr	r3, [pc, #348]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x104>
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d06f      	beq.n	8004b3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a5e:	4b50      	ldr	r3, [pc, #320]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d017      	beq.n	8004a9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a6a:	4b4d      	ldr	r3, [pc, #308]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d105      	bne.n	8004a82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a76:	4b4a      	ldr	r3, [pc, #296]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00b      	beq.n	8004a9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a82:	4b47      	ldr	r3, [pc, #284]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d11c      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a8e:	4b44      	ldr	r3, [pc, #272]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d116      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a9a:	4b41      	ldr	r3, [pc, #260]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d005      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x186>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d001      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e1d3      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab2:	4b3b      	ldr	r3, [pc, #236]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4937      	ldr	r1, [pc, #220]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac6:	e03a      	b.n	8004b3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d020      	beq.n	8004b12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ad0:	4b34      	ldr	r3, [pc, #208]	; (8004ba4 <HAL_RCC_OscConfig+0x278>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad6:	f7fc ff55 	bl	8001984 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ade:	f7fc ff51 	bl	8001984 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e1b4      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af0:	4b2b      	ldr	r3, [pc, #172]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0f0      	beq.n	8004ade <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afc:	4b28      	ldr	r3, [pc, #160]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4925      	ldr	r1, [pc, #148]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	600b      	str	r3, [r1, #0]
 8004b10:	e015      	b.n	8004b3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b12:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <HAL_RCC_OscConfig+0x278>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fc ff34 	bl	8001984 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b20:	f7fc ff30 	bl	8001984 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e193      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b32:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d036      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d016      	beq.n	8004b80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b52:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <HAL_RCC_OscConfig+0x27c>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fc ff14 	bl	8001984 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b60:	f7fc ff10 	bl	8001984 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e173      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <HAL_RCC_OscConfig+0x274>)
 8004b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0x234>
 8004b7e:	e01b      	b.n	8004bb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_RCC_OscConfig+0x27c>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b86:	f7fc fefd 	bl	8001984 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b8c:	e00e      	b.n	8004bac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b8e:	f7fc fef9 	bl	8001984 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d907      	bls.n	8004bac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e15c      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	42470000 	.word	0x42470000
 8004ba8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bac:	4b8a      	ldr	r3, [pc, #552]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1ea      	bne.n	8004b8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8097 	beq.w	8004cf4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bca:	4b83      	ldr	r3, [pc, #524]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	4b7f      	ldr	r3, [pc, #508]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	4a7e      	ldr	r2, [pc, #504]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6413      	str	r3, [r2, #64]	; 0x40
 8004be6:	4b7c      	ldr	r3, [pc, #496]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf6:	4b79      	ldr	r3, [pc, #484]	; (8004ddc <HAL_RCC_OscConfig+0x4b0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d118      	bne.n	8004c34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c02:	4b76      	ldr	r3, [pc, #472]	; (8004ddc <HAL_RCC_OscConfig+0x4b0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a75      	ldr	r2, [pc, #468]	; (8004ddc <HAL_RCC_OscConfig+0x4b0>)
 8004c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0e:	f7fc feb9 	bl	8001984 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c16:	f7fc feb5 	bl	8001984 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e118      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c28:	4b6c      	ldr	r3, [pc, #432]	; (8004ddc <HAL_RCC_OscConfig+0x4b0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d106      	bne.n	8004c4a <HAL_RCC_OscConfig+0x31e>
 8004c3c:	4b66      	ldr	r3, [pc, #408]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	4a65      	ldr	r2, [pc, #404]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6713      	str	r3, [r2, #112]	; 0x70
 8004c48:	e01c      	b.n	8004c84 <HAL_RCC_OscConfig+0x358>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x340>
 8004c52:	4b61      	ldr	r3, [pc, #388]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	4a60      	ldr	r2, [pc, #384]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c58:	f043 0304 	orr.w	r3, r3, #4
 8004c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5e:	4b5e      	ldr	r3, [pc, #376]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c62:	4a5d      	ldr	r2, [pc, #372]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6a:	e00b      	b.n	8004c84 <HAL_RCC_OscConfig+0x358>
 8004c6c:	4b5a      	ldr	r3, [pc, #360]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	4a59      	ldr	r2, [pc, #356]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c72:	f023 0301 	bic.w	r3, r3, #1
 8004c76:	6713      	str	r3, [r2, #112]	; 0x70
 8004c78:	4b57      	ldr	r3, [pc, #348]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	4a56      	ldr	r2, [pc, #344]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004c7e:	f023 0304 	bic.w	r3, r3, #4
 8004c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d015      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8c:	f7fc fe7a 	bl	8001984 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c92:	e00a      	b.n	8004caa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c94:	f7fc fe76 	bl	8001984 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e0d7      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004caa:	4b4b      	ldr	r3, [pc, #300]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0ee      	beq.n	8004c94 <HAL_RCC_OscConfig+0x368>
 8004cb6:	e014      	b.n	8004ce2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb8:	f7fc fe64 	bl	8001984 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cbe:	e00a      	b.n	8004cd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc0:	f7fc fe60 	bl	8001984 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e0c1      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd6:	4b40      	ldr	r3, [pc, #256]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1ee      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ce2:	7dfb      	ldrb	r3, [r7, #23]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d105      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce8:	4b3b      	ldr	r3, [pc, #236]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	4a3a      	ldr	r2, [pc, #232]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80ad 	beq.w	8004e58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cfe:	4b36      	ldr	r3, [pc, #216]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d060      	beq.n	8004dcc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d145      	bne.n	8004d9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d12:	4b33      	ldr	r3, [pc, #204]	; (8004de0 <HAL_RCC_OscConfig+0x4b4>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fc fe34 	bl	8001984 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fc fe30 	bl	8001984 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e093      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	4b29      	ldr	r3, [pc, #164]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69da      	ldr	r2, [r3, #28]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	019b      	lsls	r3, r3, #6
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	085b      	lsrs	r3, r3, #1
 8004d56:	3b01      	subs	r3, #1
 8004d58:	041b      	lsls	r3, r3, #16
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	061b      	lsls	r3, r3, #24
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	071b      	lsls	r3, r3, #28
 8004d6a:	491b      	ldr	r1, [pc, #108]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d70:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <HAL_RCC_OscConfig+0x4b4>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d76:	f7fc fe05 	bl	8001984 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d7e:	f7fc fe01 	bl	8001984 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e064      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d90:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCC_OscConfig+0x452>
 8004d9c:	e05c      	b.n	8004e58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <HAL_RCC_OscConfig+0x4b4>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7fc fdee 	bl	8001984 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dac:	f7fc fdea 	bl	8001984 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e04d      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbe:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_RCC_OscConfig+0x4ac>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x480>
 8004dca:	e045      	b.n	8004e58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d107      	bne.n	8004de4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e040      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40007000 	.word	0x40007000
 8004de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004de4:	4b1f      	ldr	r3, [pc, #124]	; (8004e64 <HAL_RCC_OscConfig+0x538>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d030      	beq.n	8004e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d129      	bne.n	8004e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d122      	bne.n	8004e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e14:	4013      	ands	r3, r2
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d119      	bne.n	8004e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2a:	085b      	lsrs	r3, r3, #1
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d10f      	bne.n	8004e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d107      	bne.n	8004e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e000      	b.n	8004e5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40023800 	.word	0x40023800

08004e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e042      	b.n	8004f00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fc fbb0 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2224      	movs	r2, #36	; 0x24
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68da      	ldr	r2, [r3, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f82b 	bl	8004f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f0c:	b0c0      	sub	sp, #256	; 0x100
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f24:	68d9      	ldr	r1, [r3, #12]
 8004f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	ea40 0301 	orr.w	r3, r0, r1
 8004f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f60:	f021 010c 	bic.w	r1, r1, #12
 8004f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f82:	6999      	ldr	r1, [r3, #24]
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	ea40 0301 	orr.w	r3, r0, r1
 8004f8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4b8f      	ldr	r3, [pc, #572]	; (80051d4 <UART_SetConfig+0x2cc>)
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d005      	beq.n	8004fa8 <UART_SetConfig+0xa0>
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4b8d      	ldr	r3, [pc, #564]	; (80051d8 <UART_SetConfig+0x2d0>)
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d104      	bne.n	8004fb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fa8:	f7ff fa7c 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8004fac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fb0:	e003      	b.n	8004fba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fb2:	f7ff fa63 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8004fb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc4:	f040 810c 	bne.w	80051e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004fda:	4622      	mov	r2, r4
 8004fdc:	462b      	mov	r3, r5
 8004fde:	1891      	adds	r1, r2, r2
 8004fe0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fe2:	415b      	adcs	r3, r3
 8004fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fea:	4621      	mov	r1, r4
 8004fec:	eb12 0801 	adds.w	r8, r2, r1
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	eb43 0901 	adc.w	r9, r3, r1
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800500a:	4690      	mov	r8, r2
 800500c:	4699      	mov	r9, r3
 800500e:	4623      	mov	r3, r4
 8005010:	eb18 0303 	adds.w	r3, r8, r3
 8005014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005018:	462b      	mov	r3, r5
 800501a:	eb49 0303 	adc.w	r3, r9, r3
 800501e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800502e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005036:	460b      	mov	r3, r1
 8005038:	18db      	adds	r3, r3, r3
 800503a:	653b      	str	r3, [r7, #80]	; 0x50
 800503c:	4613      	mov	r3, r2
 800503e:	eb42 0303 	adc.w	r3, r2, r3
 8005042:	657b      	str	r3, [r7, #84]	; 0x54
 8005044:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005048:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800504c:	f7fb fe1c 	bl	8000c88 <__aeabi_uldivmod>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4b61      	ldr	r3, [pc, #388]	; (80051dc <UART_SetConfig+0x2d4>)
 8005056:	fba3 2302 	umull	r2, r3, r3, r2
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	011c      	lsls	r4, r3, #4
 800505e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005062:	2200      	movs	r2, #0
 8005064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005068:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800506c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	1891      	adds	r1, r2, r2
 8005076:	64b9      	str	r1, [r7, #72]	; 0x48
 8005078:	415b      	adcs	r3, r3
 800507a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800507c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005080:	4641      	mov	r1, r8
 8005082:	eb12 0a01 	adds.w	sl, r2, r1
 8005086:	4649      	mov	r1, r9
 8005088:	eb43 0b01 	adc.w	fp, r3, r1
 800508c:	f04f 0200 	mov.w	r2, #0
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005098:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800509c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050a0:	4692      	mov	sl, r2
 80050a2:	469b      	mov	fp, r3
 80050a4:	4643      	mov	r3, r8
 80050a6:	eb1a 0303 	adds.w	r3, sl, r3
 80050aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050ae:	464b      	mov	r3, r9
 80050b0:	eb4b 0303 	adc.w	r3, fp, r3
 80050b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050cc:	460b      	mov	r3, r1
 80050ce:	18db      	adds	r3, r3, r3
 80050d0:	643b      	str	r3, [r7, #64]	; 0x40
 80050d2:	4613      	mov	r3, r2
 80050d4:	eb42 0303 	adc.w	r3, r2, r3
 80050d8:	647b      	str	r3, [r7, #68]	; 0x44
 80050da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050e2:	f7fb fdd1 	bl	8000c88 <__aeabi_uldivmod>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	4b3b      	ldr	r3, [pc, #236]	; (80051dc <UART_SetConfig+0x2d4>)
 80050ee:	fba3 2301 	umull	r2, r3, r3, r1
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	2264      	movs	r2, #100	; 0x64
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	1acb      	subs	r3, r1, r3
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005102:	4b36      	ldr	r3, [pc, #216]	; (80051dc <UART_SetConfig+0x2d4>)
 8005104:	fba3 2302 	umull	r2, r3, r3, r2
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005110:	441c      	add	r4, r3
 8005112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005116:	2200      	movs	r2, #0
 8005118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800511c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005120:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005124:	4642      	mov	r2, r8
 8005126:	464b      	mov	r3, r9
 8005128:	1891      	adds	r1, r2, r2
 800512a:	63b9      	str	r1, [r7, #56]	; 0x38
 800512c:	415b      	adcs	r3, r3
 800512e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005134:	4641      	mov	r1, r8
 8005136:	1851      	adds	r1, r2, r1
 8005138:	6339      	str	r1, [r7, #48]	; 0x30
 800513a:	4649      	mov	r1, r9
 800513c:	414b      	adcs	r3, r1
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
 8005140:	f04f 0200 	mov.w	r2, #0
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800514c:	4659      	mov	r1, fp
 800514e:	00cb      	lsls	r3, r1, #3
 8005150:	4651      	mov	r1, sl
 8005152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005156:	4651      	mov	r1, sl
 8005158:	00ca      	lsls	r2, r1, #3
 800515a:	4610      	mov	r0, r2
 800515c:	4619      	mov	r1, r3
 800515e:	4603      	mov	r3, r0
 8005160:	4642      	mov	r2, r8
 8005162:	189b      	adds	r3, r3, r2
 8005164:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005168:	464b      	mov	r3, r9
 800516a:	460a      	mov	r2, r1
 800516c:	eb42 0303 	adc.w	r3, r2, r3
 8005170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005180:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005188:	460b      	mov	r3, r1
 800518a:	18db      	adds	r3, r3, r3
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
 800518e:	4613      	mov	r3, r2
 8005190:	eb42 0303 	adc.w	r3, r2, r3
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800519a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800519e:	f7fb fd73 	bl	8000c88 <__aeabi_uldivmod>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <UART_SetConfig+0x2d4>)
 80051a8:	fba3 1302 	umull	r1, r3, r3, r2
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	2164      	movs	r1, #100	; 0x64
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	3332      	adds	r3, #50	; 0x32
 80051ba:	4a08      	ldr	r2, [pc, #32]	; (80051dc <UART_SetConfig+0x2d4>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	f003 0207 	and.w	r2, r3, #7
 80051c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4422      	add	r2, r4
 80051ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051d0:	e106      	b.n	80053e0 <UART_SetConfig+0x4d8>
 80051d2:	bf00      	nop
 80051d4:	40011000 	.word	0x40011000
 80051d8:	40011400 	.word	0x40011400
 80051dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e4:	2200      	movs	r2, #0
 80051e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051f2:	4642      	mov	r2, r8
 80051f4:	464b      	mov	r3, r9
 80051f6:	1891      	adds	r1, r2, r2
 80051f8:	6239      	str	r1, [r7, #32]
 80051fa:	415b      	adcs	r3, r3
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
 80051fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005202:	4641      	mov	r1, r8
 8005204:	1854      	adds	r4, r2, r1
 8005206:	4649      	mov	r1, r9
 8005208:	eb43 0501 	adc.w	r5, r3, r1
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	00eb      	lsls	r3, r5, #3
 8005216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800521a:	00e2      	lsls	r2, r4, #3
 800521c:	4614      	mov	r4, r2
 800521e:	461d      	mov	r5, r3
 8005220:	4643      	mov	r3, r8
 8005222:	18e3      	adds	r3, r4, r3
 8005224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005228:	464b      	mov	r3, r9
 800522a:	eb45 0303 	adc.w	r3, r5, r3
 800522e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800523e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800524e:	4629      	mov	r1, r5
 8005250:	008b      	lsls	r3, r1, #2
 8005252:	4621      	mov	r1, r4
 8005254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005258:	4621      	mov	r1, r4
 800525a:	008a      	lsls	r2, r1, #2
 800525c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005260:	f7fb fd12 	bl	8000c88 <__aeabi_uldivmod>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4b60      	ldr	r3, [pc, #384]	; (80053ec <UART_SetConfig+0x4e4>)
 800526a:	fba3 2302 	umull	r2, r3, r3, r2
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	011c      	lsls	r4, r3, #4
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005276:	2200      	movs	r2, #0
 8005278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800527c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005280:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	1891      	adds	r1, r2, r2
 800528a:	61b9      	str	r1, [r7, #24]
 800528c:	415b      	adcs	r3, r3
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005294:	4641      	mov	r1, r8
 8005296:	1851      	adds	r1, r2, r1
 8005298:	6139      	str	r1, [r7, #16]
 800529a:	4649      	mov	r1, r9
 800529c:	414b      	adcs	r3, r1
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052ac:	4659      	mov	r1, fp
 80052ae:	00cb      	lsls	r3, r1, #3
 80052b0:	4651      	mov	r1, sl
 80052b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b6:	4651      	mov	r1, sl
 80052b8:	00ca      	lsls	r2, r1, #3
 80052ba:	4610      	mov	r0, r2
 80052bc:	4619      	mov	r1, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	4642      	mov	r2, r8
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052c8:	464b      	mov	r3, r9
 80052ca:	460a      	mov	r2, r1
 80052cc:	eb42 0303 	adc.w	r3, r2, r3
 80052d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80052de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052ec:	4649      	mov	r1, r9
 80052ee:	008b      	lsls	r3, r1, #2
 80052f0:	4641      	mov	r1, r8
 80052f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052f6:	4641      	mov	r1, r8
 80052f8:	008a      	lsls	r2, r1, #2
 80052fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052fe:	f7fb fcc3 	bl	8000c88 <__aeabi_uldivmod>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4611      	mov	r1, r2
 8005308:	4b38      	ldr	r3, [pc, #224]	; (80053ec <UART_SetConfig+0x4e4>)
 800530a:	fba3 2301 	umull	r2, r3, r3, r1
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	2264      	movs	r2, #100	; 0x64
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	1acb      	subs	r3, r1, r3
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	3332      	adds	r3, #50	; 0x32
 800531c:	4a33      	ldr	r2, [pc, #204]	; (80053ec <UART_SetConfig+0x4e4>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005328:	441c      	add	r4, r3
 800532a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800532e:	2200      	movs	r2, #0
 8005330:	673b      	str	r3, [r7, #112]	; 0x70
 8005332:	677a      	str	r2, [r7, #116]	; 0x74
 8005334:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005338:	4642      	mov	r2, r8
 800533a:	464b      	mov	r3, r9
 800533c:	1891      	adds	r1, r2, r2
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	415b      	adcs	r3, r3
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005348:	4641      	mov	r1, r8
 800534a:	1851      	adds	r1, r2, r1
 800534c:	6039      	str	r1, [r7, #0]
 800534e:	4649      	mov	r1, r9
 8005350:	414b      	adcs	r3, r1
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005360:	4659      	mov	r1, fp
 8005362:	00cb      	lsls	r3, r1, #3
 8005364:	4651      	mov	r1, sl
 8005366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800536a:	4651      	mov	r1, sl
 800536c:	00ca      	lsls	r2, r1, #3
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	4603      	mov	r3, r0
 8005374:	4642      	mov	r2, r8
 8005376:	189b      	adds	r3, r3, r2
 8005378:	66bb      	str	r3, [r7, #104]	; 0x68
 800537a:	464b      	mov	r3, r9
 800537c:	460a      	mov	r2, r1
 800537e:	eb42 0303 	adc.w	r3, r2, r3
 8005382:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	663b      	str	r3, [r7, #96]	; 0x60
 800538e:	667a      	str	r2, [r7, #100]	; 0x64
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800539c:	4649      	mov	r1, r9
 800539e:	008b      	lsls	r3, r1, #2
 80053a0:	4641      	mov	r1, r8
 80053a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053a6:	4641      	mov	r1, r8
 80053a8:	008a      	lsls	r2, r1, #2
 80053aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053ae:	f7fb fc6b 	bl	8000c88 <__aeabi_uldivmod>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <UART_SetConfig+0x4e4>)
 80053b8:	fba3 1302 	umull	r1, r3, r3, r2
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	2164      	movs	r1, #100	; 0x64
 80053c0:	fb01 f303 	mul.w	r3, r1, r3
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	3332      	adds	r3, #50	; 0x32
 80053ca:	4a08      	ldr	r2, [pc, #32]	; (80053ec <UART_SetConfig+0x4e4>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	f003 020f 	and.w	r2, r3, #15
 80053d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4422      	add	r2, r4
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053e6:	46bd      	mov	sp, r7
 80053e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ec:	51eb851f 	.word	0x51eb851f

080053f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	4613      	mov	r3, r2
 80053fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d165      	bne.n	80054d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4a41      	ldr	r2, [pc, #260]	; (800550c <USB_SetTurnaroundTime+0x11c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d906      	bls.n	800541a <USB_SetTurnaroundTime+0x2a>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4a40      	ldr	r2, [pc, #256]	; (8005510 <USB_SetTurnaroundTime+0x120>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d202      	bcs.n	800541a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005414:	230f      	movs	r3, #15
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e062      	b.n	80054e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	4a3c      	ldr	r2, [pc, #240]	; (8005510 <USB_SetTurnaroundTime+0x120>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d306      	bcc.n	8005430 <USB_SetTurnaroundTime+0x40>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4a3b      	ldr	r2, [pc, #236]	; (8005514 <USB_SetTurnaroundTime+0x124>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d202      	bcs.n	8005430 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800542a:	230e      	movs	r3, #14
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e057      	b.n	80054e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4a38      	ldr	r2, [pc, #224]	; (8005514 <USB_SetTurnaroundTime+0x124>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d306      	bcc.n	8005446 <USB_SetTurnaroundTime+0x56>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4a37      	ldr	r2, [pc, #220]	; (8005518 <USB_SetTurnaroundTime+0x128>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d202      	bcs.n	8005446 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005440:	230d      	movs	r3, #13
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e04c      	b.n	80054e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4a33      	ldr	r2, [pc, #204]	; (8005518 <USB_SetTurnaroundTime+0x128>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d306      	bcc.n	800545c <USB_SetTurnaroundTime+0x6c>
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4a32      	ldr	r2, [pc, #200]	; (800551c <USB_SetTurnaroundTime+0x12c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d802      	bhi.n	800545c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005456:	230c      	movs	r3, #12
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	e041      	b.n	80054e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	4a2f      	ldr	r2, [pc, #188]	; (800551c <USB_SetTurnaroundTime+0x12c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d906      	bls.n	8005472 <USB_SetTurnaroundTime+0x82>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4a2e      	ldr	r2, [pc, #184]	; (8005520 <USB_SetTurnaroundTime+0x130>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d802      	bhi.n	8005472 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800546c:	230b      	movs	r3, #11
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e036      	b.n	80054e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4a2a      	ldr	r2, [pc, #168]	; (8005520 <USB_SetTurnaroundTime+0x130>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d906      	bls.n	8005488 <USB_SetTurnaroundTime+0x98>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4a29      	ldr	r2, [pc, #164]	; (8005524 <USB_SetTurnaroundTime+0x134>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d802      	bhi.n	8005488 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005482:	230a      	movs	r3, #10
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	e02b      	b.n	80054e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4a26      	ldr	r2, [pc, #152]	; (8005524 <USB_SetTurnaroundTime+0x134>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d906      	bls.n	800549e <USB_SetTurnaroundTime+0xae>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4a25      	ldr	r2, [pc, #148]	; (8005528 <USB_SetTurnaroundTime+0x138>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d202      	bcs.n	800549e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005498:	2309      	movs	r3, #9
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e020      	b.n	80054e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4a21      	ldr	r2, [pc, #132]	; (8005528 <USB_SetTurnaroundTime+0x138>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d306      	bcc.n	80054b4 <USB_SetTurnaroundTime+0xc4>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4a20      	ldr	r2, [pc, #128]	; (800552c <USB_SetTurnaroundTime+0x13c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d802      	bhi.n	80054b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054ae:	2308      	movs	r3, #8
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	e015      	b.n	80054e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4a1d      	ldr	r2, [pc, #116]	; (800552c <USB_SetTurnaroundTime+0x13c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d906      	bls.n	80054ca <USB_SetTurnaroundTime+0xda>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <USB_SetTurnaroundTime+0x140>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d202      	bcs.n	80054ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054c4:	2307      	movs	r3, #7
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e00a      	b.n	80054e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054ca:	2306      	movs	r3, #6
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	e007      	b.n	80054e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d102      	bne.n	80054dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054d6:	2309      	movs	r3, #9
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	e001      	b.n	80054e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054dc:	2309      	movs	r3, #9
 80054de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	029b      	lsls	r3, r3, #10
 80054f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	00d8acbf 	.word	0x00d8acbf
 8005510:	00e4e1c0 	.word	0x00e4e1c0
 8005514:	00f42400 	.word	0x00f42400
 8005518:	01067380 	.word	0x01067380
 800551c:	011a499f 	.word	0x011a499f
 8005520:	01312cff 	.word	0x01312cff
 8005524:	014ca43f 	.word	0x014ca43f
 8005528:	016e3600 	.word	0x016e3600
 800552c:	01a6ab1f 	.word	0x01a6ab1f
 8005530:	01e84800 	.word	0x01e84800

08005534 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3301      	adds	r3, #1
 8005546:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800554e:	d901      	bls.n	8005554 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e01b      	b.n	800558c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	daf2      	bge.n	8005542 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	019b      	lsls	r3, r3, #6
 8005564:	f043 0220 	orr.w	r2, r3, #32
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005578:	d901      	bls.n	800557e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e006      	b.n	800558c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b20      	cmp	r3, #32
 8005588:	d0f0      	beq.n	800556c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0306 	and.w	r3, r3, #6
 80055b0:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80055b8:	2300      	movs	r3, #0
 80055ba:	75fb      	strb	r3, [r7, #23]
 80055bc:	e00a      	b.n	80055d4 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d002      	beq.n	80055ca <USB_GetDevSpeed+0x32>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d102      	bne.n	80055d0 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80055ca:	2302      	movs	r3, #2
 80055cc:	75fb      	strb	r3, [r7, #23]
 80055ce:	e001      	b.n	80055d4 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80055d0:	230f      	movs	r3, #15
 80055d2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80055d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b085      	sub	sp, #20
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d13a      	bne.n	8005674 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005604:	69da      	ldr	r2, [r3, #28]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	2101      	movs	r1, #1
 8005610:	fa01 f303 	lsl.w	r3, r1, r3
 8005614:	b29b      	uxth	r3, r3
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800561c:	4313      	orrs	r3, r2
 800561e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d155      	bne.n	80056e2 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	791b      	ldrb	r3, [r3, #4]
 8005650:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005652:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	059b      	lsls	r3, r3, #22
 8005658:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800565a:	4313      	orrs	r3, r2
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e036      	b.n	80056e2 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	2101      	movs	r1, #1
 8005686:	fa01 f303 	lsl.w	r3, r1, r3
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	68f9      	ldr	r1, [r7, #12]
 800568e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005692:	4313      	orrs	r3, r2
 8005694:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d11a      	bne.n	80056e2 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	791b      	ldrb	r3, [r3, #4]
 80056c6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056c8:	430b      	orrs	r3, r1
 80056ca:	4313      	orrs	r3, r2
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e0:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	785b      	ldrb	r3, [r3, #1]
 800570c:	2b01      	cmp	r3, #1
 800570e:	f040 817a 	bne.w	8005a06 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d132      	bne.n	8005780 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	0151      	lsls	r1, r2, #5
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	440a      	add	r2, r1
 8005730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005734:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005738:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800573c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005758:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800575c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	0151      	lsls	r1, r2, #5
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	440a      	add	r2, r1
 8005774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005778:	0cdb      	lsrs	r3, r3, #19
 800577a:	04db      	lsls	r3, r3, #19
 800577c:	6113      	str	r3, [r2, #16]
 800577e:	e092      	b.n	80058a6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579a:	0cdb      	lsrs	r3, r3, #19
 800579c:	04db      	lsls	r3, r3, #19
 800579e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057c2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d11a      	bne.n	8005800 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d903      	bls.n	80057de <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057fc:	6113      	str	r3, [r2, #16]
 80057fe:	e01b      	b.n	8005838 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6919      	ldr	r1, [r3, #16]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	440b      	add	r3, r1
 8005818:	1e59      	subs	r1, r3, #1
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005822:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005824:	4ba2      	ldr	r3, [pc, #648]	; (8005ab0 <USB_EPStartXfer+0x3c0>)
 8005826:	400b      	ands	r3, r1
 8005828:	69b9      	ldr	r1, [r7, #24]
 800582a:	0148      	lsls	r0, r1, #5
 800582c:	69f9      	ldr	r1, [r7, #28]
 800582e:	4401      	add	r1, r0
 8005830:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005834:	4313      	orrs	r3, r2
 8005836:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	691a      	ldr	r2, [r3, #16]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800584e:	69b9      	ldr	r1, [r7, #24]
 8005850:	0148      	lsls	r0, r1, #5
 8005852:	69f9      	ldr	r1, [r7, #28]
 8005854:	4401      	add	r1, r0
 8005856:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800585a:	4313      	orrs	r3, r2
 800585c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	791b      	ldrb	r3, [r3, #4]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d11f      	bne.n	80058a6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	0151      	lsls	r1, r2, #5
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	440a      	add	r2, r1
 800587c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005880:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005884:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d14b      	bne.n	8005944 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c0:	461a      	mov	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	791b      	ldrb	r3, [r3, #4]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d128      	bne.n	8005922 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d110      	bne.n	8005902 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	e00f      	b.n	8005922 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005920:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	440a      	add	r2, r1
 8005938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	e165      	b.n	8005c10 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	0151      	lsls	r1, r2, #5
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	440a      	add	r2, r1
 800595a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005962:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	791b      	ldrb	r3, [r3, #4]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d015      	beq.n	8005998 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 814d 	beq.w	8005c10 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	2101      	movs	r1, #1
 8005988:	fa01 f303 	lsl.w	r3, r1, r3
 800598c:	69f9      	ldr	r1, [r7, #28]
 800598e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005992:	4313      	orrs	r3, r2
 8005994:	634b      	str	r3, [r1, #52]	; 0x34
 8005996:	e13b      	b.n	8005c10 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d110      	bne.n	80059ca <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	e00f      	b.n	80059ea <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	68d9      	ldr	r1, [r3, #12]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	b298      	uxth	r0, r3
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	4603      	mov	r3, r0
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 f9b8 	bl	8005d74 <USB_WritePacket>
 8005a04:	e104      	b.n	8005c10 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a20:	0cdb      	lsrs	r3, r3, #19
 8005a22:	04db      	lsls	r3, r3, #19
 8005a24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	0151      	lsls	r1, r2, #5
 8005a38:	69fa      	ldr	r2, [r7, #28]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a48:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d131      	bne.n	8005ab4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a7e:	69b9      	ldr	r1, [r7, #24]
 8005a80:	0148      	lsls	r0, r1, #5
 8005a82:	69f9      	ldr	r1, [r7, #28]
 8005a84:	4401      	add	r1, r0
 8005a86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aac:	6113      	str	r3, [r2, #16]
 8005aae:	e061      	b.n	8005b74 <USB_EPStartXfer+0x484>
 8005ab0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d123      	bne.n	8005b04 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad2:	69b9      	ldr	r1, [r7, #24]
 8005ad4:	0148      	lsls	r0, r1, #5
 8005ad6:	69f9      	ldr	r1, [r7, #28]
 8005ad8:	4401      	add	r1, r0
 8005ada:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	0151      	lsls	r1, r2, #5
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	440a      	add	r2, r1
 8005af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b00:	6113      	str	r3, [r2, #16]
 8005b02:	e037      	b.n	8005b74 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	1e5a      	subs	r2, r3, #1
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b18:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	8afa      	ldrh	r2, [r7, #22]
 8005b20:	fb03 f202 	mul.w	r2, r3, r2
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	8afb      	ldrh	r3, [r7, #22]
 8005b38:	04d9      	lsls	r1, r3, #19
 8005b3a:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <USB_EPStartXfer+0x52c>)
 8005b3c:	400b      	ands	r3, r1
 8005b3e:	69b9      	ldr	r1, [r7, #24]
 8005b40:	0148      	lsls	r0, r1, #5
 8005b42:	69f9      	ldr	r1, [r7, #28]
 8005b44:	4401      	add	r1, r0
 8005b46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b64:	69b9      	ldr	r1, [r7, #24]
 8005b66:	0148      	lsls	r0, r1, #5
 8005b68:	69f9      	ldr	r1, [r7, #28]
 8005b6a:	4401      	add	r1, r0
 8005b6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b70:	4313      	orrs	r3, r2
 8005b72:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005b74:	79fb      	ldrb	r3, [r7, #7]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d10d      	bne.n	8005b96 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	68d9      	ldr	r1, [r3, #12]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b92:	460a      	mov	r2, r1
 8005b94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	791b      	ldrb	r3, [r3, #4]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d128      	bne.n	8005bf0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d110      	bne.n	8005bd0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	0151      	lsls	r1, r2, #5
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	440a      	add	r2, r1
 8005bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	e00f      	b.n	8005bf0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	1ff80000 	.word	0x1ff80000

08005c20 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d14a      	bne.n	8005cd4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c56:	f040 8086 	bne.w	8005d66 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	0151      	lsls	r1, r2, #5
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	440a      	add	r2, r1
 8005c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c7c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	7812      	ldrb	r2, [r2, #0]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ca0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d902      	bls.n	8005cb8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
          break;
 8005cb6:	e056      	b.n	8005d66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd0:	d0e7      	beq.n	8005ca2 <USB_EPStopXfer+0x82>
 8005cd2:	e048      	b.n	8005d66 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cec:	d13b      	bne.n	8005d66 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	7812      	ldrb	r2, [r2, #0]
 8005d02:	0151      	lsls	r1, r2, #5
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	440a      	add	r2, r1
 8005d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d10:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	7812      	ldrb	r2, [r2, #0]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d902      	bls.n	8005d4c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	75fb      	strb	r3, [r7, #23]
          break;
 8005d4a:	e00c      	b.n	8005d66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d64:	d0e7      	beq.n	8005d36 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b089      	sub	sp, #36	; 0x24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4611      	mov	r1, r2
 8005d80:	461a      	mov	r2, r3
 8005d82:	460b      	mov	r3, r1
 8005d84:	71fb      	strb	r3, [r7, #7]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d123      	bne.n	8005de2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d9a:	88bb      	ldrh	r3, [r7, #4]
 8005d9c:	3303      	adds	r3, #3
 8005d9e:	089b      	lsrs	r3, r3, #2
 8005da0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005da2:	2300      	movs	r3, #0
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	e018      	b.n	8005dda <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	031a      	lsls	r2, r3, #12
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db4:	461a      	mov	r2, r3
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d3e2      	bcc.n	8005da8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3724      	adds	r7, #36	; 0x24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b08b      	sub	sp, #44	; 0x2c
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e06:	88fb      	ldrh	r3, [r7, #6]
 8005e08:	089b      	lsrs	r3, r3, #2
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e16:	2300      	movs	r3, #0
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	e014      	b.n	8005e46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	3301      	adds	r3, #1
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	3301      	adds	r3, #1
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	3301      	adds	r3, #1
 8005e44:	623b      	str	r3, [r7, #32]
 8005e46:	6a3a      	ldr	r2, [r7, #32]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d3e6      	bcc.n	8005e1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e4e:	8bfb      	ldrh	r3, [r7, #30]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01e      	beq.n	8005e92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f107 0310 	add.w	r3, r7, #16
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	701a      	strb	r2, [r3, #0]
      i++;
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	3301      	adds	r3, #1
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e86:	8bfb      	ldrh	r3, [r7, #30]
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e8c:	8bfb      	ldrh	r3, [r7, #30]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1ea      	bne.n	8005e68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	372c      	adds	r7, #44	; 0x2c
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d12c      	bne.n	8005f16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	db12      	blt.n	8005ef4 <USB_EPSetStall+0x54>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00f      	beq.n	8005ef4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ef2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	e02b      	b.n	8005f6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	db12      	blt.n	8005f4e <USB_EPSetStall+0xae>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00f      	beq.n	8005f4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d128      	bne.n	8005fea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	791b      	ldrb	r3, [r3, #4]
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d003      	beq.n	8005fc8 <USB_EPClearStall+0x4c>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	791b      	ldrb	r3, [r3, #4]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d138      	bne.n	800603a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe6:	6013      	str	r3, [r2, #0]
 8005fe8:	e027      	b.n	800603a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	0151      	lsls	r1, r2, #5
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	440a      	add	r2, r1
 8006000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006004:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006008:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	791b      	ldrb	r3, [r3, #4]
 800600e:	2b03      	cmp	r3, #3
 8006010:	d003      	beq.n	800601a <USB_EPClearStall+0x9e>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	791b      	ldrb	r3, [r3, #4]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d10f      	bne.n	800603a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006038:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006066:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800606a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800607c:	68f9      	ldr	r1, [r7, #12]
 800607e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006082:	4313      	orrs	r3, r2
 8006084:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4013      	ands	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060ac:	68fb      	ldr	r3, [r7, #12]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	4013      	ands	r3, r2
 80060dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	0c1b      	lsrs	r3, r3, #16
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	4013      	ands	r3, r2
 8006110:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	b29b      	uxth	r3, r3
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4013      	ands	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006150:	68bb      	ldr	r3, [r7, #8]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800615e:	b480      	push	{r7}
 8006160:	b087      	sub	sp, #28
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006180:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	fa22 f303 	lsr.w	r3, r2, r3
 800618e:	01db      	lsls	r3, r3, #7
 8006190:	b2db      	uxtb	r3, r3
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4013      	ands	r3, r2
 80061aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061ac:	68bb      	ldr	r3, [r7, #8]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0301 	and.w	r3, r3, #1
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80061f4:	f023 0307 	bic.w	r3, r3, #7
 80061f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	460b      	mov	r3, r1
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	333c      	adds	r3, #60	; 0x3c
 8006232:	3304      	adds	r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	4a26      	ldr	r2, [pc, #152]	; (80062d4 <USB_EP0_OutStart+0xb8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d90a      	bls.n	8006256 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800624c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006250:	d101      	bne.n	8006256 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e037      	b.n	80062c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	461a      	mov	r2, r3
 800625e:	2300      	movs	r3, #0
 8006260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006284:	f043 0318 	orr.w	r3, r3, #24
 8006288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006298:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800629c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d10f      	bne.n	80062c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	461a      	mov	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	4f54300a 	.word	0x4f54300a

080062d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	32b0      	adds	r2, #176	; 0xb0
 80062ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e008      	b.n	8006310 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	32b0      	adds	r2, #176	; 0xb0
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006334:	2301      	movs	r3, #1
 8006336:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800633e:	2303      	movs	r3, #3
 8006340:	e025      	b.n	800638e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006348:	2b00      	cmp	r3, #0
 800634a:	d11f      	bne.n	800638c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2201      	movs	r2, #1
 8006350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006354:	4b10      	ldr	r3, [pc, #64]	; (8006398 <USBD_CDC_TransmitPacket+0x7c>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	f003 020f 	and.w	r2, r3, #15
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4403      	add	r3, r0
 800636e:	3318      	adds	r3, #24
 8006370:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <USBD_CDC_TransmitPacket+0x7c>)
 8006374:	7819      	ldrb	r1, [r3, #0]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 fbaf 	bl	8007ae6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000009 	.word	0x20000009

0800639c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d009      	beq.n	80063e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	4611      	mov	r1, r2
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
 80063dc:	4603      	mov	r3, r0
 80063de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	460b      	mov	r3, r1
 80063f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	78fa      	ldrb	r2, [r7, #3]
 8006404:	4611      	mov	r1, r2
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	4798      	blx	r3
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006410:	2303      	movs	r3, #3
 8006412:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	f001 f8e2 	bl	80075fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006444:	461a      	mov	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006452:	f003 031f 	and.w	r3, r3, #31
 8006456:	2b02      	cmp	r3, #2
 8006458:	d01a      	beq.n	8006490 <USBD_LL_SetupStage+0x72>
 800645a:	2b02      	cmp	r3, #2
 800645c:	d822      	bhi.n	80064a4 <USBD_LL_SetupStage+0x86>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <USBD_LL_SetupStage+0x4a>
 8006462:	2b01      	cmp	r3, #1
 8006464:	d00a      	beq.n	800647c <USBD_LL_SetupStage+0x5e>
 8006466:	e01d      	b.n	80064a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fb0f 	bl	8006a94 <USBD_StdDevReq>
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]
      break;
 800647a:	e020      	b.n	80064be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fb77 	bl	8006b78 <USBD_StdItfReq>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]
      break;
 800648e:	e016      	b.n	80064be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fbd9 	bl	8006c50 <USBD_StdEPReq>
 800649e:	4603      	mov	r3, r0
 80064a0:	73fb      	strb	r3, [r7, #15]
      break;
 80064a2:	e00c      	b.n	80064be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f001 fa8e 	bl	80079d4 <USBD_LL_StallEP>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
      break;
 80064bc:	bf00      	nop
  }

  return ret;
 80064be:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	460b      	mov	r3, r1
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80064da:	7afb      	ldrb	r3, [r7, #11]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d16e      	bne.n	80065be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	f040 8098 	bne.w	8006624 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d913      	bls.n	8006528 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	1ad2      	subs	r2, r2, r3
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	4293      	cmp	r3, r2
 8006518:	bf28      	it	cs
 800651a:	4613      	movcs	r3, r2
 800651c:	461a      	mov	r2, r3
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f001 f8e1 	bl	80076e8 <USBD_CtlContinueRx>
 8006526:	e07d      	b.n	8006624 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2b02      	cmp	r3, #2
 8006534:	d014      	beq.n	8006560 <USBD_LL_DataOutStage+0x98>
 8006536:	2b02      	cmp	r3, #2
 8006538:	d81d      	bhi.n	8006576 <USBD_LL_DataOutStage+0xae>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <USBD_LL_DataOutStage+0x7c>
 800653e:	2b01      	cmp	r3, #1
 8006540:	d003      	beq.n	800654a <USBD_LL_DataOutStage+0x82>
 8006542:	e018      	b.n	8006576 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	75bb      	strb	r3, [r7, #22]
            break;
 8006548:	e018      	b.n	800657c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006550:	b2db      	uxtb	r3, r3
 8006552:	4619      	mov	r1, r3
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fa64 	bl	8006a22 <USBD_CoreFindIF>
 800655a:	4603      	mov	r3, r0
 800655c:	75bb      	strb	r3, [r7, #22]
            break;
 800655e:	e00d      	b.n	800657c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006566:	b2db      	uxtb	r3, r3
 8006568:	4619      	mov	r1, r3
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 fa66 	bl	8006a3c <USBD_CoreFindEP>
 8006570:	4603      	mov	r3, r0
 8006572:	75bb      	strb	r3, [r7, #22]
            break;
 8006574:	e002      	b.n	800657c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	75bb      	strb	r3, [r7, #22]
            break;
 800657a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800657c:	7dbb      	ldrb	r3, [r7, #22]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d119      	bne.n	80065b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b03      	cmp	r3, #3
 800658c:	d113      	bne.n	80065b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800658e:	7dba      	ldrb	r2, [r7, #22]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	32ae      	adds	r2, #174	; 0xae
 8006594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00b      	beq.n	80065b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800659e:	7dba      	ldrb	r2, [r7, #22]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80065a6:	7dba      	ldrb	r2, [r7, #22]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	32ae      	adds	r2, #174	; 0xae
 80065ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f001 f8a7 	bl	800770a <USBD_CtlSendStatus>
 80065bc:	e032      	b.n	8006624 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80065be:	7afb      	ldrb	r3, [r7, #11]
 80065c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	4619      	mov	r1, r3
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 fa37 	bl	8006a3c <USBD_CoreFindEP>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065d2:	7dbb      	ldrb	r3, [r7, #22]
 80065d4:	2bff      	cmp	r3, #255	; 0xff
 80065d6:	d025      	beq.n	8006624 <USBD_LL_DataOutStage+0x15c>
 80065d8:	7dbb      	ldrb	r3, [r7, #22]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d122      	bne.n	8006624 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d117      	bne.n	800661a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065ea:	7dba      	ldrb	r2, [r7, #22]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	32ae      	adds	r2, #174	; 0xae
 80065f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00f      	beq.n	800661a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80065fa:	7dba      	ldrb	r2, [r7, #22]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006602:	7dba      	ldrb	r2, [r7, #22]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	32ae      	adds	r2, #174	; 0xae
 8006608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	7afa      	ldrb	r2, [r7, #11]
 8006610:	4611      	mov	r1, r2
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	4798      	blx	r3
 8006616:	4603      	mov	r3, r0
 8006618:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800661a:	7dfb      	ldrb	r3, [r7, #23]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	e000      	b.n	8006626 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b086      	sub	sp, #24
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	460b      	mov	r3, r1
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800663c:	7afb      	ldrb	r3, [r7, #11]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d16f      	bne.n	8006722 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3314      	adds	r3, #20
 8006646:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800664e:	2b02      	cmp	r3, #2
 8006650:	d15a      	bne.n	8006708 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	429a      	cmp	r2, r3
 800665c:	d914      	bls.n	8006688 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	1ad2      	subs	r2, r2, r3
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	461a      	mov	r2, r3
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f001 f826 	bl	80076c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800667a:	2300      	movs	r3, #0
 800667c:	2200      	movs	r2, #0
 800667e:	2100      	movs	r1, #0
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f001 fa51 	bl	8007b28 <USBD_LL_PrepareReceive>
 8006686:	e03f      	b.n	8006708 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	429a      	cmp	r2, r3
 8006692:	d11c      	bne.n	80066ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800669c:	429a      	cmp	r2, r3
 800669e:	d316      	bcc.n	80066ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d20f      	bcs.n	80066ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066ae:	2200      	movs	r2, #0
 80066b0:	2100      	movs	r1, #0
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f001 f807 	bl	80076c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066c0:	2300      	movs	r3, #0
 80066c2:	2200      	movs	r2, #0
 80066c4:	2100      	movs	r1, #0
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f001 fa2e 	bl	8007b28 <USBD_LL_PrepareReceive>
 80066cc:	e01c      	b.n	8006708 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d10f      	bne.n	80066fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066fa:	2180      	movs	r1, #128	; 0x80
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f001 f969 	bl	80079d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f001 f814 	bl	8007730 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d03a      	beq.n	8006788 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7ff fe42 	bl	800639c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006720:	e032      	b.n	8006788 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006722:	7afb      	ldrb	r3, [r7, #11]
 8006724:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006728:	b2db      	uxtb	r3, r3
 800672a:	4619      	mov	r1, r3
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f985 	bl	8006a3c <USBD_CoreFindEP>
 8006732:	4603      	mov	r3, r0
 8006734:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	2bff      	cmp	r3, #255	; 0xff
 800673a:	d025      	beq.n	8006788 <USBD_LL_DataInStage+0x15a>
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d122      	bne.n	8006788 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b03      	cmp	r3, #3
 800674c:	d11c      	bne.n	8006788 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800674e:	7dfa      	ldrb	r2, [r7, #23]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	32ae      	adds	r2, #174	; 0xae
 8006754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d014      	beq.n	8006788 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800675e:	7dfa      	ldrb	r2, [r7, #23]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006766:	7dfa      	ldrb	r2, [r7, #23]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	32ae      	adds	r2, #174	; 0xae
 800676c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	7afa      	ldrb	r2, [r7, #11]
 8006774:	4611      	mov	r1, r2
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	4798      	blx	r3
 800677a:	4603      	mov	r3, r0
 800677c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800677e:	7dbb      	ldrb	r3, [r7, #22]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006784:	7dbb      	ldrb	r3, [r7, #22]
 8006786:	e000      	b.n	800678a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3718      	adds	r7, #24
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d014      	beq.n	80067f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00e      	beq.n	80067f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6852      	ldr	r2, [r2, #4]
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	4611      	mov	r1, r2
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80067f4:	2303      	movs	r3, #3
 80067f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067f8:	2340      	movs	r3, #64	; 0x40
 80067fa:	2200      	movs	r2, #0
 80067fc:	2100      	movs	r1, #0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 f8c2 	bl	8007988 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2240      	movs	r2, #64	; 0x40
 8006810:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006814:	2340      	movs	r3, #64	; 0x40
 8006816:	2200      	movs	r2, #0
 8006818:	2180      	movs	r1, #128	; 0x80
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 f8b4 	bl	8007988 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2240      	movs	r2, #64	; 0x40
 800682a:	621a      	str	r2, [r3, #32]

  return ret;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b04      	cmp	r3, #4
 8006868:	d006      	beq.n	8006878 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006870:	b2da      	uxtb	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2204      	movs	r2, #4
 800687c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d106      	bne.n	80068b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d110      	bne.n	80068f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	32ae      	adds	r2, #174	; 0xae
 8006914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	e01c      	b.n	800695a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b03      	cmp	r3, #3
 800692a:	d115      	bne.n	8006958 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	32ae      	adds	r2, #174	; 0xae
 8006936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00b      	beq.n	8006958 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	32ae      	adds	r2, #174	; 0xae
 800694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	4611      	mov	r1, r2
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	460b      	mov	r3, r1
 800696c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	32ae      	adds	r2, #174	; 0xae
 8006978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006980:	2303      	movs	r3, #3
 8006982:	e01c      	b.n	80069be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b03      	cmp	r3, #3
 800698e:	d115      	bne.n	80069bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32ae      	adds	r2, #174	; 0xae
 800699a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	32ae      	adds	r2, #174	; 0xae
 80069ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	78fa      	ldrb	r2, [r7, #3]
 80069b6:	4611      	mov	r1, r2
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00e      	beq.n	8006a18 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6852      	ldr	r2, [r2, #4]
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	4611      	mov	r1, r2
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006a14:	2303      	movs	r3, #3
 8006a16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a2e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b087      	sub	sp, #28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a74:	8a3b      	ldrh	r3, [r7, #16]
 8006a76:	021b      	lsls	r3, r3, #8
 8006a78:	b21a      	sxth	r2, r3
 8006a7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	b21b      	sxth	r3, r3
 8006a82:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a84:	89fb      	ldrh	r3, [r7, #14]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
	...

08006a94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aaa:	2b40      	cmp	r3, #64	; 0x40
 8006aac:	d005      	beq.n	8006aba <USBD_StdDevReq+0x26>
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d857      	bhi.n	8006b62 <USBD_StdDevReq+0xce>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00f      	beq.n	8006ad6 <USBD_StdDevReq+0x42>
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d153      	bne.n	8006b62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	32ae      	adds	r2, #174	; 0xae
 8006ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad4:	e04a      	b.n	8006b6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	2b09      	cmp	r3, #9
 8006adc:	d83b      	bhi.n	8006b56 <USBD_StdDevReq+0xc2>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <USBD_StdDevReq+0x50>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006b39 	.word	0x08006b39
 8006ae8:	08006b4d 	.word	0x08006b4d
 8006aec:	08006b57 	.word	0x08006b57
 8006af0:	08006b43 	.word	0x08006b43
 8006af4:	08006b57 	.word	0x08006b57
 8006af8:	08006b17 	.word	0x08006b17
 8006afc:	08006b0d 	.word	0x08006b0d
 8006b00:	08006b57 	.word	0x08006b57
 8006b04:	08006b2f 	.word	0x08006b2f
 8006b08:	08006b21 	.word	0x08006b21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa3c 	bl	8006f8c <USBD_GetDescriptor>
          break;
 8006b14:	e024      	b.n	8006b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fbcb 	bl	80072b4 <USBD_SetAddress>
          break;
 8006b1e:	e01f      	b.n	8006b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fc0a 	bl	800733c <USBD_SetConfig>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]
          break;
 8006b2c:	e018      	b.n	8006b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fcad 	bl	8007490 <USBD_GetConfig>
          break;
 8006b36:	e013      	b.n	8006b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fcde 	bl	80074fc <USBD_GetStatus>
          break;
 8006b40:	e00e      	b.n	8006b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fd0d 	bl	8007564 <USBD_SetFeature>
          break;
 8006b4a:	e009      	b.n	8006b60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fd31 	bl	80075b6 <USBD_ClrFeature>
          break;
 8006b54:	e004      	b.n	8006b60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fd88 	bl	800766e <USBD_CtlError>
          break;
 8006b5e:	bf00      	nop
      }
      break;
 8006b60:	e004      	b.n	8006b6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fd82 	bl	800766e <USBD_CtlError>
      break;
 8006b6a:	bf00      	nop
  }

  return ret;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop

08006b78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b8e:	2b40      	cmp	r3, #64	; 0x40
 8006b90:	d005      	beq.n	8006b9e <USBD_StdItfReq+0x26>
 8006b92:	2b40      	cmp	r3, #64	; 0x40
 8006b94:	d852      	bhi.n	8006c3c <USBD_StdItfReq+0xc4>
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <USBD_StdItfReq+0x26>
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d14e      	bne.n	8006c3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d840      	bhi.n	8006c2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	889b      	ldrh	r3, [r3, #4]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d836      	bhi.n	8006c24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	889b      	ldrh	r3, [r3, #4]
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7ff ff2f 	bl	8006a22 <USBD_CoreFindIF>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	2bff      	cmp	r3, #255	; 0xff
 8006bcc:	d01d      	beq.n	8006c0a <USBD_StdItfReq+0x92>
 8006bce:	7bbb      	ldrb	r3, [r7, #14]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d11a      	bne.n	8006c0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006bd4:	7bba      	ldrb	r2, [r7, #14]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	32ae      	adds	r2, #174	; 0xae
 8006bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00f      	beq.n	8006c04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006be4:	7bba      	ldrb	r2, [r7, #14]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006bec:	7bba      	ldrb	r2, [r7, #14]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	32ae      	adds	r2, #174	; 0xae
 8006bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c02:	e004      	b.n	8006c0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c04:	2303      	movs	r3, #3
 8006c06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c08:	e001      	b.n	8006c0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	88db      	ldrh	r3, [r3, #6]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d110      	bne.n	8006c38 <USBD_StdItfReq+0xc0>
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10d      	bne.n	8006c38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fd74 	bl	800770a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c22:	e009      	b.n	8006c38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fd21 	bl	800766e <USBD_CtlError>
          break;
 8006c2c:	e004      	b.n	8006c38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fd1c 	bl	800766e <USBD_CtlError>
          break;
 8006c36:	e000      	b.n	8006c3a <USBD_StdItfReq+0xc2>
          break;
 8006c38:	bf00      	nop
      }
      break;
 8006c3a:	e004      	b.n	8006c46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fd15 	bl	800766e <USBD_CtlError>
      break;
 8006c44:	bf00      	nop
  }

  return ret;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	889b      	ldrh	r3, [r3, #4]
 8006c62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c6c:	2b40      	cmp	r3, #64	; 0x40
 8006c6e:	d007      	beq.n	8006c80 <USBD_StdEPReq+0x30>
 8006c70:	2b40      	cmp	r3, #64	; 0x40
 8006c72:	f200 817f 	bhi.w	8006f74 <USBD_StdEPReq+0x324>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d02a      	beq.n	8006cd0 <USBD_StdEPReq+0x80>
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	f040 817a 	bne.w	8006f74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff fed9 	bl	8006a3c <USBD_CoreFindEP>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c8e:	7b7b      	ldrb	r3, [r7, #13]
 8006c90:	2bff      	cmp	r3, #255	; 0xff
 8006c92:	f000 8174 	beq.w	8006f7e <USBD_StdEPReq+0x32e>
 8006c96:	7b7b      	ldrb	r3, [r7, #13]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f040 8170 	bne.w	8006f7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006c9e:	7b7a      	ldrb	r2, [r7, #13]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006ca6:	7b7a      	ldrb	r2, [r7, #13]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	32ae      	adds	r2, #174	; 0xae
 8006cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f000 8163 	beq.w	8006f7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006cb8:	7b7a      	ldrb	r2, [r7, #13]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	32ae      	adds	r2, #174	; 0xae
 8006cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
 8006cca:	4603      	mov	r3, r0
 8006ccc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cce:	e156      	b.n	8006f7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d008      	beq.n	8006cea <USBD_StdEPReq+0x9a>
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	f300 8145 	bgt.w	8006f68 <USBD_StdEPReq+0x318>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 809b 	beq.w	8006e1a <USBD_StdEPReq+0x1ca>
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d03c      	beq.n	8006d62 <USBD_StdEPReq+0x112>
 8006ce8:	e13e      	b.n	8006f68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d002      	beq.n	8006cfc <USBD_StdEPReq+0xac>
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d016      	beq.n	8006d28 <USBD_StdEPReq+0xd8>
 8006cfa:	e02c      	b.n	8006d56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <USBD_StdEPReq+0xce>
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	2b80      	cmp	r3, #128	; 0x80
 8006d06:	d00a      	beq.n	8006d1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fe61 	bl	80079d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d12:	2180      	movs	r1, #128	; 0x80
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fe5d 	bl	80079d4 <USBD_LL_StallEP>
 8006d1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d1c:	e020      	b.n	8006d60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fca4 	bl	800766e <USBD_CtlError>
              break;
 8006d26:	e01b      	b.n	8006d60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	885b      	ldrh	r3, [r3, #2]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10e      	bne.n	8006d4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00b      	beq.n	8006d4e <USBD_StdEPReq+0xfe>
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b80      	cmp	r3, #128	; 0x80
 8006d3a:	d008      	beq.n	8006d4e <USBD_StdEPReq+0xfe>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	88db      	ldrh	r3, [r3, #6]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fe43 	bl	80079d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fcdb 	bl	800770a <USBD_CtlSendStatus>

              break;
 8006d54:	e004      	b.n	8006d60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fc88 	bl	800766e <USBD_CtlError>
              break;
 8006d5e:	bf00      	nop
          }
          break;
 8006d60:	e107      	b.n	8006f72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d002      	beq.n	8006d74 <USBD_StdEPReq+0x124>
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d016      	beq.n	8006da0 <USBD_StdEPReq+0x150>
 8006d72:	e04b      	b.n	8006e0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00d      	beq.n	8006d96 <USBD_StdEPReq+0x146>
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	2b80      	cmp	r3, #128	; 0x80
 8006d7e:	d00a      	beq.n	8006d96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fe25 	bl	80079d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d8a:	2180      	movs	r1, #128	; 0x80
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fe21 	bl	80079d4 <USBD_LL_StallEP>
 8006d92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d94:	e040      	b.n	8006e18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fc68 	bl	800766e <USBD_CtlError>
              break;
 8006d9e:	e03b      	b.n	8006e18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	885b      	ldrh	r3, [r3, #2]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d136      	bne.n	8006e16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d004      	beq.n	8006dbc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fe2b 	bl	8007a12 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fca4 	bl	800770a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7ff fe38 	bl	8006a3c <USBD_CoreFindEP>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dd0:	7b7b      	ldrb	r3, [r7, #13]
 8006dd2:	2bff      	cmp	r3, #255	; 0xff
 8006dd4:	d01f      	beq.n	8006e16 <USBD_StdEPReq+0x1c6>
 8006dd6:	7b7b      	ldrb	r3, [r7, #13]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d11c      	bne.n	8006e16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ddc:	7b7a      	ldrb	r2, [r7, #13]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006de4:	7b7a      	ldrb	r2, [r7, #13]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32ae      	adds	r2, #174	; 0xae
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d010      	beq.n	8006e16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006df4:	7b7a      	ldrb	r2, [r7, #13]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	32ae      	adds	r2, #174	; 0xae
 8006dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	4798      	blx	r3
 8006e06:	4603      	mov	r3, r0
 8006e08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e0a:	e004      	b.n	8006e16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fc2d 	bl	800766e <USBD_CtlError>
              break;
 8006e14:	e000      	b.n	8006e18 <USBD_StdEPReq+0x1c8>
              break;
 8006e16:	bf00      	nop
          }
          break;
 8006e18:	e0ab      	b.n	8006f72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d002      	beq.n	8006e2c <USBD_StdEPReq+0x1dc>
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d032      	beq.n	8006e90 <USBD_StdEPReq+0x240>
 8006e2a:	e097      	b.n	8006f5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d007      	beq.n	8006e42 <USBD_StdEPReq+0x1f2>
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	2b80      	cmp	r3, #128	; 0x80
 8006e36:	d004      	beq.n	8006e42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fc17 	bl	800766e <USBD_CtlError>
                break;
 8006e40:	e091      	b.n	8006f66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	da0b      	bge.n	8006e62 <USBD_StdEPReq+0x212>
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	3310      	adds	r3, #16
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3304      	adds	r3, #4
 8006e60:	e00b      	b.n	8006e7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	4413      	add	r3, r2
 8006e78:	3304      	adds	r3, #4
 8006e7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2202      	movs	r2, #2
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fc01 	bl	8007690 <USBD_CtlSendData>
              break;
 8006e8e:	e06a      	b.n	8006f66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	da11      	bge.n	8006ebc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	f003 020f 	and.w	r2, r3, #15
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	440b      	add	r3, r1
 8006eaa:	3324      	adds	r3, #36	; 0x24
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d117      	bne.n	8006ee2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fbda 	bl	800766e <USBD_CtlError>
                  break;
 8006eba:	e054      	b.n	8006f66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	f003 020f 	and.w	r2, r3, #15
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	440b      	add	r3, r1
 8006ece:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d104      	bne.n	8006ee2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fbc7 	bl	800766e <USBD_CtlError>
                  break;
 8006ee0:	e041      	b.n	8006f66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	da0b      	bge.n	8006f02 <USBD_StdEPReq+0x2b2>
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	3310      	adds	r3, #16
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	3304      	adds	r3, #4
 8006f00:	e00b      	b.n	8006f1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	4413      	add	r3, r2
 8006f18:	3304      	adds	r3, #4
 8006f1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f1c:	7bbb      	ldrb	r3, [r7, #14]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <USBD_StdEPReq+0x2d8>
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b80      	cmp	r3, #128	; 0x80
 8006f26:	d103      	bne.n	8006f30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e00e      	b.n	8006f4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fd8b 	bl	8007a50 <USBD_LL_IsStallEP>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d003      	beq.n	8006f48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2201      	movs	r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e002      	b.n	8006f4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2202      	movs	r2, #2
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fb9b 	bl	8007690 <USBD_CtlSendData>
              break;
 8006f5a:	e004      	b.n	8006f66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fb85 	bl	800766e <USBD_CtlError>
              break;
 8006f64:	bf00      	nop
          }
          break;
 8006f66:	e004      	b.n	8006f72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fb7f 	bl	800766e <USBD_CtlError>
          break;
 8006f70:	bf00      	nop
      }
      break;
 8006f72:	e005      	b.n	8006f80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fb79 	bl	800766e <USBD_CtlError>
      break;
 8006f7c:	e000      	b.n	8006f80 <USBD_StdEPReq+0x330>
      break;
 8006f7e:	bf00      	nop
  }

  return ret;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	885b      	ldrh	r3, [r3, #2]
 8006fa6:	0a1b      	lsrs	r3, r3, #8
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	2b0e      	cmp	r3, #14
 8006fae:	f200 8152 	bhi.w	8007256 <USBD_GetDescriptor+0x2ca>
 8006fb2:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <USBD_GetDescriptor+0x2c>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08007029 	.word	0x08007029
 8006fbc:	08007041 	.word	0x08007041
 8006fc0:	08007081 	.word	0x08007081
 8006fc4:	08007257 	.word	0x08007257
 8006fc8:	08007257 	.word	0x08007257
 8006fcc:	080071f7 	.word	0x080071f7
 8006fd0:	08007223 	.word	0x08007223
 8006fd4:	08007257 	.word	0x08007257
 8006fd8:	08007257 	.word	0x08007257
 8006fdc:	08007257 	.word	0x08007257
 8006fe0:	08007257 	.word	0x08007257
 8006fe4:	08007257 	.word	0x08007257
 8006fe8:	08007257 	.word	0x08007257
 8006fec:	08007257 	.word	0x08007257
 8006ff0:	08006ff5 	.word	0x08006ff5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00b      	beq.n	8007018 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007006:	69db      	ldr	r3, [r3, #28]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7c12      	ldrb	r2, [r2, #16]
 800700c:	f107 0108 	add.w	r1, r7, #8
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
 8007014:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007016:	e126      	b.n	8007266 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fb27 	bl	800766e <USBD_CtlError>
        err++;
 8007020:	7afb      	ldrb	r3, [r7, #11]
 8007022:	3301      	adds	r3, #1
 8007024:	72fb      	strb	r3, [r7, #11]
      break;
 8007026:	e11e      	b.n	8007266 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	7c12      	ldrb	r2, [r2, #16]
 8007034:	f107 0108 	add.w	r1, r7, #8
 8007038:	4610      	mov	r0, r2
 800703a:	4798      	blx	r3
 800703c:	60f8      	str	r0, [r7, #12]
      break;
 800703e:	e112      	b.n	8007266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	7c1b      	ldrb	r3, [r3, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10d      	bne.n	8007064 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	f107 0208 	add.w	r2, r7, #8
 8007054:	4610      	mov	r0, r2
 8007056:	4798      	blx	r3
 8007058:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3301      	adds	r3, #1
 800705e:	2202      	movs	r2, #2
 8007060:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007062:	e100      	b.n	8007266 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	f107 0208 	add.w	r2, r7, #8
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
 8007074:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3301      	adds	r3, #1
 800707a:	2202      	movs	r2, #2
 800707c:	701a      	strb	r2, [r3, #0]
      break;
 800707e:	e0f2      	b.n	8007266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	885b      	ldrh	r3, [r3, #2]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b05      	cmp	r3, #5
 8007088:	f200 80ac 	bhi.w	80071e4 <USBD_GetDescriptor+0x258>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <USBD_GetDescriptor+0x108>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070ad 	.word	0x080070ad
 8007098:	080070e1 	.word	0x080070e1
 800709c:	08007115 	.word	0x08007115
 80070a0:	08007149 	.word	0x08007149
 80070a4:	0800717d 	.word	0x0800717d
 80070a8:	080071b1 	.word	0x080071b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00b      	beq.n	80070d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	7c12      	ldrb	r2, [r2, #16]
 80070c4:	f107 0108 	add.w	r1, r7, #8
 80070c8:	4610      	mov	r0, r2
 80070ca:	4798      	blx	r3
 80070cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ce:	e091      	b.n	80071f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 facb 	bl	800766e <USBD_CtlError>
            err++;
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	3301      	adds	r3, #1
 80070dc:	72fb      	strb	r3, [r7, #11]
          break;
 80070de:	e089      	b.n	80071f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7c12      	ldrb	r2, [r2, #16]
 80070f8:	f107 0108 	add.w	r1, r7, #8
 80070fc:	4610      	mov	r0, r2
 80070fe:	4798      	blx	r3
 8007100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007102:	e077      	b.n	80071f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fab1 	bl	800766e <USBD_CtlError>
            err++;
 800710c:	7afb      	ldrb	r3, [r7, #11]
 800710e:	3301      	adds	r3, #1
 8007110:	72fb      	strb	r3, [r7, #11]
          break;
 8007112:	e06f      	b.n	80071f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	7c12      	ldrb	r2, [r2, #16]
 800712c:	f107 0108 	add.w	r1, r7, #8
 8007130:	4610      	mov	r0, r2
 8007132:	4798      	blx	r3
 8007134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007136:	e05d      	b.n	80071f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa97 	bl	800766e <USBD_CtlError>
            err++;
 8007140:	7afb      	ldrb	r3, [r7, #11]
 8007142:	3301      	adds	r3, #1
 8007144:	72fb      	strb	r3, [r7, #11]
          break;
 8007146:	e055      	b.n	80071f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00b      	beq.n	800716c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	7c12      	ldrb	r2, [r2, #16]
 8007160:	f107 0108 	add.w	r1, r7, #8
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
 8007168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800716a:	e043      	b.n	80071f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fa7d 	bl	800766e <USBD_CtlError>
            err++;
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	3301      	adds	r3, #1
 8007178:	72fb      	strb	r3, [r7, #11]
          break;
 800717a:	e03b      	b.n	80071f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	7c12      	ldrb	r2, [r2, #16]
 8007194:	f107 0108 	add.w	r1, r7, #8
 8007198:	4610      	mov	r0, r2
 800719a:	4798      	blx	r3
 800719c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800719e:	e029      	b.n	80071f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fa63 	bl	800766e <USBD_CtlError>
            err++;
 80071a8:	7afb      	ldrb	r3, [r7, #11]
 80071aa:	3301      	adds	r3, #1
 80071ac:	72fb      	strb	r3, [r7, #11]
          break;
 80071ae:	e021      	b.n	80071f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7c12      	ldrb	r2, [r2, #16]
 80071c8:	f107 0108 	add.w	r1, r7, #8
 80071cc:	4610      	mov	r0, r2
 80071ce:	4798      	blx	r3
 80071d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d2:	e00f      	b.n	80071f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa49 	bl	800766e <USBD_CtlError>
            err++;
 80071dc:	7afb      	ldrb	r3, [r7, #11]
 80071de:	3301      	adds	r3, #1
 80071e0:	72fb      	strb	r3, [r7, #11]
          break;
 80071e2:	e007      	b.n	80071f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa41 	bl	800766e <USBD_CtlError>
          err++;
 80071ec:	7afb      	ldrb	r3, [r7, #11]
 80071ee:	3301      	adds	r3, #1
 80071f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071f2:	bf00      	nop
      }
      break;
 80071f4:	e037      	b.n	8007266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	7c1b      	ldrb	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d109      	bne.n	8007212 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007206:	f107 0208 	add.w	r2, r7, #8
 800720a:	4610      	mov	r0, r2
 800720c:	4798      	blx	r3
 800720e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007210:	e029      	b.n	8007266 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fa2a 	bl	800766e <USBD_CtlError>
        err++;
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	3301      	adds	r3, #1
 800721e:	72fb      	strb	r3, [r7, #11]
      break;
 8007220:	e021      	b.n	8007266 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	7c1b      	ldrb	r3, [r3, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10d      	bne.n	8007246 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	f107 0208 	add.w	r2, r7, #8
 8007236:	4610      	mov	r0, r2
 8007238:	4798      	blx	r3
 800723a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3301      	adds	r3, #1
 8007240:	2207      	movs	r2, #7
 8007242:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007244:	e00f      	b.n	8007266 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fa10 	bl	800766e <USBD_CtlError>
        err++;
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	3301      	adds	r3, #1
 8007252:	72fb      	strb	r3, [r7, #11]
      break;
 8007254:	e007      	b.n	8007266 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fa08 	bl	800766e <USBD_CtlError>
      err++;
 800725e:	7afb      	ldrb	r3, [r7, #11]
 8007260:	3301      	adds	r3, #1
 8007262:	72fb      	strb	r3, [r7, #11]
      break;
 8007264:	bf00      	nop
  }

  if (err != 0U)
 8007266:	7afb      	ldrb	r3, [r7, #11]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d11e      	bne.n	80072aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	88db      	ldrh	r3, [r3, #6]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d016      	beq.n	80072a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007274:	893b      	ldrh	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00e      	beq.n	8007298 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	88da      	ldrh	r2, [r3, #6]
 800727e:	893b      	ldrh	r3, [r7, #8]
 8007280:	4293      	cmp	r3, r2
 8007282:	bf28      	it	cs
 8007284:	4613      	movcs	r3, r2
 8007286:	b29b      	uxth	r3, r3
 8007288:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800728a:	893b      	ldrh	r3, [r7, #8]
 800728c:	461a      	mov	r2, r3
 800728e:	68f9      	ldr	r1, [r7, #12]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f9fd 	bl	8007690 <USBD_CtlSendData>
 8007296:	e009      	b.n	80072ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9e7 	bl	800766e <USBD_CtlError>
 80072a0:	e004      	b.n	80072ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa31 	bl	800770a <USBD_CtlSendStatus>
 80072a8:	e000      	b.n	80072ac <USBD_GetDescriptor+0x320>
    return;
 80072aa:	bf00      	nop
  }
}
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop

080072b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	889b      	ldrh	r3, [r3, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d131      	bne.n	800732a <USBD_SetAddress+0x76>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	88db      	ldrh	r3, [r3, #6]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d12d      	bne.n	800732a <USBD_SetAddress+0x76>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	885b      	ldrh	r3, [r3, #2]
 80072d2:	2b7f      	cmp	r3, #127	; 0x7f
 80072d4:	d829      	bhi.n	800732a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	885b      	ldrh	r3, [r3, #2]
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d104      	bne.n	80072f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f9bc 	bl	800766e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f6:	e01d      	b.n	8007334 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	7bfa      	ldrb	r2, [r7, #15]
 80072fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fbcf 	bl	8007aa8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f9fd 	bl	800770a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2202      	movs	r2, #2
 800731a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731e:	e009      	b.n	8007334 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007328:	e004      	b.n	8007334 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f99e 	bl	800766e <USBD_CtlError>
  }
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	885b      	ldrh	r3, [r3, #2]
 800734e:	b2da      	uxtb	r2, r3
 8007350:	4b4e      	ldr	r3, [pc, #312]	; (800748c <USBD_SetConfig+0x150>)
 8007352:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007354:	4b4d      	ldr	r3, [pc, #308]	; (800748c <USBD_SetConfig+0x150>)
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d905      	bls.n	8007368 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f985 	bl	800766e <USBD_CtlError>
    return USBD_FAIL;
 8007364:	2303      	movs	r3, #3
 8007366:	e08c      	b.n	8007482 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d002      	beq.n	800737a <USBD_SetConfig+0x3e>
 8007374:	2b03      	cmp	r3, #3
 8007376:	d029      	beq.n	80073cc <USBD_SetConfig+0x90>
 8007378:	e075      	b.n	8007466 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800737a:	4b44      	ldr	r3, [pc, #272]	; (800748c <USBD_SetConfig+0x150>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d020      	beq.n	80073c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007382:	4b42      	ldr	r3, [pc, #264]	; (800748c <USBD_SetConfig+0x150>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800738c:	4b3f      	ldr	r3, [pc, #252]	; (800748c <USBD_SetConfig+0x150>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff f80d 	bl	80063b2 <USBD_SetClassConfig>
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d008      	beq.n	80073b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f962 	bl	800766e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2202      	movs	r2, #2
 80073ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073b2:	e065      	b.n	8007480 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f9a8 	bl	800770a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2203      	movs	r2, #3
 80073be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073c2:	e05d      	b.n	8007480 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f9a0 	bl	800770a <USBD_CtlSendStatus>
      break;
 80073ca:	e059      	b.n	8007480 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073cc:	4b2f      	ldr	r3, [pc, #188]	; (800748c <USBD_SetConfig+0x150>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d112      	bne.n	80073fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80073dc:	4b2b      	ldr	r3, [pc, #172]	; (800748c <USBD_SetConfig+0x150>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073e6:	4b29      	ldr	r3, [pc, #164]	; (800748c <USBD_SetConfig+0x150>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7fe fffc 	bl	80063ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f989 	bl	800770a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073f8:	e042      	b.n	8007480 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80073fa:	4b24      	ldr	r3, [pc, #144]	; (800748c <USBD_SetConfig+0x150>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d02a      	beq.n	800745e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7fe ffea 	bl	80063ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007416:	4b1d      	ldr	r3, [pc, #116]	; (800748c <USBD_SetConfig+0x150>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007420:	4b1a      	ldr	r3, [pc, #104]	; (800748c <USBD_SetConfig+0x150>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fe ffc3 	bl	80063b2 <USBD_SetClassConfig>
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00f      	beq.n	8007456 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f918 	bl	800766e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7fe ffcf 	bl	80063ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007454:	e014      	b.n	8007480 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f957 	bl	800770a <USBD_CtlSendStatus>
      break;
 800745c:	e010      	b.n	8007480 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f953 	bl	800770a <USBD_CtlSendStatus>
      break;
 8007464:	e00c      	b.n	8007480 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f900 	bl	800766e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800746e:	4b07      	ldr	r3, [pc, #28]	; (800748c <USBD_SetConfig+0x150>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7fe ffb8 	bl	80063ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800747a:	2303      	movs	r3, #3
 800747c:	73fb      	strb	r3, [r7, #15]
      break;
 800747e:	bf00      	nop
  }

  return ret;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200002fc 	.word	0x200002fc

08007490 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	88db      	ldrh	r3, [r3, #6]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d004      	beq.n	80074ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f8e2 	bl	800766e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074aa:	e023      	b.n	80074f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	dc02      	bgt.n	80074be <USBD_GetConfig+0x2e>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	dc03      	bgt.n	80074c4 <USBD_GetConfig+0x34>
 80074bc:	e015      	b.n	80074ea <USBD_GetConfig+0x5a>
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d00b      	beq.n	80074da <USBD_GetConfig+0x4a>
 80074c2:	e012      	b.n	80074ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	3308      	adds	r3, #8
 80074ce:	2201      	movs	r2, #1
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f8dc 	bl	8007690 <USBD_CtlSendData>
        break;
 80074d8:	e00c      	b.n	80074f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3304      	adds	r3, #4
 80074de:	2201      	movs	r2, #1
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f8d4 	bl	8007690 <USBD_CtlSendData>
        break;
 80074e8:	e004      	b.n	80074f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f8be 	bl	800766e <USBD_CtlError>
        break;
 80074f2:	bf00      	nop
}
 80074f4:	bf00      	nop
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750c:	b2db      	uxtb	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	2b02      	cmp	r3, #2
 8007512:	d81e      	bhi.n	8007552 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	88db      	ldrh	r3, [r3, #6]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d004      	beq.n	8007526 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f8a5 	bl	800766e <USBD_CtlError>
        break;
 8007524:	e01a      	b.n	800755c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f043 0202 	orr.w	r2, r3, #2
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	330c      	adds	r3, #12
 8007546:	2202      	movs	r2, #2
 8007548:	4619      	mov	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f8a0 	bl	8007690 <USBD_CtlSendData>
      break;
 8007550:	e004      	b.n	800755c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f88a 	bl	800766e <USBD_CtlError>
      break;
 800755a:	bf00      	nop
  }
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	885b      	ldrh	r3, [r3, #2]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d107      	bne.n	8007586 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f8c3 	bl	800770a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007584:	e013      	b.n	80075ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	885b      	ldrh	r3, [r3, #2]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d10b      	bne.n	80075a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	889b      	ldrh	r3, [r3, #4]
 8007592:	0a1b      	lsrs	r3, r3, #8
 8007594:	b29b      	uxth	r3, r3
 8007596:	b2da      	uxtb	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f8b3 	bl	800770a <USBD_CtlSendStatus>
}
 80075a4:	e003      	b.n	80075ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f860 	bl	800766e <USBD_CtlError>
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	3b01      	subs	r3, #1
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d80b      	bhi.n	80075e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	885b      	ldrh	r3, [r3, #2]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d10c      	bne.n	80075f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f893 	bl	800770a <USBD_CtlSendStatus>
      }
      break;
 80075e4:	e004      	b.n	80075f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f840 	bl	800766e <USBD_CtlError>
      break;
 80075ee:	e000      	b.n	80075f2 <USBD_ClrFeature+0x3c>
      break;
 80075f0:	bf00      	nop
  }
}
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3301      	adds	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f7ff fa16 	bl	8006a56 <SWAPBYTE>
 800762a:	4603      	mov	r3, r0
 800762c:	461a      	mov	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3301      	adds	r3, #1
 8007636:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3301      	adds	r3, #1
 800763c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f7ff fa09 	bl	8006a56 <SWAPBYTE>
 8007644:	4603      	mov	r3, r0
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3301      	adds	r3, #1
 8007650:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3301      	adds	r3, #1
 8007656:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7ff f9fc 	bl	8006a56 <SWAPBYTE>
 800765e:	4603      	mov	r3, r0
 8007660:	461a      	mov	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	80da      	strh	r2, [r3, #6]
}
 8007666:	bf00      	nop
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007678:	2180      	movs	r1, #128	; 0x80
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f9aa 	bl	80079d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007680:	2100      	movs	r1, #0
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f9a6 	bl	80079d4 <USBD_LL_StallEP>
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2202      	movs	r2, #2
 80076a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	2100      	movs	r1, #0
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fa15 	bl	8007ae6 <USBD_LL_Transmit>

  return USBD_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	2100      	movs	r1, #0
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fa04 	bl	8007ae6 <USBD_LL_Transmit>

  return USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	2100      	movs	r1, #0
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 fa14 	bl	8007b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2204      	movs	r2, #4
 8007716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800771a:	2300      	movs	r3, #0
 800771c:	2200      	movs	r2, #0
 800771e:	2100      	movs	r1, #0
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f9e0 	bl	8007ae6 <USBD_LL_Transmit>

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2205      	movs	r2, #5
 800773c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007740:	2300      	movs	r3, #0
 8007742:	2200      	movs	r2, #0
 8007744:	2100      	movs	r1, #0
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f9ee 	bl	8007b28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007768:	4b0d      	ldr	r3, [pc, #52]	; (80077a0 <CDC_Transmit_FS+0x48>)
 800776a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800776e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800777a:	2301      	movs	r3, #1
 800777c:	e00b      	b.n	8007796 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800777e:	887b      	ldrh	r3, [r7, #2]
 8007780:	461a      	mov	r2, r3
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	4806      	ldr	r0, [pc, #24]	; (80077a0 <CDC_Transmit_FS+0x48>)
 8007786:	f7fe fda7 	bl	80062d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800778a:	4805      	ldr	r0, [pc, #20]	; (80077a0 <CDC_Transmit_FS+0x48>)
 800778c:	f7fe fdc6 	bl	800631c <USBD_CDC_TransmitPacket>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000300 	.word	0x20000300

080077a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f7fe fe2f 	bl	800641e <USBD_LL_SetupStage>
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80077da:	78fa      	ldrb	r2, [r7, #3]
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	4619      	mov	r1, r3
 80077f2:	f7fe fe69 	bl	80064c8 <USBD_LL_DataOutStage>
}
 80077f6:	bf00      	nop
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	460b      	mov	r3, r1
 8007808:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007810:	78fa      	ldrb	r2, [r7, #3]
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	4613      	mov	r3, r2
 8007816:	00db      	lsls	r3, r3, #3
 8007818:	4413      	add	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	440b      	add	r3, r1
 800781e:	3320      	adds	r3, #32
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	4619      	mov	r1, r3
 8007826:	f7fe ff02 	bl	800662e <USBD_LL_DataInStage>
}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007840:	4618      	mov	r0, r3
 8007842:	f7ff f83c 	bl	80068be <USBD_LL_SOF>
}
 8007846:	bf00      	nop
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007856:	2301      	movs	r3, #1
 8007858:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	79db      	ldrb	r3, [r3, #7]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d102      	bne.n	8007868 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
 8007866:	e008      	b.n	800787a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	79db      	ldrb	r3, [r3, #7]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d102      	bne.n	8007876 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007870:	2301      	movs	r3, #1
 8007872:	73fb      	strb	r3, [r7, #15]
 8007874:	e001      	b.n	800787a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007876:	f7f9 fd87 	bl	8001388 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007880:	7bfa      	ldrb	r2, [r7, #15]
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe ffd6 	bl	8006836 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe ff7e 	bl	8006792 <USBD_LL_Reset>
}
 8007896:	bf00      	nop
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe ffd1 	bl	8006856 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6812      	ldr	r2, [r2, #0]
 80078c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078c6:	f043 0301 	orr.w	r3, r3, #1
 80078ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	7adb      	ldrb	r3, [r3, #11]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078d4:	4b04      	ldr	r3, [pc, #16]	; (80078e8 <HAL_PCD_SuspendCallback+0x48>)
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	4a03      	ldr	r2, [pc, #12]	; (80078e8 <HAL_PCD_SuspendCallback+0x48>)
 80078da:	f043 0306 	orr.w	r3, r3, #6
 80078de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	e000ed00 	.word	0xe000ed00

080078ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe ffc7 	bl	800688e <USBD_LL_Resume>
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800791a:	78fa      	ldrb	r2, [r7, #3]
 800791c:	4611      	mov	r1, r2
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff f81f 	bl	8006962 <USBD_LL_IsoOUTIncomplete>
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	460b      	mov	r3, r1
 8007936:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe ffdb 	bl	80068fe <USBD_LL_IsoINIncomplete>
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800795e:	4618      	mov	r0, r3
 8007960:	f7ff f831 	bl	80069c6 <USBD_LL_DevConnected>
}
 8007964:	bf00      	nop
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800797a:	4618      	mov	r0, r3
 800797c:	f7ff f82e 	bl	80069dc <USBD_LL_DevDisconnected>
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	4608      	mov	r0, r1
 8007992:	4611      	mov	r1, r2
 8007994:	461a      	mov	r2, r3
 8007996:	4603      	mov	r3, r0
 8007998:	70fb      	strb	r3, [r7, #3]
 800799a:	460b      	mov	r3, r1
 800799c:	70bb      	strb	r3, [r7, #2]
 800799e:	4613      	mov	r3, r2
 80079a0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80079b0:	78bb      	ldrb	r3, [r7, #2]
 80079b2:	883a      	ldrh	r2, [r7, #0]
 80079b4:	78f9      	ldrb	r1, [r7, #3]
 80079b6:	f7fc f8ed 	bl	8003b94 <HAL_PCD_EP_Open>
 80079ba:	4603      	mov	r3, r0
 80079bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 f921 	bl	8007c08 <USBD_Get_USB_Status>
 80079c6:	4603      	mov	r3, r0
 80079c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	4611      	mov	r1, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc f9ab 	bl	8003d4e <HAL_PCD_EP_SetStall>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 f902 	bl	8007c08 <USBD_Get_USB_Status>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a2c:	78fa      	ldrb	r2, [r7, #3]
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fc f9ef 	bl	8003e14 <HAL_PCD_EP_ClrStall>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 f8e3 	bl	8007c08 <USBD_Get_USB_Status>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	da0b      	bge.n	8007a84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a6c:	78fb      	ldrb	r3, [r7, #3]
 8007a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a72:	68f9      	ldr	r1, [r7, #12]
 8007a74:	4613      	mov	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3316      	adds	r3, #22
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	e00b      	b.n	8007a9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a84:	78fb      	ldrb	r3, [r7, #3]
 8007a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007a9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ac2:	78fa      	ldrb	r2, [r7, #3]
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fc f840 	bl	8003b4c <HAL_PCD_SetAddress>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 f898 	bl	8007c08 <USBD_Get_USB_Status>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b086      	sub	sp, #24
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	603b      	str	r3, [r7, #0]
 8007af2:	460b      	mov	r3, r1
 8007af4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007afa:	2300      	movs	r3, #0
 8007afc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b04:	7af9      	ldrb	r1, [r7, #11]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	f7fc f8e6 	bl	8003cda <HAL_PCD_EP_Transmit>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 f877 	bl	8007c08 <USBD_Get_USB_Status>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	607a      	str	r2, [r7, #4]
 8007b32:	603b      	str	r3, [r7, #0]
 8007b34:	460b      	mov	r3, r1
 8007b36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b46:	7af9      	ldrb	r1, [r7, #11]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	f7fc f88a 	bl	8003c64 <HAL_PCD_EP_Receive>
 8007b50:	4603      	mov	r3, r0
 8007b52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f856 	bl	8007c08 <USBD_Get_USB_Status>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b60:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <HAL_PCDEx_LPM_Callback+0x18>
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d01f      	beq.n	8007bc2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007b82:	e03b      	b.n	8007bfc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7adb      	ldrb	r3, [r3, #11]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d007      	beq.n	8007b9c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007b8c:	f7f9 fac8 	bl	8001120 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b90:	4b1c      	ldr	r3, [pc, #112]	; (8007c04 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	4a1b      	ldr	r2, [pc, #108]	; (8007c04 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b96:	f023 0306 	bic.w	r3, r3, #6
 8007b9a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6812      	ldr	r2, [r2, #0]
 8007baa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bae:	f023 0301 	bic.w	r3, r3, #1
 8007bb2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fe67 	bl	800688e <USBD_LL_Resume>
    break;
 8007bc0:	e01c      	b.n	8007bfc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6812      	ldr	r2, [r2, #0]
 8007bd0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bd4:	f043 0301 	orr.w	r3, r3, #1
 8007bd8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe fe38 	bl	8006856 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7adb      	ldrb	r3, [r3, #11]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bee:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <HAL_PCDEx_LPM_Callback+0x98>)
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	4a04      	ldr	r2, [pc, #16]	; (8007c04 <HAL_PCDEx_LPM_Callback+0x98>)
 8007bf4:	f043 0306 	orr.w	r3, r3, #6
 8007bf8:	6113      	str	r3, [r2, #16]
    break;
 8007bfa:	bf00      	nop
}
 8007bfc:	bf00      	nop
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	e000ed00 	.word	0xe000ed00

08007c08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d817      	bhi.n	8007c4c <USBD_Get_USB_Status+0x44>
 8007c1c:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <USBD_Get_USB_Status+0x1c>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c3b 	.word	0x08007c3b
 8007c2c:	08007c41 	.word	0x08007c41
 8007c30:	08007c47 	.word	0x08007c47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
    break;
 8007c38:	e00b      	b.n	8007c52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c3e:	e008      	b.n	8007c52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c40:	2301      	movs	r3, #1
 8007c42:	73fb      	strb	r3, [r7, #15]
    break;
 8007c44:	e005      	b.n	8007c52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c46:	2303      	movs	r3, #3
 8007c48:	73fb      	strb	r3, [r7, #15]
    break;
 8007c4a:	e002      	b.n	8007c52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c50:	bf00      	nop
  }
  return usb_status;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <__cvt>:
 8007c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c64:	ec55 4b10 	vmov	r4, r5, d0
 8007c68:	2d00      	cmp	r5, #0
 8007c6a:	460e      	mov	r6, r1
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	462b      	mov	r3, r5
 8007c70:	bfbb      	ittet	lt
 8007c72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c76:	461d      	movlt	r5, r3
 8007c78:	2300      	movge	r3, #0
 8007c7a:	232d      	movlt	r3, #45	; 0x2d
 8007c7c:	700b      	strb	r3, [r1, #0]
 8007c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c84:	4691      	mov	r9, r2
 8007c86:	f023 0820 	bic.w	r8, r3, #32
 8007c8a:	bfbc      	itt	lt
 8007c8c:	4622      	movlt	r2, r4
 8007c8e:	4614      	movlt	r4, r2
 8007c90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c94:	d005      	beq.n	8007ca2 <__cvt+0x42>
 8007c96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c9a:	d100      	bne.n	8007c9e <__cvt+0x3e>
 8007c9c:	3601      	adds	r6, #1
 8007c9e:	2102      	movs	r1, #2
 8007ca0:	e000      	b.n	8007ca4 <__cvt+0x44>
 8007ca2:	2103      	movs	r1, #3
 8007ca4:	ab03      	add	r3, sp, #12
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	ab02      	add	r3, sp, #8
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	ec45 4b10 	vmov	d0, r4, r5
 8007cb0:	4653      	mov	r3, sl
 8007cb2:	4632      	mov	r2, r6
 8007cb4:	f000 ff58 	bl	8008b68 <_dtoa_r>
 8007cb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	d102      	bne.n	8007cc6 <__cvt+0x66>
 8007cc0:	f019 0f01 	tst.w	r9, #1
 8007cc4:	d022      	beq.n	8007d0c <__cvt+0xac>
 8007cc6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007cca:	eb07 0906 	add.w	r9, r7, r6
 8007cce:	d110      	bne.n	8007cf2 <__cvt+0x92>
 8007cd0:	783b      	ldrb	r3, [r7, #0]
 8007cd2:	2b30      	cmp	r3, #48	; 0x30
 8007cd4:	d10a      	bne.n	8007cec <__cvt+0x8c>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4620      	mov	r0, r4
 8007cdc:	4629      	mov	r1, r5
 8007cde:	f7f8 ff13 	bl	8000b08 <__aeabi_dcmpeq>
 8007ce2:	b918      	cbnz	r0, 8007cec <__cvt+0x8c>
 8007ce4:	f1c6 0601 	rsb	r6, r6, #1
 8007ce8:	f8ca 6000 	str.w	r6, [sl]
 8007cec:	f8da 3000 	ldr.w	r3, [sl]
 8007cf0:	4499      	add	r9, r3
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7f8 ff05 	bl	8000b08 <__aeabi_dcmpeq>
 8007cfe:	b108      	cbz	r0, 8007d04 <__cvt+0xa4>
 8007d00:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d04:	2230      	movs	r2, #48	; 0x30
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	454b      	cmp	r3, r9
 8007d0a:	d307      	bcc.n	8007d1c <__cvt+0xbc>
 8007d0c:	9b03      	ldr	r3, [sp, #12]
 8007d0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d10:	1bdb      	subs	r3, r3, r7
 8007d12:	4638      	mov	r0, r7
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	b004      	add	sp, #16
 8007d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1c:	1c59      	adds	r1, r3, #1
 8007d1e:	9103      	str	r1, [sp, #12]
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	e7f0      	b.n	8007d06 <__cvt+0xa6>

08007d24 <__exponent>:
 8007d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d26:	4603      	mov	r3, r0
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	bfb8      	it	lt
 8007d2c:	4249      	neglt	r1, r1
 8007d2e:	f803 2b02 	strb.w	r2, [r3], #2
 8007d32:	bfb4      	ite	lt
 8007d34:	222d      	movlt	r2, #45	; 0x2d
 8007d36:	222b      	movge	r2, #43	; 0x2b
 8007d38:	2909      	cmp	r1, #9
 8007d3a:	7042      	strb	r2, [r0, #1]
 8007d3c:	dd2a      	ble.n	8007d94 <__exponent+0x70>
 8007d3e:	f10d 0207 	add.w	r2, sp, #7
 8007d42:	4617      	mov	r7, r2
 8007d44:	260a      	movs	r6, #10
 8007d46:	4694      	mov	ip, r2
 8007d48:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d4c:	fb06 1415 	mls	r4, r6, r5, r1
 8007d50:	3430      	adds	r4, #48	; 0x30
 8007d52:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007d56:	460c      	mov	r4, r1
 8007d58:	2c63      	cmp	r4, #99	; 0x63
 8007d5a:	f102 32ff 	add.w	r2, r2, #4294967295
 8007d5e:	4629      	mov	r1, r5
 8007d60:	dcf1      	bgt.n	8007d46 <__exponent+0x22>
 8007d62:	3130      	adds	r1, #48	; 0x30
 8007d64:	f1ac 0402 	sub.w	r4, ip, #2
 8007d68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d6c:	1c41      	adds	r1, r0, #1
 8007d6e:	4622      	mov	r2, r4
 8007d70:	42ba      	cmp	r2, r7
 8007d72:	d30a      	bcc.n	8007d8a <__exponent+0x66>
 8007d74:	f10d 0209 	add.w	r2, sp, #9
 8007d78:	eba2 020c 	sub.w	r2, r2, ip
 8007d7c:	42bc      	cmp	r4, r7
 8007d7e:	bf88      	it	hi
 8007d80:	2200      	movhi	r2, #0
 8007d82:	4413      	add	r3, r2
 8007d84:	1a18      	subs	r0, r3, r0
 8007d86:	b003      	add	sp, #12
 8007d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d8a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d8e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d92:	e7ed      	b.n	8007d70 <__exponent+0x4c>
 8007d94:	2330      	movs	r3, #48	; 0x30
 8007d96:	3130      	adds	r1, #48	; 0x30
 8007d98:	7083      	strb	r3, [r0, #2]
 8007d9a:	70c1      	strb	r1, [r0, #3]
 8007d9c:	1d03      	adds	r3, r0, #4
 8007d9e:	e7f1      	b.n	8007d84 <__exponent+0x60>

08007da0 <_printf_float>:
 8007da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	ed2d 8b02 	vpush	{d8}
 8007da8:	b08d      	sub	sp, #52	; 0x34
 8007daa:	460c      	mov	r4, r1
 8007dac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007db0:	4616      	mov	r6, r2
 8007db2:	461f      	mov	r7, r3
 8007db4:	4605      	mov	r5, r0
 8007db6:	f000 fdd7 	bl	8008968 <_localeconv_r>
 8007dba:	f8d0 a000 	ldr.w	sl, [r0]
 8007dbe:	4650      	mov	r0, sl
 8007dc0:	f7f8 fa76 	bl	80002b0 <strlen>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	9305      	str	r3, [sp, #20]
 8007dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8007dd0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007dd4:	3307      	adds	r3, #7
 8007dd6:	f023 0307 	bic.w	r3, r3, #7
 8007dda:	f103 0208 	add.w	r2, r3, #8
 8007dde:	f8c8 2000 	str.w	r2, [r8]
 8007de2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007de6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007dea:	9307      	str	r3, [sp, #28]
 8007dec:	f8cd 8018 	str.w	r8, [sp, #24]
 8007df0:	ee08 0a10 	vmov	s16, r0
 8007df4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007df8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dfc:	4b9e      	ldr	r3, [pc, #632]	; (8008078 <_printf_float+0x2d8>)
 8007dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007e02:	f7f8 feb3 	bl	8000b6c <__aeabi_dcmpun>
 8007e06:	bb88      	cbnz	r0, 8007e6c <_printf_float+0xcc>
 8007e08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e0c:	4b9a      	ldr	r3, [pc, #616]	; (8008078 <_printf_float+0x2d8>)
 8007e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e12:	f7f8 fe8d 	bl	8000b30 <__aeabi_dcmple>
 8007e16:	bb48      	cbnz	r0, 8007e6c <_printf_float+0xcc>
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	4649      	mov	r1, r9
 8007e20:	f7f8 fe7c 	bl	8000b1c <__aeabi_dcmplt>
 8007e24:	b110      	cbz	r0, 8007e2c <_printf_float+0x8c>
 8007e26:	232d      	movs	r3, #45	; 0x2d
 8007e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e2c:	4a93      	ldr	r2, [pc, #588]	; (800807c <_printf_float+0x2dc>)
 8007e2e:	4b94      	ldr	r3, [pc, #592]	; (8008080 <_printf_float+0x2e0>)
 8007e30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007e34:	bf94      	ite	ls
 8007e36:	4690      	movls	r8, r2
 8007e38:	4698      	movhi	r8, r3
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	9b05      	ldr	r3, [sp, #20]
 8007e40:	f023 0304 	bic.w	r3, r3, #4
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	f04f 0900 	mov.w	r9, #0
 8007e4a:	9700      	str	r7, [sp, #0]
 8007e4c:	4633      	mov	r3, r6
 8007e4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e50:	4621      	mov	r1, r4
 8007e52:	4628      	mov	r0, r5
 8007e54:	f000 f9da 	bl	800820c <_printf_common>
 8007e58:	3001      	adds	r0, #1
 8007e5a:	f040 8090 	bne.w	8007f7e <_printf_float+0x1de>
 8007e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e62:	b00d      	add	sp, #52	; 0x34
 8007e64:	ecbd 8b02 	vpop	{d8}
 8007e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	464b      	mov	r3, r9
 8007e70:	4640      	mov	r0, r8
 8007e72:	4649      	mov	r1, r9
 8007e74:	f7f8 fe7a 	bl	8000b6c <__aeabi_dcmpun>
 8007e78:	b140      	cbz	r0, 8007e8c <_printf_float+0xec>
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bfbc      	itt	lt
 8007e80:	232d      	movlt	r3, #45	; 0x2d
 8007e82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e86:	4a7f      	ldr	r2, [pc, #508]	; (8008084 <_printf_float+0x2e4>)
 8007e88:	4b7f      	ldr	r3, [pc, #508]	; (8008088 <_printf_float+0x2e8>)
 8007e8a:	e7d1      	b.n	8007e30 <_printf_float+0x90>
 8007e8c:	6863      	ldr	r3, [r4, #4]
 8007e8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e92:	9206      	str	r2, [sp, #24]
 8007e94:	1c5a      	adds	r2, r3, #1
 8007e96:	d13f      	bne.n	8007f18 <_printf_float+0x178>
 8007e98:	2306      	movs	r3, #6
 8007e9a:	6063      	str	r3, [r4, #4]
 8007e9c:	9b05      	ldr	r3, [sp, #20]
 8007e9e:	6861      	ldr	r1, [r4, #4]
 8007ea0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9303      	str	r3, [sp, #12]
 8007ea8:	ab0a      	add	r3, sp, #40	; 0x28
 8007eaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007eae:	ab09      	add	r3, sp, #36	; 0x24
 8007eb0:	ec49 8b10 	vmov	d0, r8, r9
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	6022      	str	r2, [r4, #0]
 8007eb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f7ff fecf 	bl	8007c60 <__cvt>
 8007ec2:	9b06      	ldr	r3, [sp, #24]
 8007ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ec6:	2b47      	cmp	r3, #71	; 0x47
 8007ec8:	4680      	mov	r8, r0
 8007eca:	d108      	bne.n	8007ede <_printf_float+0x13e>
 8007ecc:	1cc8      	adds	r0, r1, #3
 8007ece:	db02      	blt.n	8007ed6 <_printf_float+0x136>
 8007ed0:	6863      	ldr	r3, [r4, #4]
 8007ed2:	4299      	cmp	r1, r3
 8007ed4:	dd41      	ble.n	8007f5a <_printf_float+0x1ba>
 8007ed6:	f1ab 0302 	sub.w	r3, fp, #2
 8007eda:	fa5f fb83 	uxtb.w	fp, r3
 8007ede:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ee2:	d820      	bhi.n	8007f26 <_printf_float+0x186>
 8007ee4:	3901      	subs	r1, #1
 8007ee6:	465a      	mov	r2, fp
 8007ee8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007eec:	9109      	str	r1, [sp, #36]	; 0x24
 8007eee:	f7ff ff19 	bl	8007d24 <__exponent>
 8007ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ef4:	1813      	adds	r3, r2, r0
 8007ef6:	2a01      	cmp	r2, #1
 8007ef8:	4681      	mov	r9, r0
 8007efa:	6123      	str	r3, [r4, #16]
 8007efc:	dc02      	bgt.n	8007f04 <_printf_float+0x164>
 8007efe:	6822      	ldr	r2, [r4, #0]
 8007f00:	07d2      	lsls	r2, r2, #31
 8007f02:	d501      	bpl.n	8007f08 <_printf_float+0x168>
 8007f04:	3301      	adds	r3, #1
 8007f06:	6123      	str	r3, [r4, #16]
 8007f08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d09c      	beq.n	8007e4a <_printf_float+0xaa>
 8007f10:	232d      	movs	r3, #45	; 0x2d
 8007f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f16:	e798      	b.n	8007e4a <_printf_float+0xaa>
 8007f18:	9a06      	ldr	r2, [sp, #24]
 8007f1a:	2a47      	cmp	r2, #71	; 0x47
 8007f1c:	d1be      	bne.n	8007e9c <_printf_float+0xfc>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1bc      	bne.n	8007e9c <_printf_float+0xfc>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e7b9      	b.n	8007e9a <_printf_float+0xfa>
 8007f26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007f2a:	d118      	bne.n	8007f5e <_printf_float+0x1be>
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	6863      	ldr	r3, [r4, #4]
 8007f30:	dd0b      	ble.n	8007f4a <_printf_float+0x1aa>
 8007f32:	6121      	str	r1, [r4, #16]
 8007f34:	b913      	cbnz	r3, 8007f3c <_printf_float+0x19c>
 8007f36:	6822      	ldr	r2, [r4, #0]
 8007f38:	07d0      	lsls	r0, r2, #31
 8007f3a:	d502      	bpl.n	8007f42 <_printf_float+0x1a2>
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	440b      	add	r3, r1
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f44:	f04f 0900 	mov.w	r9, #0
 8007f48:	e7de      	b.n	8007f08 <_printf_float+0x168>
 8007f4a:	b913      	cbnz	r3, 8007f52 <_printf_float+0x1b2>
 8007f4c:	6822      	ldr	r2, [r4, #0]
 8007f4e:	07d2      	lsls	r2, r2, #31
 8007f50:	d501      	bpl.n	8007f56 <_printf_float+0x1b6>
 8007f52:	3302      	adds	r3, #2
 8007f54:	e7f4      	b.n	8007f40 <_printf_float+0x1a0>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e7f2      	b.n	8007f40 <_printf_float+0x1a0>
 8007f5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f60:	4299      	cmp	r1, r3
 8007f62:	db05      	blt.n	8007f70 <_printf_float+0x1d0>
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	6121      	str	r1, [r4, #16]
 8007f68:	07d8      	lsls	r0, r3, #31
 8007f6a:	d5ea      	bpl.n	8007f42 <_printf_float+0x1a2>
 8007f6c:	1c4b      	adds	r3, r1, #1
 8007f6e:	e7e7      	b.n	8007f40 <_printf_float+0x1a0>
 8007f70:	2900      	cmp	r1, #0
 8007f72:	bfd4      	ite	le
 8007f74:	f1c1 0202 	rsble	r2, r1, #2
 8007f78:	2201      	movgt	r2, #1
 8007f7a:	4413      	add	r3, r2
 8007f7c:	e7e0      	b.n	8007f40 <_printf_float+0x1a0>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	055a      	lsls	r2, r3, #21
 8007f82:	d407      	bmi.n	8007f94 <_printf_float+0x1f4>
 8007f84:	6923      	ldr	r3, [r4, #16]
 8007f86:	4642      	mov	r2, r8
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d12c      	bne.n	8007fec <_printf_float+0x24c>
 8007f92:	e764      	b.n	8007e5e <_printf_float+0xbe>
 8007f94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f98:	f240 80e0 	bls.w	800815c <_printf_float+0x3bc>
 8007f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f7f8 fdb0 	bl	8000b08 <__aeabi_dcmpeq>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d034      	beq.n	8008016 <_printf_float+0x276>
 8007fac:	4a37      	ldr	r2, [pc, #220]	; (800808c <_printf_float+0x2ec>)
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b8      	blx	r7
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	f43f af51 	beq.w	8007e5e <_printf_float+0xbe>
 8007fbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	db02      	blt.n	8007fca <_printf_float+0x22a>
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	07d8      	lsls	r0, r3, #31
 8007fc8:	d510      	bpl.n	8007fec <_printf_float+0x24c>
 8007fca:	ee18 3a10 	vmov	r3, s16
 8007fce:	4652      	mov	r2, sl
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f af41 	beq.w	8007e5e <_printf_float+0xbe>
 8007fdc:	f04f 0800 	mov.w	r8, #0
 8007fe0:	f104 091a 	add.w	r9, r4, #26
 8007fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	4543      	cmp	r3, r8
 8007fea:	dc09      	bgt.n	8008000 <_printf_float+0x260>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	079b      	lsls	r3, r3, #30
 8007ff0:	f100 8107 	bmi.w	8008202 <_printf_float+0x462>
 8007ff4:	68e0      	ldr	r0, [r4, #12]
 8007ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ff8:	4298      	cmp	r0, r3
 8007ffa:	bfb8      	it	lt
 8007ffc:	4618      	movlt	r0, r3
 8007ffe:	e730      	b.n	8007e62 <_printf_float+0xc2>
 8008000:	2301      	movs	r3, #1
 8008002:	464a      	mov	r2, r9
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	f43f af27 	beq.w	8007e5e <_printf_float+0xbe>
 8008010:	f108 0801 	add.w	r8, r8, #1
 8008014:	e7e6      	b.n	8007fe4 <_printf_float+0x244>
 8008016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008018:	2b00      	cmp	r3, #0
 800801a:	dc39      	bgt.n	8008090 <_printf_float+0x2f0>
 800801c:	4a1b      	ldr	r2, [pc, #108]	; (800808c <_printf_float+0x2ec>)
 800801e:	2301      	movs	r3, #1
 8008020:	4631      	mov	r1, r6
 8008022:	4628      	mov	r0, r5
 8008024:	47b8      	blx	r7
 8008026:	3001      	adds	r0, #1
 8008028:	f43f af19 	beq.w	8007e5e <_printf_float+0xbe>
 800802c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008030:	4313      	orrs	r3, r2
 8008032:	d102      	bne.n	800803a <_printf_float+0x29a>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	07d9      	lsls	r1, r3, #31
 8008038:	d5d8      	bpl.n	8007fec <_printf_float+0x24c>
 800803a:	ee18 3a10 	vmov	r3, s16
 800803e:	4652      	mov	r2, sl
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	f43f af09 	beq.w	8007e5e <_printf_float+0xbe>
 800804c:	f04f 0900 	mov.w	r9, #0
 8008050:	f104 0a1a 	add.w	sl, r4, #26
 8008054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008056:	425b      	negs	r3, r3
 8008058:	454b      	cmp	r3, r9
 800805a:	dc01      	bgt.n	8008060 <_printf_float+0x2c0>
 800805c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800805e:	e792      	b.n	8007f86 <_printf_float+0x1e6>
 8008060:	2301      	movs	r3, #1
 8008062:	4652      	mov	r2, sl
 8008064:	4631      	mov	r1, r6
 8008066:	4628      	mov	r0, r5
 8008068:	47b8      	blx	r7
 800806a:	3001      	adds	r0, #1
 800806c:	f43f aef7 	beq.w	8007e5e <_printf_float+0xbe>
 8008070:	f109 0901 	add.w	r9, r9, #1
 8008074:	e7ee      	b.n	8008054 <_printf_float+0x2b4>
 8008076:	bf00      	nop
 8008078:	7fefffff 	.word	0x7fefffff
 800807c:	0800aa90 	.word	0x0800aa90
 8008080:	0800aa94 	.word	0x0800aa94
 8008084:	0800aa98 	.word	0x0800aa98
 8008088:	0800aa9c 	.word	0x0800aa9c
 800808c:	0800aaa0 	.word	0x0800aaa0
 8008090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008094:	429a      	cmp	r2, r3
 8008096:	bfa8      	it	ge
 8008098:	461a      	movge	r2, r3
 800809a:	2a00      	cmp	r2, #0
 800809c:	4691      	mov	r9, r2
 800809e:	dc37      	bgt.n	8008110 <_printf_float+0x370>
 80080a0:	f04f 0b00 	mov.w	fp, #0
 80080a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080a8:	f104 021a 	add.w	r2, r4, #26
 80080ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080ae:	9305      	str	r3, [sp, #20]
 80080b0:	eba3 0309 	sub.w	r3, r3, r9
 80080b4:	455b      	cmp	r3, fp
 80080b6:	dc33      	bgt.n	8008120 <_printf_float+0x380>
 80080b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080bc:	429a      	cmp	r2, r3
 80080be:	db3b      	blt.n	8008138 <_printf_float+0x398>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	07da      	lsls	r2, r3, #31
 80080c4:	d438      	bmi.n	8008138 <_printf_float+0x398>
 80080c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80080ca:	eba2 0903 	sub.w	r9, r2, r3
 80080ce:	9b05      	ldr	r3, [sp, #20]
 80080d0:	1ad2      	subs	r2, r2, r3
 80080d2:	4591      	cmp	r9, r2
 80080d4:	bfa8      	it	ge
 80080d6:	4691      	movge	r9, r2
 80080d8:	f1b9 0f00 	cmp.w	r9, #0
 80080dc:	dc35      	bgt.n	800814a <_printf_float+0x3aa>
 80080de:	f04f 0800 	mov.w	r8, #0
 80080e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080e6:	f104 0a1a 	add.w	sl, r4, #26
 80080ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	eba3 0309 	sub.w	r3, r3, r9
 80080f4:	4543      	cmp	r3, r8
 80080f6:	f77f af79 	ble.w	8007fec <_printf_float+0x24c>
 80080fa:	2301      	movs	r3, #1
 80080fc:	4652      	mov	r2, sl
 80080fe:	4631      	mov	r1, r6
 8008100:	4628      	mov	r0, r5
 8008102:	47b8      	blx	r7
 8008104:	3001      	adds	r0, #1
 8008106:	f43f aeaa 	beq.w	8007e5e <_printf_float+0xbe>
 800810a:	f108 0801 	add.w	r8, r8, #1
 800810e:	e7ec      	b.n	80080ea <_printf_float+0x34a>
 8008110:	4613      	mov	r3, r2
 8008112:	4631      	mov	r1, r6
 8008114:	4642      	mov	r2, r8
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	d1c0      	bne.n	80080a0 <_printf_float+0x300>
 800811e:	e69e      	b.n	8007e5e <_printf_float+0xbe>
 8008120:	2301      	movs	r3, #1
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	9205      	str	r2, [sp, #20]
 8008128:	47b8      	blx	r7
 800812a:	3001      	adds	r0, #1
 800812c:	f43f ae97 	beq.w	8007e5e <_printf_float+0xbe>
 8008130:	9a05      	ldr	r2, [sp, #20]
 8008132:	f10b 0b01 	add.w	fp, fp, #1
 8008136:	e7b9      	b.n	80080ac <_printf_float+0x30c>
 8008138:	ee18 3a10 	vmov	r3, s16
 800813c:	4652      	mov	r2, sl
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	47b8      	blx	r7
 8008144:	3001      	adds	r0, #1
 8008146:	d1be      	bne.n	80080c6 <_printf_float+0x326>
 8008148:	e689      	b.n	8007e5e <_printf_float+0xbe>
 800814a:	9a05      	ldr	r2, [sp, #20]
 800814c:	464b      	mov	r3, r9
 800814e:	4442      	add	r2, r8
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	d1c1      	bne.n	80080de <_printf_float+0x33e>
 800815a:	e680      	b.n	8007e5e <_printf_float+0xbe>
 800815c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800815e:	2a01      	cmp	r2, #1
 8008160:	dc01      	bgt.n	8008166 <_printf_float+0x3c6>
 8008162:	07db      	lsls	r3, r3, #31
 8008164:	d53a      	bpl.n	80081dc <_printf_float+0x43c>
 8008166:	2301      	movs	r3, #1
 8008168:	4642      	mov	r2, r8
 800816a:	4631      	mov	r1, r6
 800816c:	4628      	mov	r0, r5
 800816e:	47b8      	blx	r7
 8008170:	3001      	adds	r0, #1
 8008172:	f43f ae74 	beq.w	8007e5e <_printf_float+0xbe>
 8008176:	ee18 3a10 	vmov	r3, s16
 800817a:	4652      	mov	r2, sl
 800817c:	4631      	mov	r1, r6
 800817e:	4628      	mov	r0, r5
 8008180:	47b8      	blx	r7
 8008182:	3001      	adds	r0, #1
 8008184:	f43f ae6b 	beq.w	8007e5e <_printf_float+0xbe>
 8008188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800818c:	2200      	movs	r2, #0
 800818e:	2300      	movs	r3, #0
 8008190:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008194:	f7f8 fcb8 	bl	8000b08 <__aeabi_dcmpeq>
 8008198:	b9d8      	cbnz	r0, 80081d2 <_printf_float+0x432>
 800819a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800819e:	f108 0201 	add.w	r2, r8, #1
 80081a2:	4631      	mov	r1, r6
 80081a4:	4628      	mov	r0, r5
 80081a6:	47b8      	blx	r7
 80081a8:	3001      	adds	r0, #1
 80081aa:	d10e      	bne.n	80081ca <_printf_float+0x42a>
 80081ac:	e657      	b.n	8007e5e <_printf_float+0xbe>
 80081ae:	2301      	movs	r3, #1
 80081b0:	4652      	mov	r2, sl
 80081b2:	4631      	mov	r1, r6
 80081b4:	4628      	mov	r0, r5
 80081b6:	47b8      	blx	r7
 80081b8:	3001      	adds	r0, #1
 80081ba:	f43f ae50 	beq.w	8007e5e <_printf_float+0xbe>
 80081be:	f108 0801 	add.w	r8, r8, #1
 80081c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c4:	3b01      	subs	r3, #1
 80081c6:	4543      	cmp	r3, r8
 80081c8:	dcf1      	bgt.n	80081ae <_printf_float+0x40e>
 80081ca:	464b      	mov	r3, r9
 80081cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081d0:	e6da      	b.n	8007f88 <_printf_float+0x1e8>
 80081d2:	f04f 0800 	mov.w	r8, #0
 80081d6:	f104 0a1a 	add.w	sl, r4, #26
 80081da:	e7f2      	b.n	80081c2 <_printf_float+0x422>
 80081dc:	2301      	movs	r3, #1
 80081de:	4642      	mov	r2, r8
 80081e0:	e7df      	b.n	80081a2 <_printf_float+0x402>
 80081e2:	2301      	movs	r3, #1
 80081e4:	464a      	mov	r2, r9
 80081e6:	4631      	mov	r1, r6
 80081e8:	4628      	mov	r0, r5
 80081ea:	47b8      	blx	r7
 80081ec:	3001      	adds	r0, #1
 80081ee:	f43f ae36 	beq.w	8007e5e <_printf_float+0xbe>
 80081f2:	f108 0801 	add.w	r8, r8, #1
 80081f6:	68e3      	ldr	r3, [r4, #12]
 80081f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081fa:	1a5b      	subs	r3, r3, r1
 80081fc:	4543      	cmp	r3, r8
 80081fe:	dcf0      	bgt.n	80081e2 <_printf_float+0x442>
 8008200:	e6f8      	b.n	8007ff4 <_printf_float+0x254>
 8008202:	f04f 0800 	mov.w	r8, #0
 8008206:	f104 0919 	add.w	r9, r4, #25
 800820a:	e7f4      	b.n	80081f6 <_printf_float+0x456>

0800820c <_printf_common>:
 800820c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008210:	4616      	mov	r6, r2
 8008212:	4699      	mov	r9, r3
 8008214:	688a      	ldr	r2, [r1, #8]
 8008216:	690b      	ldr	r3, [r1, #16]
 8008218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800821c:	4293      	cmp	r3, r2
 800821e:	bfb8      	it	lt
 8008220:	4613      	movlt	r3, r2
 8008222:	6033      	str	r3, [r6, #0]
 8008224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008228:	4607      	mov	r7, r0
 800822a:	460c      	mov	r4, r1
 800822c:	b10a      	cbz	r2, 8008232 <_printf_common+0x26>
 800822e:	3301      	adds	r3, #1
 8008230:	6033      	str	r3, [r6, #0]
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	0699      	lsls	r1, r3, #26
 8008236:	bf42      	ittt	mi
 8008238:	6833      	ldrmi	r3, [r6, #0]
 800823a:	3302      	addmi	r3, #2
 800823c:	6033      	strmi	r3, [r6, #0]
 800823e:	6825      	ldr	r5, [r4, #0]
 8008240:	f015 0506 	ands.w	r5, r5, #6
 8008244:	d106      	bne.n	8008254 <_printf_common+0x48>
 8008246:	f104 0a19 	add.w	sl, r4, #25
 800824a:	68e3      	ldr	r3, [r4, #12]
 800824c:	6832      	ldr	r2, [r6, #0]
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	42ab      	cmp	r3, r5
 8008252:	dc26      	bgt.n	80082a2 <_printf_common+0x96>
 8008254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008258:	1e13      	subs	r3, r2, #0
 800825a:	6822      	ldr	r2, [r4, #0]
 800825c:	bf18      	it	ne
 800825e:	2301      	movne	r3, #1
 8008260:	0692      	lsls	r2, r2, #26
 8008262:	d42b      	bmi.n	80082bc <_printf_common+0xb0>
 8008264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008268:	4649      	mov	r1, r9
 800826a:	4638      	mov	r0, r7
 800826c:	47c0      	blx	r8
 800826e:	3001      	adds	r0, #1
 8008270:	d01e      	beq.n	80082b0 <_printf_common+0xa4>
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	6922      	ldr	r2, [r4, #16]
 8008276:	f003 0306 	and.w	r3, r3, #6
 800827a:	2b04      	cmp	r3, #4
 800827c:	bf02      	ittt	eq
 800827e:	68e5      	ldreq	r5, [r4, #12]
 8008280:	6833      	ldreq	r3, [r6, #0]
 8008282:	1aed      	subeq	r5, r5, r3
 8008284:	68a3      	ldr	r3, [r4, #8]
 8008286:	bf0c      	ite	eq
 8008288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800828c:	2500      	movne	r5, #0
 800828e:	4293      	cmp	r3, r2
 8008290:	bfc4      	itt	gt
 8008292:	1a9b      	subgt	r3, r3, r2
 8008294:	18ed      	addgt	r5, r5, r3
 8008296:	2600      	movs	r6, #0
 8008298:	341a      	adds	r4, #26
 800829a:	42b5      	cmp	r5, r6
 800829c:	d11a      	bne.n	80082d4 <_printf_common+0xc8>
 800829e:	2000      	movs	r0, #0
 80082a0:	e008      	b.n	80082b4 <_printf_common+0xa8>
 80082a2:	2301      	movs	r3, #1
 80082a4:	4652      	mov	r2, sl
 80082a6:	4649      	mov	r1, r9
 80082a8:	4638      	mov	r0, r7
 80082aa:	47c0      	blx	r8
 80082ac:	3001      	adds	r0, #1
 80082ae:	d103      	bne.n	80082b8 <_printf_common+0xac>
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b8:	3501      	adds	r5, #1
 80082ba:	e7c6      	b.n	800824a <_printf_common+0x3e>
 80082bc:	18e1      	adds	r1, r4, r3
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	2030      	movs	r0, #48	; 0x30
 80082c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082c6:	4422      	add	r2, r4
 80082c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082d0:	3302      	adds	r3, #2
 80082d2:	e7c7      	b.n	8008264 <_printf_common+0x58>
 80082d4:	2301      	movs	r3, #1
 80082d6:	4622      	mov	r2, r4
 80082d8:	4649      	mov	r1, r9
 80082da:	4638      	mov	r0, r7
 80082dc:	47c0      	blx	r8
 80082de:	3001      	adds	r0, #1
 80082e0:	d0e6      	beq.n	80082b0 <_printf_common+0xa4>
 80082e2:	3601      	adds	r6, #1
 80082e4:	e7d9      	b.n	800829a <_printf_common+0x8e>
	...

080082e8 <_printf_i>:
 80082e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082ec:	7e0f      	ldrb	r7, [r1, #24]
 80082ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082f0:	2f78      	cmp	r7, #120	; 0x78
 80082f2:	4691      	mov	r9, r2
 80082f4:	4680      	mov	r8, r0
 80082f6:	460c      	mov	r4, r1
 80082f8:	469a      	mov	sl, r3
 80082fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082fe:	d807      	bhi.n	8008310 <_printf_i+0x28>
 8008300:	2f62      	cmp	r7, #98	; 0x62
 8008302:	d80a      	bhi.n	800831a <_printf_i+0x32>
 8008304:	2f00      	cmp	r7, #0
 8008306:	f000 80d4 	beq.w	80084b2 <_printf_i+0x1ca>
 800830a:	2f58      	cmp	r7, #88	; 0x58
 800830c:	f000 80c0 	beq.w	8008490 <_printf_i+0x1a8>
 8008310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008318:	e03a      	b.n	8008390 <_printf_i+0xa8>
 800831a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800831e:	2b15      	cmp	r3, #21
 8008320:	d8f6      	bhi.n	8008310 <_printf_i+0x28>
 8008322:	a101      	add	r1, pc, #4	; (adr r1, 8008328 <_printf_i+0x40>)
 8008324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008328:	08008381 	.word	0x08008381
 800832c:	08008395 	.word	0x08008395
 8008330:	08008311 	.word	0x08008311
 8008334:	08008311 	.word	0x08008311
 8008338:	08008311 	.word	0x08008311
 800833c:	08008311 	.word	0x08008311
 8008340:	08008395 	.word	0x08008395
 8008344:	08008311 	.word	0x08008311
 8008348:	08008311 	.word	0x08008311
 800834c:	08008311 	.word	0x08008311
 8008350:	08008311 	.word	0x08008311
 8008354:	08008499 	.word	0x08008499
 8008358:	080083c1 	.word	0x080083c1
 800835c:	08008453 	.word	0x08008453
 8008360:	08008311 	.word	0x08008311
 8008364:	08008311 	.word	0x08008311
 8008368:	080084bb 	.word	0x080084bb
 800836c:	08008311 	.word	0x08008311
 8008370:	080083c1 	.word	0x080083c1
 8008374:	08008311 	.word	0x08008311
 8008378:	08008311 	.word	0x08008311
 800837c:	0800845b 	.word	0x0800845b
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	1d1a      	adds	r2, r3, #4
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	602a      	str	r2, [r5, #0]
 8008388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800838c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008390:	2301      	movs	r3, #1
 8008392:	e09f      	b.n	80084d4 <_printf_i+0x1ec>
 8008394:	6820      	ldr	r0, [r4, #0]
 8008396:	682b      	ldr	r3, [r5, #0]
 8008398:	0607      	lsls	r7, r0, #24
 800839a:	f103 0104 	add.w	r1, r3, #4
 800839e:	6029      	str	r1, [r5, #0]
 80083a0:	d501      	bpl.n	80083a6 <_printf_i+0xbe>
 80083a2:	681e      	ldr	r6, [r3, #0]
 80083a4:	e003      	b.n	80083ae <_printf_i+0xc6>
 80083a6:	0646      	lsls	r6, r0, #25
 80083a8:	d5fb      	bpl.n	80083a2 <_printf_i+0xba>
 80083aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80083ae:	2e00      	cmp	r6, #0
 80083b0:	da03      	bge.n	80083ba <_printf_i+0xd2>
 80083b2:	232d      	movs	r3, #45	; 0x2d
 80083b4:	4276      	negs	r6, r6
 80083b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083ba:	485a      	ldr	r0, [pc, #360]	; (8008524 <_printf_i+0x23c>)
 80083bc:	230a      	movs	r3, #10
 80083be:	e012      	b.n	80083e6 <_printf_i+0xfe>
 80083c0:	682b      	ldr	r3, [r5, #0]
 80083c2:	6820      	ldr	r0, [r4, #0]
 80083c4:	1d19      	adds	r1, r3, #4
 80083c6:	6029      	str	r1, [r5, #0]
 80083c8:	0605      	lsls	r5, r0, #24
 80083ca:	d501      	bpl.n	80083d0 <_printf_i+0xe8>
 80083cc:	681e      	ldr	r6, [r3, #0]
 80083ce:	e002      	b.n	80083d6 <_printf_i+0xee>
 80083d0:	0641      	lsls	r1, r0, #25
 80083d2:	d5fb      	bpl.n	80083cc <_printf_i+0xe4>
 80083d4:	881e      	ldrh	r6, [r3, #0]
 80083d6:	4853      	ldr	r0, [pc, #332]	; (8008524 <_printf_i+0x23c>)
 80083d8:	2f6f      	cmp	r7, #111	; 0x6f
 80083da:	bf0c      	ite	eq
 80083dc:	2308      	moveq	r3, #8
 80083de:	230a      	movne	r3, #10
 80083e0:	2100      	movs	r1, #0
 80083e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083e6:	6865      	ldr	r5, [r4, #4]
 80083e8:	60a5      	str	r5, [r4, #8]
 80083ea:	2d00      	cmp	r5, #0
 80083ec:	bfa2      	ittt	ge
 80083ee:	6821      	ldrge	r1, [r4, #0]
 80083f0:	f021 0104 	bicge.w	r1, r1, #4
 80083f4:	6021      	strge	r1, [r4, #0]
 80083f6:	b90e      	cbnz	r6, 80083fc <_printf_i+0x114>
 80083f8:	2d00      	cmp	r5, #0
 80083fa:	d04b      	beq.n	8008494 <_printf_i+0x1ac>
 80083fc:	4615      	mov	r5, r2
 80083fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008402:	fb03 6711 	mls	r7, r3, r1, r6
 8008406:	5dc7      	ldrb	r7, [r0, r7]
 8008408:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800840c:	4637      	mov	r7, r6
 800840e:	42bb      	cmp	r3, r7
 8008410:	460e      	mov	r6, r1
 8008412:	d9f4      	bls.n	80083fe <_printf_i+0x116>
 8008414:	2b08      	cmp	r3, #8
 8008416:	d10b      	bne.n	8008430 <_printf_i+0x148>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	07de      	lsls	r6, r3, #31
 800841c:	d508      	bpl.n	8008430 <_printf_i+0x148>
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	6861      	ldr	r1, [r4, #4]
 8008422:	4299      	cmp	r1, r3
 8008424:	bfde      	ittt	le
 8008426:	2330      	movle	r3, #48	; 0x30
 8008428:	f805 3c01 	strble.w	r3, [r5, #-1]
 800842c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008430:	1b52      	subs	r2, r2, r5
 8008432:	6122      	str	r2, [r4, #16]
 8008434:	f8cd a000 	str.w	sl, [sp]
 8008438:	464b      	mov	r3, r9
 800843a:	aa03      	add	r2, sp, #12
 800843c:	4621      	mov	r1, r4
 800843e:	4640      	mov	r0, r8
 8008440:	f7ff fee4 	bl	800820c <_printf_common>
 8008444:	3001      	adds	r0, #1
 8008446:	d14a      	bne.n	80084de <_printf_i+0x1f6>
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	b004      	add	sp, #16
 800844e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	f043 0320 	orr.w	r3, r3, #32
 8008458:	6023      	str	r3, [r4, #0]
 800845a:	4833      	ldr	r0, [pc, #204]	; (8008528 <_printf_i+0x240>)
 800845c:	2778      	movs	r7, #120	; 0x78
 800845e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	6829      	ldr	r1, [r5, #0]
 8008466:	061f      	lsls	r7, r3, #24
 8008468:	f851 6b04 	ldr.w	r6, [r1], #4
 800846c:	d402      	bmi.n	8008474 <_printf_i+0x18c>
 800846e:	065f      	lsls	r7, r3, #25
 8008470:	bf48      	it	mi
 8008472:	b2b6      	uxthmi	r6, r6
 8008474:	07df      	lsls	r7, r3, #31
 8008476:	bf48      	it	mi
 8008478:	f043 0320 	orrmi.w	r3, r3, #32
 800847c:	6029      	str	r1, [r5, #0]
 800847e:	bf48      	it	mi
 8008480:	6023      	strmi	r3, [r4, #0]
 8008482:	b91e      	cbnz	r6, 800848c <_printf_i+0x1a4>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	f023 0320 	bic.w	r3, r3, #32
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	2310      	movs	r3, #16
 800848e:	e7a7      	b.n	80083e0 <_printf_i+0xf8>
 8008490:	4824      	ldr	r0, [pc, #144]	; (8008524 <_printf_i+0x23c>)
 8008492:	e7e4      	b.n	800845e <_printf_i+0x176>
 8008494:	4615      	mov	r5, r2
 8008496:	e7bd      	b.n	8008414 <_printf_i+0x12c>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	6826      	ldr	r6, [r4, #0]
 800849c:	6961      	ldr	r1, [r4, #20]
 800849e:	1d18      	adds	r0, r3, #4
 80084a0:	6028      	str	r0, [r5, #0]
 80084a2:	0635      	lsls	r5, r6, #24
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	d501      	bpl.n	80084ac <_printf_i+0x1c4>
 80084a8:	6019      	str	r1, [r3, #0]
 80084aa:	e002      	b.n	80084b2 <_printf_i+0x1ca>
 80084ac:	0670      	lsls	r0, r6, #25
 80084ae:	d5fb      	bpl.n	80084a8 <_printf_i+0x1c0>
 80084b0:	8019      	strh	r1, [r3, #0]
 80084b2:	2300      	movs	r3, #0
 80084b4:	6123      	str	r3, [r4, #16]
 80084b6:	4615      	mov	r5, r2
 80084b8:	e7bc      	b.n	8008434 <_printf_i+0x14c>
 80084ba:	682b      	ldr	r3, [r5, #0]
 80084bc:	1d1a      	adds	r2, r3, #4
 80084be:	602a      	str	r2, [r5, #0]
 80084c0:	681d      	ldr	r5, [r3, #0]
 80084c2:	6862      	ldr	r2, [r4, #4]
 80084c4:	2100      	movs	r1, #0
 80084c6:	4628      	mov	r0, r5
 80084c8:	f7f7 fea2 	bl	8000210 <memchr>
 80084cc:	b108      	cbz	r0, 80084d2 <_printf_i+0x1ea>
 80084ce:	1b40      	subs	r0, r0, r5
 80084d0:	6060      	str	r0, [r4, #4]
 80084d2:	6863      	ldr	r3, [r4, #4]
 80084d4:	6123      	str	r3, [r4, #16]
 80084d6:	2300      	movs	r3, #0
 80084d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084dc:	e7aa      	b.n	8008434 <_printf_i+0x14c>
 80084de:	6923      	ldr	r3, [r4, #16]
 80084e0:	462a      	mov	r2, r5
 80084e2:	4649      	mov	r1, r9
 80084e4:	4640      	mov	r0, r8
 80084e6:	47d0      	blx	sl
 80084e8:	3001      	adds	r0, #1
 80084ea:	d0ad      	beq.n	8008448 <_printf_i+0x160>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	079b      	lsls	r3, r3, #30
 80084f0:	d413      	bmi.n	800851a <_printf_i+0x232>
 80084f2:	68e0      	ldr	r0, [r4, #12]
 80084f4:	9b03      	ldr	r3, [sp, #12]
 80084f6:	4298      	cmp	r0, r3
 80084f8:	bfb8      	it	lt
 80084fa:	4618      	movlt	r0, r3
 80084fc:	e7a6      	b.n	800844c <_printf_i+0x164>
 80084fe:	2301      	movs	r3, #1
 8008500:	4632      	mov	r2, r6
 8008502:	4649      	mov	r1, r9
 8008504:	4640      	mov	r0, r8
 8008506:	47d0      	blx	sl
 8008508:	3001      	adds	r0, #1
 800850a:	d09d      	beq.n	8008448 <_printf_i+0x160>
 800850c:	3501      	adds	r5, #1
 800850e:	68e3      	ldr	r3, [r4, #12]
 8008510:	9903      	ldr	r1, [sp, #12]
 8008512:	1a5b      	subs	r3, r3, r1
 8008514:	42ab      	cmp	r3, r5
 8008516:	dcf2      	bgt.n	80084fe <_printf_i+0x216>
 8008518:	e7eb      	b.n	80084f2 <_printf_i+0x20a>
 800851a:	2500      	movs	r5, #0
 800851c:	f104 0619 	add.w	r6, r4, #25
 8008520:	e7f5      	b.n	800850e <_printf_i+0x226>
 8008522:	bf00      	nop
 8008524:	0800aaa2 	.word	0x0800aaa2
 8008528:	0800aab3 	.word	0x0800aab3

0800852c <std>:
 800852c:	2300      	movs	r3, #0
 800852e:	b510      	push	{r4, lr}
 8008530:	4604      	mov	r4, r0
 8008532:	e9c0 3300 	strd	r3, r3, [r0]
 8008536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800853a:	6083      	str	r3, [r0, #8]
 800853c:	8181      	strh	r1, [r0, #12]
 800853e:	6643      	str	r3, [r0, #100]	; 0x64
 8008540:	81c2      	strh	r2, [r0, #14]
 8008542:	6183      	str	r3, [r0, #24]
 8008544:	4619      	mov	r1, r3
 8008546:	2208      	movs	r2, #8
 8008548:	305c      	adds	r0, #92	; 0x5c
 800854a:	f000 fa05 	bl	8008958 <memset>
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <std+0x58>)
 8008550:	6263      	str	r3, [r4, #36]	; 0x24
 8008552:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <std+0x5c>)
 8008554:	62a3      	str	r3, [r4, #40]	; 0x28
 8008556:	4b0d      	ldr	r3, [pc, #52]	; (800858c <std+0x60>)
 8008558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800855a:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <std+0x64>)
 800855c:	6323      	str	r3, [r4, #48]	; 0x30
 800855e:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <std+0x68>)
 8008560:	6224      	str	r4, [r4, #32]
 8008562:	429c      	cmp	r4, r3
 8008564:	d006      	beq.n	8008574 <std+0x48>
 8008566:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800856a:	4294      	cmp	r4, r2
 800856c:	d002      	beq.n	8008574 <std+0x48>
 800856e:	33d0      	adds	r3, #208	; 0xd0
 8008570:	429c      	cmp	r4, r3
 8008572:	d105      	bne.n	8008580 <std+0x54>
 8008574:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800857c:	f000 ba68 	b.w	8008a50 <__retarget_lock_init_recursive>
 8008580:	bd10      	pop	{r4, pc}
 8008582:	bf00      	nop
 8008584:	080087a9 	.word	0x080087a9
 8008588:	080087cb 	.word	0x080087cb
 800858c:	08008803 	.word	0x08008803
 8008590:	08008827 	.word	0x08008827
 8008594:	20000ac0 	.word	0x20000ac0

08008598 <stdio_exit_handler>:
 8008598:	4a02      	ldr	r2, [pc, #8]	; (80085a4 <stdio_exit_handler+0xc>)
 800859a:	4903      	ldr	r1, [pc, #12]	; (80085a8 <stdio_exit_handler+0x10>)
 800859c:	4803      	ldr	r0, [pc, #12]	; (80085ac <stdio_exit_handler+0x14>)
 800859e:	f000 b869 	b.w	8008674 <_fwalk_sglue>
 80085a2:	bf00      	nop
 80085a4:	2000000c 	.word	0x2000000c
 80085a8:	0800a401 	.word	0x0800a401
 80085ac:	20000018 	.word	0x20000018

080085b0 <cleanup_stdio>:
 80085b0:	6841      	ldr	r1, [r0, #4]
 80085b2:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <cleanup_stdio+0x34>)
 80085b4:	4299      	cmp	r1, r3
 80085b6:	b510      	push	{r4, lr}
 80085b8:	4604      	mov	r4, r0
 80085ba:	d001      	beq.n	80085c0 <cleanup_stdio+0x10>
 80085bc:	f001 ff20 	bl	800a400 <_fflush_r>
 80085c0:	68a1      	ldr	r1, [r4, #8]
 80085c2:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <cleanup_stdio+0x38>)
 80085c4:	4299      	cmp	r1, r3
 80085c6:	d002      	beq.n	80085ce <cleanup_stdio+0x1e>
 80085c8:	4620      	mov	r0, r4
 80085ca:	f001 ff19 	bl	800a400 <_fflush_r>
 80085ce:	68e1      	ldr	r1, [r4, #12]
 80085d0:	4b06      	ldr	r3, [pc, #24]	; (80085ec <cleanup_stdio+0x3c>)
 80085d2:	4299      	cmp	r1, r3
 80085d4:	d004      	beq.n	80085e0 <cleanup_stdio+0x30>
 80085d6:	4620      	mov	r0, r4
 80085d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085dc:	f001 bf10 	b.w	800a400 <_fflush_r>
 80085e0:	bd10      	pop	{r4, pc}
 80085e2:	bf00      	nop
 80085e4:	20000ac0 	.word	0x20000ac0
 80085e8:	20000b28 	.word	0x20000b28
 80085ec:	20000b90 	.word	0x20000b90

080085f0 <global_stdio_init.part.0>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <global_stdio_init.part.0+0x30>)
 80085f4:	4c0b      	ldr	r4, [pc, #44]	; (8008624 <global_stdio_init.part.0+0x34>)
 80085f6:	4a0c      	ldr	r2, [pc, #48]	; (8008628 <global_stdio_init.part.0+0x38>)
 80085f8:	601a      	str	r2, [r3, #0]
 80085fa:	4620      	mov	r0, r4
 80085fc:	2200      	movs	r2, #0
 80085fe:	2104      	movs	r1, #4
 8008600:	f7ff ff94 	bl	800852c <std>
 8008604:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008608:	2201      	movs	r2, #1
 800860a:	2109      	movs	r1, #9
 800860c:	f7ff ff8e 	bl	800852c <std>
 8008610:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008614:	2202      	movs	r2, #2
 8008616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800861a:	2112      	movs	r1, #18
 800861c:	f7ff bf86 	b.w	800852c <std>
 8008620:	20000bf8 	.word	0x20000bf8
 8008624:	20000ac0 	.word	0x20000ac0
 8008628:	08008599 	.word	0x08008599

0800862c <__sfp_lock_acquire>:
 800862c:	4801      	ldr	r0, [pc, #4]	; (8008634 <__sfp_lock_acquire+0x8>)
 800862e:	f000 ba10 	b.w	8008a52 <__retarget_lock_acquire_recursive>
 8008632:	bf00      	nop
 8008634:	20000c01 	.word	0x20000c01

08008638 <__sfp_lock_release>:
 8008638:	4801      	ldr	r0, [pc, #4]	; (8008640 <__sfp_lock_release+0x8>)
 800863a:	f000 ba0b 	b.w	8008a54 <__retarget_lock_release_recursive>
 800863e:	bf00      	nop
 8008640:	20000c01 	.word	0x20000c01

08008644 <__sinit>:
 8008644:	b510      	push	{r4, lr}
 8008646:	4604      	mov	r4, r0
 8008648:	f7ff fff0 	bl	800862c <__sfp_lock_acquire>
 800864c:	6a23      	ldr	r3, [r4, #32]
 800864e:	b11b      	cbz	r3, 8008658 <__sinit+0x14>
 8008650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008654:	f7ff bff0 	b.w	8008638 <__sfp_lock_release>
 8008658:	4b04      	ldr	r3, [pc, #16]	; (800866c <__sinit+0x28>)
 800865a:	6223      	str	r3, [r4, #32]
 800865c:	4b04      	ldr	r3, [pc, #16]	; (8008670 <__sinit+0x2c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1f5      	bne.n	8008650 <__sinit+0xc>
 8008664:	f7ff ffc4 	bl	80085f0 <global_stdio_init.part.0>
 8008668:	e7f2      	b.n	8008650 <__sinit+0xc>
 800866a:	bf00      	nop
 800866c:	080085b1 	.word	0x080085b1
 8008670:	20000bf8 	.word	0x20000bf8

08008674 <_fwalk_sglue>:
 8008674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008678:	4607      	mov	r7, r0
 800867a:	4688      	mov	r8, r1
 800867c:	4614      	mov	r4, r2
 800867e:	2600      	movs	r6, #0
 8008680:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008684:	f1b9 0901 	subs.w	r9, r9, #1
 8008688:	d505      	bpl.n	8008696 <_fwalk_sglue+0x22>
 800868a:	6824      	ldr	r4, [r4, #0]
 800868c:	2c00      	cmp	r4, #0
 800868e:	d1f7      	bne.n	8008680 <_fwalk_sglue+0xc>
 8008690:	4630      	mov	r0, r6
 8008692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008696:	89ab      	ldrh	r3, [r5, #12]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d907      	bls.n	80086ac <_fwalk_sglue+0x38>
 800869c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086a0:	3301      	adds	r3, #1
 80086a2:	d003      	beq.n	80086ac <_fwalk_sglue+0x38>
 80086a4:	4629      	mov	r1, r5
 80086a6:	4638      	mov	r0, r7
 80086a8:	47c0      	blx	r8
 80086aa:	4306      	orrs	r6, r0
 80086ac:	3568      	adds	r5, #104	; 0x68
 80086ae:	e7e9      	b.n	8008684 <_fwalk_sglue+0x10>

080086b0 <_puts_r>:
 80086b0:	6a03      	ldr	r3, [r0, #32]
 80086b2:	b570      	push	{r4, r5, r6, lr}
 80086b4:	6884      	ldr	r4, [r0, #8]
 80086b6:	4605      	mov	r5, r0
 80086b8:	460e      	mov	r6, r1
 80086ba:	b90b      	cbnz	r3, 80086c0 <_puts_r+0x10>
 80086bc:	f7ff ffc2 	bl	8008644 <__sinit>
 80086c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086c2:	07db      	lsls	r3, r3, #31
 80086c4:	d405      	bmi.n	80086d2 <_puts_r+0x22>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	0598      	lsls	r0, r3, #22
 80086ca:	d402      	bmi.n	80086d2 <_puts_r+0x22>
 80086cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086ce:	f000 f9c0 	bl	8008a52 <__retarget_lock_acquire_recursive>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	0719      	lsls	r1, r3, #28
 80086d6:	d513      	bpl.n	8008700 <_puts_r+0x50>
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	b18b      	cbz	r3, 8008700 <_puts_r+0x50>
 80086dc:	3e01      	subs	r6, #1
 80086de:	68a3      	ldr	r3, [r4, #8]
 80086e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086e4:	3b01      	subs	r3, #1
 80086e6:	60a3      	str	r3, [r4, #8]
 80086e8:	b9e9      	cbnz	r1, 8008726 <_puts_r+0x76>
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	da2e      	bge.n	800874c <_puts_r+0x9c>
 80086ee:	4622      	mov	r2, r4
 80086f0:	210a      	movs	r1, #10
 80086f2:	4628      	mov	r0, r5
 80086f4:	f000 f89b 	bl	800882e <__swbuf_r>
 80086f8:	3001      	adds	r0, #1
 80086fa:	d007      	beq.n	800870c <_puts_r+0x5c>
 80086fc:	250a      	movs	r5, #10
 80086fe:	e007      	b.n	8008710 <_puts_r+0x60>
 8008700:	4621      	mov	r1, r4
 8008702:	4628      	mov	r0, r5
 8008704:	f000 f8d0 	bl	80088a8 <__swsetup_r>
 8008708:	2800      	cmp	r0, #0
 800870a:	d0e7      	beq.n	80086dc <_puts_r+0x2c>
 800870c:	f04f 35ff 	mov.w	r5, #4294967295
 8008710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008712:	07da      	lsls	r2, r3, #31
 8008714:	d405      	bmi.n	8008722 <_puts_r+0x72>
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	059b      	lsls	r3, r3, #22
 800871a:	d402      	bmi.n	8008722 <_puts_r+0x72>
 800871c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800871e:	f000 f999 	bl	8008a54 <__retarget_lock_release_recursive>
 8008722:	4628      	mov	r0, r5
 8008724:	bd70      	pop	{r4, r5, r6, pc}
 8008726:	2b00      	cmp	r3, #0
 8008728:	da04      	bge.n	8008734 <_puts_r+0x84>
 800872a:	69a2      	ldr	r2, [r4, #24]
 800872c:	429a      	cmp	r2, r3
 800872e:	dc06      	bgt.n	800873e <_puts_r+0x8e>
 8008730:	290a      	cmp	r1, #10
 8008732:	d004      	beq.n	800873e <_puts_r+0x8e>
 8008734:	6823      	ldr	r3, [r4, #0]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	6022      	str	r2, [r4, #0]
 800873a:	7019      	strb	r1, [r3, #0]
 800873c:	e7cf      	b.n	80086de <_puts_r+0x2e>
 800873e:	4622      	mov	r2, r4
 8008740:	4628      	mov	r0, r5
 8008742:	f000 f874 	bl	800882e <__swbuf_r>
 8008746:	3001      	adds	r0, #1
 8008748:	d1c9      	bne.n	80086de <_puts_r+0x2e>
 800874a:	e7df      	b.n	800870c <_puts_r+0x5c>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	250a      	movs	r5, #10
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	6022      	str	r2, [r4, #0]
 8008754:	701d      	strb	r5, [r3, #0]
 8008756:	e7db      	b.n	8008710 <_puts_r+0x60>

08008758 <puts>:
 8008758:	4b02      	ldr	r3, [pc, #8]	; (8008764 <puts+0xc>)
 800875a:	4601      	mov	r1, r0
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	f7ff bfa7 	b.w	80086b0 <_puts_r>
 8008762:	bf00      	nop
 8008764:	20000064 	.word	0x20000064

08008768 <siprintf>:
 8008768:	b40e      	push	{r1, r2, r3}
 800876a:	b500      	push	{lr}
 800876c:	b09c      	sub	sp, #112	; 0x70
 800876e:	ab1d      	add	r3, sp, #116	; 0x74
 8008770:	9002      	str	r0, [sp, #8]
 8008772:	9006      	str	r0, [sp, #24]
 8008774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008778:	4809      	ldr	r0, [pc, #36]	; (80087a0 <siprintf+0x38>)
 800877a:	9107      	str	r1, [sp, #28]
 800877c:	9104      	str	r1, [sp, #16]
 800877e:	4909      	ldr	r1, [pc, #36]	; (80087a4 <siprintf+0x3c>)
 8008780:	f853 2b04 	ldr.w	r2, [r3], #4
 8008784:	9105      	str	r1, [sp, #20]
 8008786:	6800      	ldr	r0, [r0, #0]
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	a902      	add	r1, sp, #8
 800878c:	f001 fcb4 	bl	800a0f8 <_svfiprintf_r>
 8008790:	9b02      	ldr	r3, [sp, #8]
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	b01c      	add	sp, #112	; 0x70
 8008798:	f85d eb04 	ldr.w	lr, [sp], #4
 800879c:	b003      	add	sp, #12
 800879e:	4770      	bx	lr
 80087a0:	20000064 	.word	0x20000064
 80087a4:	ffff0208 	.word	0xffff0208

080087a8 <__sread>:
 80087a8:	b510      	push	{r4, lr}
 80087aa:	460c      	mov	r4, r1
 80087ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087b0:	f000 f900 	bl	80089b4 <_read_r>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	bfab      	itete	ge
 80087b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087ba:	89a3      	ldrhlt	r3, [r4, #12]
 80087bc:	181b      	addge	r3, r3, r0
 80087be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087c2:	bfac      	ite	ge
 80087c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80087c6:	81a3      	strhlt	r3, [r4, #12]
 80087c8:	bd10      	pop	{r4, pc}

080087ca <__swrite>:
 80087ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ce:	461f      	mov	r7, r3
 80087d0:	898b      	ldrh	r3, [r1, #12]
 80087d2:	05db      	lsls	r3, r3, #23
 80087d4:	4605      	mov	r5, r0
 80087d6:	460c      	mov	r4, r1
 80087d8:	4616      	mov	r6, r2
 80087da:	d505      	bpl.n	80087e8 <__swrite+0x1e>
 80087dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e0:	2302      	movs	r3, #2
 80087e2:	2200      	movs	r2, #0
 80087e4:	f000 f8d4 	bl	8008990 <_lseek_r>
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087f2:	81a3      	strh	r3, [r4, #12]
 80087f4:	4632      	mov	r2, r6
 80087f6:	463b      	mov	r3, r7
 80087f8:	4628      	mov	r0, r5
 80087fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087fe:	f000 b8eb 	b.w	80089d8 <_write_r>

08008802 <__sseek>:
 8008802:	b510      	push	{r4, lr}
 8008804:	460c      	mov	r4, r1
 8008806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800880a:	f000 f8c1 	bl	8008990 <_lseek_r>
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	bf15      	itete	ne
 8008814:	6560      	strne	r0, [r4, #84]	; 0x54
 8008816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800881a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800881e:	81a3      	strheq	r3, [r4, #12]
 8008820:	bf18      	it	ne
 8008822:	81a3      	strhne	r3, [r4, #12]
 8008824:	bd10      	pop	{r4, pc}

08008826 <__sclose>:
 8008826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800882a:	f000 b8a1 	b.w	8008970 <_close_r>

0800882e <__swbuf_r>:
 800882e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008830:	460e      	mov	r6, r1
 8008832:	4614      	mov	r4, r2
 8008834:	4605      	mov	r5, r0
 8008836:	b118      	cbz	r0, 8008840 <__swbuf_r+0x12>
 8008838:	6a03      	ldr	r3, [r0, #32]
 800883a:	b90b      	cbnz	r3, 8008840 <__swbuf_r+0x12>
 800883c:	f7ff ff02 	bl	8008644 <__sinit>
 8008840:	69a3      	ldr	r3, [r4, #24]
 8008842:	60a3      	str	r3, [r4, #8]
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	071a      	lsls	r2, r3, #28
 8008848:	d525      	bpl.n	8008896 <__swbuf_r+0x68>
 800884a:	6923      	ldr	r3, [r4, #16]
 800884c:	b31b      	cbz	r3, 8008896 <__swbuf_r+0x68>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	6922      	ldr	r2, [r4, #16]
 8008852:	1a98      	subs	r0, r3, r2
 8008854:	6963      	ldr	r3, [r4, #20]
 8008856:	b2f6      	uxtb	r6, r6
 8008858:	4283      	cmp	r3, r0
 800885a:	4637      	mov	r7, r6
 800885c:	dc04      	bgt.n	8008868 <__swbuf_r+0x3a>
 800885e:	4621      	mov	r1, r4
 8008860:	4628      	mov	r0, r5
 8008862:	f001 fdcd 	bl	800a400 <_fflush_r>
 8008866:	b9e0      	cbnz	r0, 80088a2 <__swbuf_r+0x74>
 8008868:	68a3      	ldr	r3, [r4, #8]
 800886a:	3b01      	subs	r3, #1
 800886c:	60a3      	str	r3, [r4, #8]
 800886e:	6823      	ldr	r3, [r4, #0]
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	6022      	str	r2, [r4, #0]
 8008874:	701e      	strb	r6, [r3, #0]
 8008876:	6962      	ldr	r2, [r4, #20]
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	429a      	cmp	r2, r3
 800887c:	d004      	beq.n	8008888 <__swbuf_r+0x5a>
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	07db      	lsls	r3, r3, #31
 8008882:	d506      	bpl.n	8008892 <__swbuf_r+0x64>
 8008884:	2e0a      	cmp	r6, #10
 8008886:	d104      	bne.n	8008892 <__swbuf_r+0x64>
 8008888:	4621      	mov	r1, r4
 800888a:	4628      	mov	r0, r5
 800888c:	f001 fdb8 	bl	800a400 <_fflush_r>
 8008890:	b938      	cbnz	r0, 80088a2 <__swbuf_r+0x74>
 8008892:	4638      	mov	r0, r7
 8008894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008896:	4621      	mov	r1, r4
 8008898:	4628      	mov	r0, r5
 800889a:	f000 f805 	bl	80088a8 <__swsetup_r>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d0d5      	beq.n	800884e <__swbuf_r+0x20>
 80088a2:	f04f 37ff 	mov.w	r7, #4294967295
 80088a6:	e7f4      	b.n	8008892 <__swbuf_r+0x64>

080088a8 <__swsetup_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4b2a      	ldr	r3, [pc, #168]	; (8008954 <__swsetup_r+0xac>)
 80088ac:	4605      	mov	r5, r0
 80088ae:	6818      	ldr	r0, [r3, #0]
 80088b0:	460c      	mov	r4, r1
 80088b2:	b118      	cbz	r0, 80088bc <__swsetup_r+0x14>
 80088b4:	6a03      	ldr	r3, [r0, #32]
 80088b6:	b90b      	cbnz	r3, 80088bc <__swsetup_r+0x14>
 80088b8:	f7ff fec4 	bl	8008644 <__sinit>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088c2:	0718      	lsls	r0, r3, #28
 80088c4:	d422      	bmi.n	800890c <__swsetup_r+0x64>
 80088c6:	06d9      	lsls	r1, r3, #27
 80088c8:	d407      	bmi.n	80088da <__swsetup_r+0x32>
 80088ca:	2309      	movs	r3, #9
 80088cc:	602b      	str	r3, [r5, #0]
 80088ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295
 80088d8:	e034      	b.n	8008944 <__swsetup_r+0x9c>
 80088da:	0758      	lsls	r0, r3, #29
 80088dc:	d512      	bpl.n	8008904 <__swsetup_r+0x5c>
 80088de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088e0:	b141      	cbz	r1, 80088f4 <__swsetup_r+0x4c>
 80088e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088e6:	4299      	cmp	r1, r3
 80088e8:	d002      	beq.n	80088f0 <__swsetup_r+0x48>
 80088ea:	4628      	mov	r0, r5
 80088ec:	f000 ff2e 	bl	800974c <_free_r>
 80088f0:	2300      	movs	r3, #0
 80088f2:	6363      	str	r3, [r4, #52]	; 0x34
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	2300      	movs	r3, #0
 80088fe:	6063      	str	r3, [r4, #4]
 8008900:	6923      	ldr	r3, [r4, #16]
 8008902:	6023      	str	r3, [r4, #0]
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	f043 0308 	orr.w	r3, r3, #8
 800890a:	81a3      	strh	r3, [r4, #12]
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	b94b      	cbnz	r3, 8008924 <__swsetup_r+0x7c>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891a:	d003      	beq.n	8008924 <__swsetup_r+0x7c>
 800891c:	4621      	mov	r1, r4
 800891e:	4628      	mov	r0, r5
 8008920:	f001 fdbc 	bl	800a49c <__smakebuf_r>
 8008924:	89a0      	ldrh	r0, [r4, #12]
 8008926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800892a:	f010 0301 	ands.w	r3, r0, #1
 800892e:	d00a      	beq.n	8008946 <__swsetup_r+0x9e>
 8008930:	2300      	movs	r3, #0
 8008932:	60a3      	str	r3, [r4, #8]
 8008934:	6963      	ldr	r3, [r4, #20]
 8008936:	425b      	negs	r3, r3
 8008938:	61a3      	str	r3, [r4, #24]
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	b943      	cbnz	r3, 8008950 <__swsetup_r+0xa8>
 800893e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008942:	d1c4      	bne.n	80088ce <__swsetup_r+0x26>
 8008944:	bd38      	pop	{r3, r4, r5, pc}
 8008946:	0781      	lsls	r1, r0, #30
 8008948:	bf58      	it	pl
 800894a:	6963      	ldrpl	r3, [r4, #20]
 800894c:	60a3      	str	r3, [r4, #8]
 800894e:	e7f4      	b.n	800893a <__swsetup_r+0x92>
 8008950:	2000      	movs	r0, #0
 8008952:	e7f7      	b.n	8008944 <__swsetup_r+0x9c>
 8008954:	20000064 	.word	0x20000064

08008958 <memset>:
 8008958:	4402      	add	r2, r0
 800895a:	4603      	mov	r3, r0
 800895c:	4293      	cmp	r3, r2
 800895e:	d100      	bne.n	8008962 <memset+0xa>
 8008960:	4770      	bx	lr
 8008962:	f803 1b01 	strb.w	r1, [r3], #1
 8008966:	e7f9      	b.n	800895c <memset+0x4>

08008968 <_localeconv_r>:
 8008968:	4800      	ldr	r0, [pc, #0]	; (800896c <_localeconv_r+0x4>)
 800896a:	4770      	bx	lr
 800896c:	20000158 	.word	0x20000158

08008970 <_close_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4d06      	ldr	r5, [pc, #24]	; (800898c <_close_r+0x1c>)
 8008974:	2300      	movs	r3, #0
 8008976:	4604      	mov	r4, r0
 8008978:	4608      	mov	r0, r1
 800897a:	602b      	str	r3, [r5, #0]
 800897c:	f7f8 fef5 	bl	800176a <_close>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	d102      	bne.n	800898a <_close_r+0x1a>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	b103      	cbz	r3, 800898a <_close_r+0x1a>
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	20000bfc 	.word	0x20000bfc

08008990 <_lseek_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d07      	ldr	r5, [pc, #28]	; (80089b0 <_lseek_r+0x20>)
 8008994:	4604      	mov	r4, r0
 8008996:	4608      	mov	r0, r1
 8008998:	4611      	mov	r1, r2
 800899a:	2200      	movs	r2, #0
 800899c:	602a      	str	r2, [r5, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	f7f8 ff0a 	bl	80017b8 <_lseek>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_lseek_r+0x1e>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_lseek_r+0x1e>
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	20000bfc 	.word	0x20000bfc

080089b4 <_read_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4d07      	ldr	r5, [pc, #28]	; (80089d4 <_read_r+0x20>)
 80089b8:	4604      	mov	r4, r0
 80089ba:	4608      	mov	r0, r1
 80089bc:	4611      	mov	r1, r2
 80089be:	2200      	movs	r2, #0
 80089c0:	602a      	str	r2, [r5, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	f7f8 feb4 	bl	8001730 <_read>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_read_r+0x1e>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_read_r+0x1e>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	20000bfc 	.word	0x20000bfc

080089d8 <_write_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d07      	ldr	r5, [pc, #28]	; (80089f8 <_write_r+0x20>)
 80089dc:	4604      	mov	r4, r0
 80089de:	4608      	mov	r0, r1
 80089e0:	4611      	mov	r1, r2
 80089e2:	2200      	movs	r2, #0
 80089e4:	602a      	str	r2, [r5, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	f7f8 faf3 	bl	8000fd2 <_write>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_write_r+0x1e>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_write_r+0x1e>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	20000bfc 	.word	0x20000bfc

080089fc <__errno>:
 80089fc:	4b01      	ldr	r3, [pc, #4]	; (8008a04 <__errno+0x8>)
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	20000064 	.word	0x20000064

08008a08 <__libc_init_array>:
 8008a08:	b570      	push	{r4, r5, r6, lr}
 8008a0a:	4d0d      	ldr	r5, [pc, #52]	; (8008a40 <__libc_init_array+0x38>)
 8008a0c:	4c0d      	ldr	r4, [pc, #52]	; (8008a44 <__libc_init_array+0x3c>)
 8008a0e:	1b64      	subs	r4, r4, r5
 8008a10:	10a4      	asrs	r4, r4, #2
 8008a12:	2600      	movs	r6, #0
 8008a14:	42a6      	cmp	r6, r4
 8008a16:	d109      	bne.n	8008a2c <__libc_init_array+0x24>
 8008a18:	4d0b      	ldr	r5, [pc, #44]	; (8008a48 <__libc_init_array+0x40>)
 8008a1a:	4c0c      	ldr	r4, [pc, #48]	; (8008a4c <__libc_init_array+0x44>)
 8008a1c:	f001 fffe 	bl	800aa1c <_init>
 8008a20:	1b64      	subs	r4, r4, r5
 8008a22:	10a4      	asrs	r4, r4, #2
 8008a24:	2600      	movs	r6, #0
 8008a26:	42a6      	cmp	r6, r4
 8008a28:	d105      	bne.n	8008a36 <__libc_init_array+0x2e>
 8008a2a:	bd70      	pop	{r4, r5, r6, pc}
 8008a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a30:	4798      	blx	r3
 8008a32:	3601      	adds	r6, #1
 8008a34:	e7ee      	b.n	8008a14 <__libc_init_array+0xc>
 8008a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a3a:	4798      	blx	r3
 8008a3c:	3601      	adds	r6, #1
 8008a3e:	e7f2      	b.n	8008a26 <__libc_init_array+0x1e>
 8008a40:	0800ae0c 	.word	0x0800ae0c
 8008a44:	0800ae0c 	.word	0x0800ae0c
 8008a48:	0800ae0c 	.word	0x0800ae0c
 8008a4c:	0800ae10 	.word	0x0800ae10

08008a50 <__retarget_lock_init_recursive>:
 8008a50:	4770      	bx	lr

08008a52 <__retarget_lock_acquire_recursive>:
 8008a52:	4770      	bx	lr

08008a54 <__retarget_lock_release_recursive>:
 8008a54:	4770      	bx	lr

08008a56 <quorem>:
 8008a56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5a:	6903      	ldr	r3, [r0, #16]
 8008a5c:	690c      	ldr	r4, [r1, #16]
 8008a5e:	42a3      	cmp	r3, r4
 8008a60:	4607      	mov	r7, r0
 8008a62:	db7e      	blt.n	8008b62 <quorem+0x10c>
 8008a64:	3c01      	subs	r4, #1
 8008a66:	f101 0814 	add.w	r8, r1, #20
 8008a6a:	f100 0514 	add.w	r5, r0, #20
 8008a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a88:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a8c:	d331      	bcc.n	8008af2 <quorem+0x9c>
 8008a8e:	f04f 0e00 	mov.w	lr, #0
 8008a92:	4640      	mov	r0, r8
 8008a94:	46ac      	mov	ip, r5
 8008a96:	46f2      	mov	sl, lr
 8008a98:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a9c:	b293      	uxth	r3, r2
 8008a9e:	fb06 e303 	mla	r3, r6, r3, lr
 8008aa2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008aa6:	0c1a      	lsrs	r2, r3, #16
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	ebaa 0303 	sub.w	r3, sl, r3
 8008aae:	f8dc a000 	ldr.w	sl, [ip]
 8008ab2:	fa13 f38a 	uxtah	r3, r3, sl
 8008ab6:	fb06 220e 	mla	r2, r6, lr, r2
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	9b00      	ldr	r3, [sp, #0]
 8008abe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ac2:	b292      	uxth	r2, r2
 8008ac4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ac8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008acc:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ad0:	4581      	cmp	r9, r0
 8008ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ad6:	f84c 3b04 	str.w	r3, [ip], #4
 8008ada:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ade:	d2db      	bcs.n	8008a98 <quorem+0x42>
 8008ae0:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ae4:	b92b      	cbnz	r3, 8008af2 <quorem+0x9c>
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	3b04      	subs	r3, #4
 8008aea:	429d      	cmp	r5, r3
 8008aec:	461a      	mov	r2, r3
 8008aee:	d32c      	bcc.n	8008b4a <quorem+0xf4>
 8008af0:	613c      	str	r4, [r7, #16]
 8008af2:	4638      	mov	r0, r7
 8008af4:	f001 f9a6 	bl	8009e44 <__mcmp>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	db22      	blt.n	8008b42 <quorem+0xec>
 8008afc:	3601      	adds	r6, #1
 8008afe:	4629      	mov	r1, r5
 8008b00:	2000      	movs	r0, #0
 8008b02:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b06:	f8d1 c000 	ldr.w	ip, [r1]
 8008b0a:	b293      	uxth	r3, r2
 8008b0c:	1ac3      	subs	r3, r0, r3
 8008b0e:	0c12      	lsrs	r2, r2, #16
 8008b10:	fa13 f38c 	uxtah	r3, r3, ip
 8008b14:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b22:	45c1      	cmp	r9, r8
 8008b24:	f841 3b04 	str.w	r3, [r1], #4
 8008b28:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b2c:	d2e9      	bcs.n	8008b02 <quorem+0xac>
 8008b2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b36:	b922      	cbnz	r2, 8008b42 <quorem+0xec>
 8008b38:	3b04      	subs	r3, #4
 8008b3a:	429d      	cmp	r5, r3
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	d30a      	bcc.n	8008b56 <quorem+0x100>
 8008b40:	613c      	str	r4, [r7, #16]
 8008b42:	4630      	mov	r0, r6
 8008b44:	b003      	add	sp, #12
 8008b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	3b04      	subs	r3, #4
 8008b4e:	2a00      	cmp	r2, #0
 8008b50:	d1ce      	bne.n	8008af0 <quorem+0x9a>
 8008b52:	3c01      	subs	r4, #1
 8008b54:	e7c9      	b.n	8008aea <quorem+0x94>
 8008b56:	6812      	ldr	r2, [r2, #0]
 8008b58:	3b04      	subs	r3, #4
 8008b5a:	2a00      	cmp	r2, #0
 8008b5c:	d1f0      	bne.n	8008b40 <quorem+0xea>
 8008b5e:	3c01      	subs	r4, #1
 8008b60:	e7eb      	b.n	8008b3a <quorem+0xe4>
 8008b62:	2000      	movs	r0, #0
 8008b64:	e7ee      	b.n	8008b44 <quorem+0xee>
	...

08008b68 <_dtoa_r>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	ed2d 8b04 	vpush	{d8-d9}
 8008b70:	69c5      	ldr	r5, [r0, #28]
 8008b72:	b093      	sub	sp, #76	; 0x4c
 8008b74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b78:	ec57 6b10 	vmov	r6, r7, d0
 8008b7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b80:	9107      	str	r1, [sp, #28]
 8008b82:	4604      	mov	r4, r0
 8008b84:	920a      	str	r2, [sp, #40]	; 0x28
 8008b86:	930d      	str	r3, [sp, #52]	; 0x34
 8008b88:	b975      	cbnz	r5, 8008ba8 <_dtoa_r+0x40>
 8008b8a:	2010      	movs	r0, #16
 8008b8c:	f000 fe2a 	bl	80097e4 <malloc>
 8008b90:	4602      	mov	r2, r0
 8008b92:	61e0      	str	r0, [r4, #28]
 8008b94:	b920      	cbnz	r0, 8008ba0 <_dtoa_r+0x38>
 8008b96:	4bae      	ldr	r3, [pc, #696]	; (8008e50 <_dtoa_r+0x2e8>)
 8008b98:	21ef      	movs	r1, #239	; 0xef
 8008b9a:	48ae      	ldr	r0, [pc, #696]	; (8008e54 <_dtoa_r+0x2ec>)
 8008b9c:	f001 fd14 	bl	800a5c8 <__assert_func>
 8008ba0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ba4:	6005      	str	r5, [r0, #0]
 8008ba6:	60c5      	str	r5, [r0, #12]
 8008ba8:	69e3      	ldr	r3, [r4, #28]
 8008baa:	6819      	ldr	r1, [r3, #0]
 8008bac:	b151      	cbz	r1, 8008bc4 <_dtoa_r+0x5c>
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	604a      	str	r2, [r1, #4]
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4093      	lsls	r3, r2
 8008bb6:	608b      	str	r3, [r1, #8]
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 ff07 	bl	80099cc <_Bfree>
 8008bbe:	69e3      	ldr	r3, [r4, #28]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	1e3b      	subs	r3, r7, #0
 8008bc6:	bfbb      	ittet	lt
 8008bc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bcc:	9303      	strlt	r3, [sp, #12]
 8008bce:	2300      	movge	r3, #0
 8008bd0:	2201      	movlt	r2, #1
 8008bd2:	bfac      	ite	ge
 8008bd4:	f8c8 3000 	strge.w	r3, [r8]
 8008bd8:	f8c8 2000 	strlt.w	r2, [r8]
 8008bdc:	4b9e      	ldr	r3, [pc, #632]	; (8008e58 <_dtoa_r+0x2f0>)
 8008bde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008be2:	ea33 0308 	bics.w	r3, r3, r8
 8008be6:	d11b      	bne.n	8008c20 <_dtoa_r+0xb8>
 8008be8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bea:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008bf4:	4333      	orrs	r3, r6
 8008bf6:	f000 8593 	beq.w	8009720 <_dtoa_r+0xbb8>
 8008bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bfc:	b963      	cbnz	r3, 8008c18 <_dtoa_r+0xb0>
 8008bfe:	4b97      	ldr	r3, [pc, #604]	; (8008e5c <_dtoa_r+0x2f4>)
 8008c00:	e027      	b.n	8008c52 <_dtoa_r+0xea>
 8008c02:	4b97      	ldr	r3, [pc, #604]	; (8008e60 <_dtoa_r+0x2f8>)
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	3308      	adds	r3, #8
 8008c08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	9800      	ldr	r0, [sp, #0]
 8008c0e:	b013      	add	sp, #76	; 0x4c
 8008c10:	ecbd 8b04 	vpop	{d8-d9}
 8008c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c18:	4b90      	ldr	r3, [pc, #576]	; (8008e5c <_dtoa_r+0x2f4>)
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	3303      	adds	r3, #3
 8008c1e:	e7f3      	b.n	8008c08 <_dtoa_r+0xa0>
 8008c20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c24:	2200      	movs	r2, #0
 8008c26:	ec51 0b17 	vmov	r0, r1, d7
 8008c2a:	eeb0 8a47 	vmov.f32	s16, s14
 8008c2e:	eef0 8a67 	vmov.f32	s17, s15
 8008c32:	2300      	movs	r3, #0
 8008c34:	f7f7 ff68 	bl	8000b08 <__aeabi_dcmpeq>
 8008c38:	4681      	mov	r9, r0
 8008c3a:	b160      	cbz	r0, 8008c56 <_dtoa_r+0xee>
 8008c3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c3e:	2301      	movs	r3, #1
 8008c40:	6013      	str	r3, [r2, #0]
 8008c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 8568 	beq.w	800971a <_dtoa_r+0xbb2>
 8008c4a:	4b86      	ldr	r3, [pc, #536]	; (8008e64 <_dtoa_r+0x2fc>)
 8008c4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	e7da      	b.n	8008c0c <_dtoa_r+0xa4>
 8008c56:	aa10      	add	r2, sp, #64	; 0x40
 8008c58:	a911      	add	r1, sp, #68	; 0x44
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	eeb0 0a48 	vmov.f32	s0, s16
 8008c60:	eef0 0a68 	vmov.f32	s1, s17
 8008c64:	f001 f994 	bl	8009f90 <__d2b>
 8008c68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008c6c:	4682      	mov	sl, r0
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	d07f      	beq.n	8008d72 <_dtoa_r+0x20a>
 8008c72:	ee18 3a90 	vmov	r3, s17
 8008c76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008c7e:	ec51 0b18 	vmov	r0, r1, d8
 8008c82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008c8e:	4619      	mov	r1, r3
 8008c90:	2200      	movs	r2, #0
 8008c92:	4b75      	ldr	r3, [pc, #468]	; (8008e68 <_dtoa_r+0x300>)
 8008c94:	f7f7 fb18 	bl	80002c8 <__aeabi_dsub>
 8008c98:	a367      	add	r3, pc, #412	; (adr r3, 8008e38 <_dtoa_r+0x2d0>)
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	f7f7 fccb 	bl	8000638 <__aeabi_dmul>
 8008ca2:	a367      	add	r3, pc, #412	; (adr r3, 8008e40 <_dtoa_r+0x2d8>)
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	f7f7 fb10 	bl	80002cc <__adddf3>
 8008cac:	4606      	mov	r6, r0
 8008cae:	4628      	mov	r0, r5
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	f7f7 fc57 	bl	8000564 <__aeabi_i2d>
 8008cb6:	a364      	add	r3, pc, #400	; (adr r3, 8008e48 <_dtoa_r+0x2e0>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	f7f7 fcbc 	bl	8000638 <__aeabi_dmul>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	4639      	mov	r1, r7
 8008cc8:	f7f7 fb00 	bl	80002cc <__adddf3>
 8008ccc:	4606      	mov	r6, r0
 8008cce:	460f      	mov	r7, r1
 8008cd0:	f7f7 ff62 	bl	8000b98 <__aeabi_d2iz>
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4683      	mov	fp, r0
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4630      	mov	r0, r6
 8008cdc:	4639      	mov	r1, r7
 8008cde:	f7f7 ff1d 	bl	8000b1c <__aeabi_dcmplt>
 8008ce2:	b148      	cbz	r0, 8008cf8 <_dtoa_r+0x190>
 8008ce4:	4658      	mov	r0, fp
 8008ce6:	f7f7 fc3d 	bl	8000564 <__aeabi_i2d>
 8008cea:	4632      	mov	r2, r6
 8008cec:	463b      	mov	r3, r7
 8008cee:	f7f7 ff0b 	bl	8000b08 <__aeabi_dcmpeq>
 8008cf2:	b908      	cbnz	r0, 8008cf8 <_dtoa_r+0x190>
 8008cf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008cf8:	f1bb 0f16 	cmp.w	fp, #22
 8008cfc:	d857      	bhi.n	8008dae <_dtoa_r+0x246>
 8008cfe:	4b5b      	ldr	r3, [pc, #364]	; (8008e6c <_dtoa_r+0x304>)
 8008d00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d08:	ec51 0b18 	vmov	r0, r1, d8
 8008d0c:	f7f7 ff06 	bl	8000b1c <__aeabi_dcmplt>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d04e      	beq.n	8008db2 <_dtoa_r+0x24a>
 8008d14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d18:	2300      	movs	r3, #0
 8008d1a:	930c      	str	r3, [sp, #48]	; 0x30
 8008d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d1e:	1b5b      	subs	r3, r3, r5
 8008d20:	1e5a      	subs	r2, r3, #1
 8008d22:	bf45      	ittet	mi
 8008d24:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d28:	9305      	strmi	r3, [sp, #20]
 8008d2a:	2300      	movpl	r3, #0
 8008d2c:	2300      	movmi	r3, #0
 8008d2e:	9206      	str	r2, [sp, #24]
 8008d30:	bf54      	ite	pl
 8008d32:	9305      	strpl	r3, [sp, #20]
 8008d34:	9306      	strmi	r3, [sp, #24]
 8008d36:	f1bb 0f00 	cmp.w	fp, #0
 8008d3a:	db3c      	blt.n	8008db6 <_dtoa_r+0x24e>
 8008d3c:	9b06      	ldr	r3, [sp, #24]
 8008d3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008d42:	445b      	add	r3, fp
 8008d44:	9306      	str	r3, [sp, #24]
 8008d46:	2300      	movs	r3, #0
 8008d48:	9308      	str	r3, [sp, #32]
 8008d4a:	9b07      	ldr	r3, [sp, #28]
 8008d4c:	2b09      	cmp	r3, #9
 8008d4e:	d868      	bhi.n	8008e22 <_dtoa_r+0x2ba>
 8008d50:	2b05      	cmp	r3, #5
 8008d52:	bfc4      	itt	gt
 8008d54:	3b04      	subgt	r3, #4
 8008d56:	9307      	strgt	r3, [sp, #28]
 8008d58:	9b07      	ldr	r3, [sp, #28]
 8008d5a:	f1a3 0302 	sub.w	r3, r3, #2
 8008d5e:	bfcc      	ite	gt
 8008d60:	2500      	movgt	r5, #0
 8008d62:	2501      	movle	r5, #1
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	f200 8085 	bhi.w	8008e74 <_dtoa_r+0x30c>
 8008d6a:	e8df f003 	tbb	[pc, r3]
 8008d6e:	3b2e      	.short	0x3b2e
 8008d70:	5839      	.short	0x5839
 8008d72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d76:	441d      	add	r5, r3
 8008d78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d7c:	2b20      	cmp	r3, #32
 8008d7e:	bfc1      	itttt	gt
 8008d80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d84:	fa08 f803 	lslgt.w	r8, r8, r3
 8008d88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008d8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008d90:	bfd6      	itet	le
 8008d92:	f1c3 0320 	rsble	r3, r3, #32
 8008d96:	ea48 0003 	orrgt.w	r0, r8, r3
 8008d9a:	fa06 f003 	lslle.w	r0, r6, r3
 8008d9e:	f7f7 fbd1 	bl	8000544 <__aeabi_ui2d>
 8008da2:	2201      	movs	r2, #1
 8008da4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008da8:	3d01      	subs	r5, #1
 8008daa:	920e      	str	r2, [sp, #56]	; 0x38
 8008dac:	e76f      	b.n	8008c8e <_dtoa_r+0x126>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e7b3      	b.n	8008d1a <_dtoa_r+0x1b2>
 8008db2:	900c      	str	r0, [sp, #48]	; 0x30
 8008db4:	e7b2      	b.n	8008d1c <_dtoa_r+0x1b4>
 8008db6:	9b05      	ldr	r3, [sp, #20]
 8008db8:	eba3 030b 	sub.w	r3, r3, fp
 8008dbc:	9305      	str	r3, [sp, #20]
 8008dbe:	f1cb 0300 	rsb	r3, fp, #0
 8008dc2:	9308      	str	r3, [sp, #32]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dc8:	e7bf      	b.n	8008d4a <_dtoa_r+0x1e2>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	dc52      	bgt.n	8008e7a <_dtoa_r+0x312>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	9304      	str	r3, [sp, #16]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	920a      	str	r2, [sp, #40]	; 0x28
 8008dde:	e00b      	b.n	8008df8 <_dtoa_r+0x290>
 8008de0:	2301      	movs	r3, #1
 8008de2:	e7f3      	b.n	8008dcc <_dtoa_r+0x264>
 8008de4:	2300      	movs	r3, #0
 8008de6:	9309      	str	r3, [sp, #36]	; 0x24
 8008de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dea:	445b      	add	r3, fp
 8008dec:	9301      	str	r3, [sp, #4]
 8008dee:	3301      	adds	r3, #1
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	9304      	str	r3, [sp, #16]
 8008df4:	bfb8      	it	lt
 8008df6:	2301      	movlt	r3, #1
 8008df8:	69e0      	ldr	r0, [r4, #28]
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	f102 0614 	add.w	r6, r2, #20
 8008e02:	429e      	cmp	r6, r3
 8008e04:	d93d      	bls.n	8008e82 <_dtoa_r+0x31a>
 8008e06:	6041      	str	r1, [r0, #4]
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 fd9f 	bl	800994c <_Balloc>
 8008e0e:	9000      	str	r0, [sp, #0]
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d139      	bne.n	8008e88 <_dtoa_r+0x320>
 8008e14:	4b16      	ldr	r3, [pc, #88]	; (8008e70 <_dtoa_r+0x308>)
 8008e16:	4602      	mov	r2, r0
 8008e18:	f240 11af 	movw	r1, #431	; 0x1af
 8008e1c:	e6bd      	b.n	8008b9a <_dtoa_r+0x32>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e7e1      	b.n	8008de6 <_dtoa_r+0x27e>
 8008e22:	2501      	movs	r5, #1
 8008e24:	2300      	movs	r3, #0
 8008e26:	9307      	str	r3, [sp, #28]
 8008e28:	9509      	str	r5, [sp, #36]	; 0x24
 8008e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	9304      	str	r3, [sp, #16]
 8008e32:	2200      	movs	r2, #0
 8008e34:	2312      	movs	r3, #18
 8008e36:	e7d1      	b.n	8008ddc <_dtoa_r+0x274>
 8008e38:	636f4361 	.word	0x636f4361
 8008e3c:	3fd287a7 	.word	0x3fd287a7
 8008e40:	8b60c8b3 	.word	0x8b60c8b3
 8008e44:	3fc68a28 	.word	0x3fc68a28
 8008e48:	509f79fb 	.word	0x509f79fb
 8008e4c:	3fd34413 	.word	0x3fd34413
 8008e50:	0800aad1 	.word	0x0800aad1
 8008e54:	0800aae8 	.word	0x0800aae8
 8008e58:	7ff00000 	.word	0x7ff00000
 8008e5c:	0800aacd 	.word	0x0800aacd
 8008e60:	0800aac4 	.word	0x0800aac4
 8008e64:	0800aaa1 	.word	0x0800aaa1
 8008e68:	3ff80000 	.word	0x3ff80000
 8008e6c:	0800abd8 	.word	0x0800abd8
 8008e70:	0800ab40 	.word	0x0800ab40
 8008e74:	2301      	movs	r3, #1
 8008e76:	9309      	str	r3, [sp, #36]	; 0x24
 8008e78:	e7d7      	b.n	8008e2a <_dtoa_r+0x2c2>
 8008e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	9304      	str	r3, [sp, #16]
 8008e80:	e7ba      	b.n	8008df8 <_dtoa_r+0x290>
 8008e82:	3101      	adds	r1, #1
 8008e84:	0052      	lsls	r2, r2, #1
 8008e86:	e7ba      	b.n	8008dfe <_dtoa_r+0x296>
 8008e88:	69e3      	ldr	r3, [r4, #28]
 8008e8a:	9a00      	ldr	r2, [sp, #0]
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	9b04      	ldr	r3, [sp, #16]
 8008e90:	2b0e      	cmp	r3, #14
 8008e92:	f200 80a8 	bhi.w	8008fe6 <_dtoa_r+0x47e>
 8008e96:	2d00      	cmp	r5, #0
 8008e98:	f000 80a5 	beq.w	8008fe6 <_dtoa_r+0x47e>
 8008e9c:	f1bb 0f00 	cmp.w	fp, #0
 8008ea0:	dd38      	ble.n	8008f14 <_dtoa_r+0x3ac>
 8008ea2:	4bc0      	ldr	r3, [pc, #768]	; (80091a4 <_dtoa_r+0x63c>)
 8008ea4:	f00b 020f 	and.w	r2, fp, #15
 8008ea8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008eb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008eb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008eb8:	d019      	beq.n	8008eee <_dtoa_r+0x386>
 8008eba:	4bbb      	ldr	r3, [pc, #748]	; (80091a8 <_dtoa_r+0x640>)
 8008ebc:	ec51 0b18 	vmov	r0, r1, d8
 8008ec0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ec4:	f7f7 fce2 	bl	800088c <__aeabi_ddiv>
 8008ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ecc:	f008 080f 	and.w	r8, r8, #15
 8008ed0:	2503      	movs	r5, #3
 8008ed2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80091a8 <_dtoa_r+0x640>
 8008ed6:	f1b8 0f00 	cmp.w	r8, #0
 8008eda:	d10a      	bne.n	8008ef2 <_dtoa_r+0x38a>
 8008edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	f7f7 fcd2 	bl	800088c <__aeabi_ddiv>
 8008ee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eec:	e02b      	b.n	8008f46 <_dtoa_r+0x3de>
 8008eee:	2502      	movs	r5, #2
 8008ef0:	e7ef      	b.n	8008ed2 <_dtoa_r+0x36a>
 8008ef2:	f018 0f01 	tst.w	r8, #1
 8008ef6:	d008      	beq.n	8008f0a <_dtoa_r+0x3a2>
 8008ef8:	4630      	mov	r0, r6
 8008efa:	4639      	mov	r1, r7
 8008efc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f00:	f7f7 fb9a 	bl	8000638 <__aeabi_dmul>
 8008f04:	3501      	adds	r5, #1
 8008f06:	4606      	mov	r6, r0
 8008f08:	460f      	mov	r7, r1
 8008f0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f0e:	f109 0908 	add.w	r9, r9, #8
 8008f12:	e7e0      	b.n	8008ed6 <_dtoa_r+0x36e>
 8008f14:	f000 809f 	beq.w	8009056 <_dtoa_r+0x4ee>
 8008f18:	f1cb 0600 	rsb	r6, fp, #0
 8008f1c:	4ba1      	ldr	r3, [pc, #644]	; (80091a4 <_dtoa_r+0x63c>)
 8008f1e:	4fa2      	ldr	r7, [pc, #648]	; (80091a8 <_dtoa_r+0x640>)
 8008f20:	f006 020f 	and.w	r2, r6, #15
 8008f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	ec51 0b18 	vmov	r0, r1, d8
 8008f30:	f7f7 fb82 	bl	8000638 <__aeabi_dmul>
 8008f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f38:	1136      	asrs	r6, r6, #4
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	2502      	movs	r5, #2
 8008f3e:	2e00      	cmp	r6, #0
 8008f40:	d17e      	bne.n	8009040 <_dtoa_r+0x4d8>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1d0      	bne.n	8008ee8 <_dtoa_r+0x380>
 8008f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 8084 	beq.w	800905a <_dtoa_r+0x4f2>
 8008f52:	4b96      	ldr	r3, [pc, #600]	; (80091ac <_dtoa_r+0x644>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	4640      	mov	r0, r8
 8008f58:	4649      	mov	r1, r9
 8008f5a:	f7f7 fddf 	bl	8000b1c <__aeabi_dcmplt>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d07b      	beq.n	800905a <_dtoa_r+0x4f2>
 8008f62:	9b04      	ldr	r3, [sp, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d078      	beq.n	800905a <_dtoa_r+0x4f2>
 8008f68:	9b01      	ldr	r3, [sp, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	dd39      	ble.n	8008fe2 <_dtoa_r+0x47a>
 8008f6e:	4b90      	ldr	r3, [pc, #576]	; (80091b0 <_dtoa_r+0x648>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	4640      	mov	r0, r8
 8008f74:	4649      	mov	r1, r9
 8008f76:	f7f7 fb5f 	bl	8000638 <__aeabi_dmul>
 8008f7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f7e:	9e01      	ldr	r6, [sp, #4]
 8008f80:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f84:	3501      	adds	r5, #1
 8008f86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f7f7 faea 	bl	8000564 <__aeabi_i2d>
 8008f90:	4642      	mov	r2, r8
 8008f92:	464b      	mov	r3, r9
 8008f94:	f7f7 fb50 	bl	8000638 <__aeabi_dmul>
 8008f98:	4b86      	ldr	r3, [pc, #536]	; (80091b4 <_dtoa_r+0x64c>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f7f7 f996 	bl	80002cc <__adddf3>
 8008fa0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fa8:	9303      	str	r3, [sp, #12]
 8008faa:	2e00      	cmp	r6, #0
 8008fac:	d158      	bne.n	8009060 <_dtoa_r+0x4f8>
 8008fae:	4b82      	ldr	r3, [pc, #520]	; (80091b8 <_dtoa_r+0x650>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	f7f7 f987 	bl	80002c8 <__aeabi_dsub>
 8008fba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	4689      	mov	r9, r1
 8008fc2:	f7f7 fdc9 	bl	8000b58 <__aeabi_dcmpgt>
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f040 8296 	bne.w	80094f8 <_dtoa_r+0x990>
 8008fcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	f7f7 fda0 	bl	8000b1c <__aeabi_dcmplt>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f040 8289 	bne.w	80094f4 <_dtoa_r+0x98c>
 8008fe2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008fe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f2c0 814e 	blt.w	800928a <_dtoa_r+0x722>
 8008fee:	f1bb 0f0e 	cmp.w	fp, #14
 8008ff2:	f300 814a 	bgt.w	800928a <_dtoa_r+0x722>
 8008ff6:	4b6b      	ldr	r3, [pc, #428]	; (80091a4 <_dtoa_r+0x63c>)
 8008ff8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009002:	2b00      	cmp	r3, #0
 8009004:	f280 80dc 	bge.w	80091c0 <_dtoa_r+0x658>
 8009008:	9b04      	ldr	r3, [sp, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	f300 80d8 	bgt.w	80091c0 <_dtoa_r+0x658>
 8009010:	f040 826f 	bne.w	80094f2 <_dtoa_r+0x98a>
 8009014:	4b68      	ldr	r3, [pc, #416]	; (80091b8 <_dtoa_r+0x650>)
 8009016:	2200      	movs	r2, #0
 8009018:	4640      	mov	r0, r8
 800901a:	4649      	mov	r1, r9
 800901c:	f7f7 fb0c 	bl	8000638 <__aeabi_dmul>
 8009020:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009024:	f7f7 fd8e 	bl	8000b44 <__aeabi_dcmpge>
 8009028:	9e04      	ldr	r6, [sp, #16]
 800902a:	4637      	mov	r7, r6
 800902c:	2800      	cmp	r0, #0
 800902e:	f040 8245 	bne.w	80094bc <_dtoa_r+0x954>
 8009032:	9d00      	ldr	r5, [sp, #0]
 8009034:	2331      	movs	r3, #49	; 0x31
 8009036:	f805 3b01 	strb.w	r3, [r5], #1
 800903a:	f10b 0b01 	add.w	fp, fp, #1
 800903e:	e241      	b.n	80094c4 <_dtoa_r+0x95c>
 8009040:	07f2      	lsls	r2, r6, #31
 8009042:	d505      	bpl.n	8009050 <_dtoa_r+0x4e8>
 8009044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009048:	f7f7 faf6 	bl	8000638 <__aeabi_dmul>
 800904c:	3501      	adds	r5, #1
 800904e:	2301      	movs	r3, #1
 8009050:	1076      	asrs	r6, r6, #1
 8009052:	3708      	adds	r7, #8
 8009054:	e773      	b.n	8008f3e <_dtoa_r+0x3d6>
 8009056:	2502      	movs	r5, #2
 8009058:	e775      	b.n	8008f46 <_dtoa_r+0x3de>
 800905a:	9e04      	ldr	r6, [sp, #16]
 800905c:	465f      	mov	r7, fp
 800905e:	e792      	b.n	8008f86 <_dtoa_r+0x41e>
 8009060:	9900      	ldr	r1, [sp, #0]
 8009062:	4b50      	ldr	r3, [pc, #320]	; (80091a4 <_dtoa_r+0x63c>)
 8009064:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009068:	4431      	add	r1, r6
 800906a:	9102      	str	r1, [sp, #8]
 800906c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800906e:	eeb0 9a47 	vmov.f32	s18, s14
 8009072:	eef0 9a67 	vmov.f32	s19, s15
 8009076:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800907a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800907e:	2900      	cmp	r1, #0
 8009080:	d044      	beq.n	800910c <_dtoa_r+0x5a4>
 8009082:	494e      	ldr	r1, [pc, #312]	; (80091bc <_dtoa_r+0x654>)
 8009084:	2000      	movs	r0, #0
 8009086:	f7f7 fc01 	bl	800088c <__aeabi_ddiv>
 800908a:	ec53 2b19 	vmov	r2, r3, d9
 800908e:	f7f7 f91b 	bl	80002c8 <__aeabi_dsub>
 8009092:	9d00      	ldr	r5, [sp, #0]
 8009094:	ec41 0b19 	vmov	d9, r0, r1
 8009098:	4649      	mov	r1, r9
 800909a:	4640      	mov	r0, r8
 800909c:	f7f7 fd7c 	bl	8000b98 <__aeabi_d2iz>
 80090a0:	4606      	mov	r6, r0
 80090a2:	f7f7 fa5f 	bl	8000564 <__aeabi_i2d>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4640      	mov	r0, r8
 80090ac:	4649      	mov	r1, r9
 80090ae:	f7f7 f90b 	bl	80002c8 <__aeabi_dsub>
 80090b2:	3630      	adds	r6, #48	; 0x30
 80090b4:	f805 6b01 	strb.w	r6, [r5], #1
 80090b8:	ec53 2b19 	vmov	r2, r3, d9
 80090bc:	4680      	mov	r8, r0
 80090be:	4689      	mov	r9, r1
 80090c0:	f7f7 fd2c 	bl	8000b1c <__aeabi_dcmplt>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d164      	bne.n	8009192 <_dtoa_r+0x62a>
 80090c8:	4642      	mov	r2, r8
 80090ca:	464b      	mov	r3, r9
 80090cc:	4937      	ldr	r1, [pc, #220]	; (80091ac <_dtoa_r+0x644>)
 80090ce:	2000      	movs	r0, #0
 80090d0:	f7f7 f8fa 	bl	80002c8 <__aeabi_dsub>
 80090d4:	ec53 2b19 	vmov	r2, r3, d9
 80090d8:	f7f7 fd20 	bl	8000b1c <__aeabi_dcmplt>
 80090dc:	2800      	cmp	r0, #0
 80090de:	f040 80b6 	bne.w	800924e <_dtoa_r+0x6e6>
 80090e2:	9b02      	ldr	r3, [sp, #8]
 80090e4:	429d      	cmp	r5, r3
 80090e6:	f43f af7c 	beq.w	8008fe2 <_dtoa_r+0x47a>
 80090ea:	4b31      	ldr	r3, [pc, #196]	; (80091b0 <_dtoa_r+0x648>)
 80090ec:	ec51 0b19 	vmov	r0, r1, d9
 80090f0:	2200      	movs	r2, #0
 80090f2:	f7f7 faa1 	bl	8000638 <__aeabi_dmul>
 80090f6:	4b2e      	ldr	r3, [pc, #184]	; (80091b0 <_dtoa_r+0x648>)
 80090f8:	ec41 0b19 	vmov	d9, r0, r1
 80090fc:	2200      	movs	r2, #0
 80090fe:	4640      	mov	r0, r8
 8009100:	4649      	mov	r1, r9
 8009102:	f7f7 fa99 	bl	8000638 <__aeabi_dmul>
 8009106:	4680      	mov	r8, r0
 8009108:	4689      	mov	r9, r1
 800910a:	e7c5      	b.n	8009098 <_dtoa_r+0x530>
 800910c:	ec51 0b17 	vmov	r0, r1, d7
 8009110:	f7f7 fa92 	bl	8000638 <__aeabi_dmul>
 8009114:	9b02      	ldr	r3, [sp, #8]
 8009116:	9d00      	ldr	r5, [sp, #0]
 8009118:	930f      	str	r3, [sp, #60]	; 0x3c
 800911a:	ec41 0b19 	vmov	d9, r0, r1
 800911e:	4649      	mov	r1, r9
 8009120:	4640      	mov	r0, r8
 8009122:	f7f7 fd39 	bl	8000b98 <__aeabi_d2iz>
 8009126:	4606      	mov	r6, r0
 8009128:	f7f7 fa1c 	bl	8000564 <__aeabi_i2d>
 800912c:	3630      	adds	r6, #48	; 0x30
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4640      	mov	r0, r8
 8009134:	4649      	mov	r1, r9
 8009136:	f7f7 f8c7 	bl	80002c8 <__aeabi_dsub>
 800913a:	f805 6b01 	strb.w	r6, [r5], #1
 800913e:	9b02      	ldr	r3, [sp, #8]
 8009140:	429d      	cmp	r5, r3
 8009142:	4680      	mov	r8, r0
 8009144:	4689      	mov	r9, r1
 8009146:	f04f 0200 	mov.w	r2, #0
 800914a:	d124      	bne.n	8009196 <_dtoa_r+0x62e>
 800914c:	4b1b      	ldr	r3, [pc, #108]	; (80091bc <_dtoa_r+0x654>)
 800914e:	ec51 0b19 	vmov	r0, r1, d9
 8009152:	f7f7 f8bb 	bl	80002cc <__adddf3>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f7f7 fcfb 	bl	8000b58 <__aeabi_dcmpgt>
 8009162:	2800      	cmp	r0, #0
 8009164:	d173      	bne.n	800924e <_dtoa_r+0x6e6>
 8009166:	ec53 2b19 	vmov	r2, r3, d9
 800916a:	4914      	ldr	r1, [pc, #80]	; (80091bc <_dtoa_r+0x654>)
 800916c:	2000      	movs	r0, #0
 800916e:	f7f7 f8ab 	bl	80002c8 <__aeabi_dsub>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4640      	mov	r0, r8
 8009178:	4649      	mov	r1, r9
 800917a:	f7f7 fccf 	bl	8000b1c <__aeabi_dcmplt>
 800917e:	2800      	cmp	r0, #0
 8009180:	f43f af2f 	beq.w	8008fe2 <_dtoa_r+0x47a>
 8009184:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009186:	1e6b      	subs	r3, r5, #1
 8009188:	930f      	str	r3, [sp, #60]	; 0x3c
 800918a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800918e:	2b30      	cmp	r3, #48	; 0x30
 8009190:	d0f8      	beq.n	8009184 <_dtoa_r+0x61c>
 8009192:	46bb      	mov	fp, r7
 8009194:	e04a      	b.n	800922c <_dtoa_r+0x6c4>
 8009196:	4b06      	ldr	r3, [pc, #24]	; (80091b0 <_dtoa_r+0x648>)
 8009198:	f7f7 fa4e 	bl	8000638 <__aeabi_dmul>
 800919c:	4680      	mov	r8, r0
 800919e:	4689      	mov	r9, r1
 80091a0:	e7bd      	b.n	800911e <_dtoa_r+0x5b6>
 80091a2:	bf00      	nop
 80091a4:	0800abd8 	.word	0x0800abd8
 80091a8:	0800abb0 	.word	0x0800abb0
 80091ac:	3ff00000 	.word	0x3ff00000
 80091b0:	40240000 	.word	0x40240000
 80091b4:	401c0000 	.word	0x401c0000
 80091b8:	40140000 	.word	0x40140000
 80091bc:	3fe00000 	.word	0x3fe00000
 80091c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091c4:	9d00      	ldr	r5, [sp, #0]
 80091c6:	4642      	mov	r2, r8
 80091c8:	464b      	mov	r3, r9
 80091ca:	4630      	mov	r0, r6
 80091cc:	4639      	mov	r1, r7
 80091ce:	f7f7 fb5d 	bl	800088c <__aeabi_ddiv>
 80091d2:	f7f7 fce1 	bl	8000b98 <__aeabi_d2iz>
 80091d6:	9001      	str	r0, [sp, #4]
 80091d8:	f7f7 f9c4 	bl	8000564 <__aeabi_i2d>
 80091dc:	4642      	mov	r2, r8
 80091de:	464b      	mov	r3, r9
 80091e0:	f7f7 fa2a 	bl	8000638 <__aeabi_dmul>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4630      	mov	r0, r6
 80091ea:	4639      	mov	r1, r7
 80091ec:	f7f7 f86c 	bl	80002c8 <__aeabi_dsub>
 80091f0:	9e01      	ldr	r6, [sp, #4]
 80091f2:	9f04      	ldr	r7, [sp, #16]
 80091f4:	3630      	adds	r6, #48	; 0x30
 80091f6:	f805 6b01 	strb.w	r6, [r5], #1
 80091fa:	9e00      	ldr	r6, [sp, #0]
 80091fc:	1bae      	subs	r6, r5, r6
 80091fe:	42b7      	cmp	r7, r6
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	d134      	bne.n	8009270 <_dtoa_r+0x708>
 8009206:	f7f7 f861 	bl	80002cc <__adddf3>
 800920a:	4642      	mov	r2, r8
 800920c:	464b      	mov	r3, r9
 800920e:	4606      	mov	r6, r0
 8009210:	460f      	mov	r7, r1
 8009212:	f7f7 fca1 	bl	8000b58 <__aeabi_dcmpgt>
 8009216:	b9c8      	cbnz	r0, 800924c <_dtoa_r+0x6e4>
 8009218:	4642      	mov	r2, r8
 800921a:	464b      	mov	r3, r9
 800921c:	4630      	mov	r0, r6
 800921e:	4639      	mov	r1, r7
 8009220:	f7f7 fc72 	bl	8000b08 <__aeabi_dcmpeq>
 8009224:	b110      	cbz	r0, 800922c <_dtoa_r+0x6c4>
 8009226:	9b01      	ldr	r3, [sp, #4]
 8009228:	07db      	lsls	r3, r3, #31
 800922a:	d40f      	bmi.n	800924c <_dtoa_r+0x6e4>
 800922c:	4651      	mov	r1, sl
 800922e:	4620      	mov	r0, r4
 8009230:	f000 fbcc 	bl	80099cc <_Bfree>
 8009234:	2300      	movs	r3, #0
 8009236:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009238:	702b      	strb	r3, [r5, #0]
 800923a:	f10b 0301 	add.w	r3, fp, #1
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009242:	2b00      	cmp	r3, #0
 8009244:	f43f ace2 	beq.w	8008c0c <_dtoa_r+0xa4>
 8009248:	601d      	str	r5, [r3, #0]
 800924a:	e4df      	b.n	8008c0c <_dtoa_r+0xa4>
 800924c:	465f      	mov	r7, fp
 800924e:	462b      	mov	r3, r5
 8009250:	461d      	mov	r5, r3
 8009252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009256:	2a39      	cmp	r2, #57	; 0x39
 8009258:	d106      	bne.n	8009268 <_dtoa_r+0x700>
 800925a:	9a00      	ldr	r2, [sp, #0]
 800925c:	429a      	cmp	r2, r3
 800925e:	d1f7      	bne.n	8009250 <_dtoa_r+0x6e8>
 8009260:	9900      	ldr	r1, [sp, #0]
 8009262:	2230      	movs	r2, #48	; 0x30
 8009264:	3701      	adds	r7, #1
 8009266:	700a      	strb	r2, [r1, #0]
 8009268:	781a      	ldrb	r2, [r3, #0]
 800926a:	3201      	adds	r2, #1
 800926c:	701a      	strb	r2, [r3, #0]
 800926e:	e790      	b.n	8009192 <_dtoa_r+0x62a>
 8009270:	4ba3      	ldr	r3, [pc, #652]	; (8009500 <_dtoa_r+0x998>)
 8009272:	2200      	movs	r2, #0
 8009274:	f7f7 f9e0 	bl	8000638 <__aeabi_dmul>
 8009278:	2200      	movs	r2, #0
 800927a:	2300      	movs	r3, #0
 800927c:	4606      	mov	r6, r0
 800927e:	460f      	mov	r7, r1
 8009280:	f7f7 fc42 	bl	8000b08 <__aeabi_dcmpeq>
 8009284:	2800      	cmp	r0, #0
 8009286:	d09e      	beq.n	80091c6 <_dtoa_r+0x65e>
 8009288:	e7d0      	b.n	800922c <_dtoa_r+0x6c4>
 800928a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800928c:	2a00      	cmp	r2, #0
 800928e:	f000 80ca 	beq.w	8009426 <_dtoa_r+0x8be>
 8009292:	9a07      	ldr	r2, [sp, #28]
 8009294:	2a01      	cmp	r2, #1
 8009296:	f300 80ad 	bgt.w	80093f4 <_dtoa_r+0x88c>
 800929a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800929c:	2a00      	cmp	r2, #0
 800929e:	f000 80a5 	beq.w	80093ec <_dtoa_r+0x884>
 80092a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092a6:	9e08      	ldr	r6, [sp, #32]
 80092a8:	9d05      	ldr	r5, [sp, #20]
 80092aa:	9a05      	ldr	r2, [sp, #20]
 80092ac:	441a      	add	r2, r3
 80092ae:	9205      	str	r2, [sp, #20]
 80092b0:	9a06      	ldr	r2, [sp, #24]
 80092b2:	2101      	movs	r1, #1
 80092b4:	441a      	add	r2, r3
 80092b6:	4620      	mov	r0, r4
 80092b8:	9206      	str	r2, [sp, #24]
 80092ba:	f000 fc3d 	bl	8009b38 <__i2b>
 80092be:	4607      	mov	r7, r0
 80092c0:	b165      	cbz	r5, 80092dc <_dtoa_r+0x774>
 80092c2:	9b06      	ldr	r3, [sp, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	dd09      	ble.n	80092dc <_dtoa_r+0x774>
 80092c8:	42ab      	cmp	r3, r5
 80092ca:	9a05      	ldr	r2, [sp, #20]
 80092cc:	bfa8      	it	ge
 80092ce:	462b      	movge	r3, r5
 80092d0:	1ad2      	subs	r2, r2, r3
 80092d2:	9205      	str	r2, [sp, #20]
 80092d4:	9a06      	ldr	r2, [sp, #24]
 80092d6:	1aed      	subs	r5, r5, r3
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	9306      	str	r3, [sp, #24]
 80092dc:	9b08      	ldr	r3, [sp, #32]
 80092de:	b1f3      	cbz	r3, 800931e <_dtoa_r+0x7b6>
 80092e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 80a3 	beq.w	800942e <_dtoa_r+0x8c6>
 80092e8:	2e00      	cmp	r6, #0
 80092ea:	dd10      	ble.n	800930e <_dtoa_r+0x7a6>
 80092ec:	4639      	mov	r1, r7
 80092ee:	4632      	mov	r2, r6
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 fce1 	bl	8009cb8 <__pow5mult>
 80092f6:	4652      	mov	r2, sl
 80092f8:	4601      	mov	r1, r0
 80092fa:	4607      	mov	r7, r0
 80092fc:	4620      	mov	r0, r4
 80092fe:	f000 fc31 	bl	8009b64 <__multiply>
 8009302:	4651      	mov	r1, sl
 8009304:	4680      	mov	r8, r0
 8009306:	4620      	mov	r0, r4
 8009308:	f000 fb60 	bl	80099cc <_Bfree>
 800930c:	46c2      	mov	sl, r8
 800930e:	9b08      	ldr	r3, [sp, #32]
 8009310:	1b9a      	subs	r2, r3, r6
 8009312:	d004      	beq.n	800931e <_dtoa_r+0x7b6>
 8009314:	4651      	mov	r1, sl
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fcce 	bl	8009cb8 <__pow5mult>
 800931c:	4682      	mov	sl, r0
 800931e:	2101      	movs	r1, #1
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fc09 	bl	8009b38 <__i2b>
 8009326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009328:	2b00      	cmp	r3, #0
 800932a:	4606      	mov	r6, r0
 800932c:	f340 8081 	ble.w	8009432 <_dtoa_r+0x8ca>
 8009330:	461a      	mov	r2, r3
 8009332:	4601      	mov	r1, r0
 8009334:	4620      	mov	r0, r4
 8009336:	f000 fcbf 	bl	8009cb8 <__pow5mult>
 800933a:	9b07      	ldr	r3, [sp, #28]
 800933c:	2b01      	cmp	r3, #1
 800933e:	4606      	mov	r6, r0
 8009340:	dd7a      	ble.n	8009438 <_dtoa_r+0x8d0>
 8009342:	f04f 0800 	mov.w	r8, #0
 8009346:	6933      	ldr	r3, [r6, #16]
 8009348:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800934c:	6918      	ldr	r0, [r3, #16]
 800934e:	f000 fba5 	bl	8009a9c <__hi0bits>
 8009352:	f1c0 0020 	rsb	r0, r0, #32
 8009356:	9b06      	ldr	r3, [sp, #24]
 8009358:	4418      	add	r0, r3
 800935a:	f010 001f 	ands.w	r0, r0, #31
 800935e:	f000 8094 	beq.w	800948a <_dtoa_r+0x922>
 8009362:	f1c0 0320 	rsb	r3, r0, #32
 8009366:	2b04      	cmp	r3, #4
 8009368:	f340 8085 	ble.w	8009476 <_dtoa_r+0x90e>
 800936c:	9b05      	ldr	r3, [sp, #20]
 800936e:	f1c0 001c 	rsb	r0, r0, #28
 8009372:	4403      	add	r3, r0
 8009374:	9305      	str	r3, [sp, #20]
 8009376:	9b06      	ldr	r3, [sp, #24]
 8009378:	4403      	add	r3, r0
 800937a:	4405      	add	r5, r0
 800937c:	9306      	str	r3, [sp, #24]
 800937e:	9b05      	ldr	r3, [sp, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	dd05      	ble.n	8009390 <_dtoa_r+0x828>
 8009384:	4651      	mov	r1, sl
 8009386:	461a      	mov	r2, r3
 8009388:	4620      	mov	r0, r4
 800938a:	f000 fcef 	bl	8009d6c <__lshift>
 800938e:	4682      	mov	sl, r0
 8009390:	9b06      	ldr	r3, [sp, #24]
 8009392:	2b00      	cmp	r3, #0
 8009394:	dd05      	ble.n	80093a2 <_dtoa_r+0x83a>
 8009396:	4631      	mov	r1, r6
 8009398:	461a      	mov	r2, r3
 800939a:	4620      	mov	r0, r4
 800939c:	f000 fce6 	bl	8009d6c <__lshift>
 80093a0:	4606      	mov	r6, r0
 80093a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d072      	beq.n	800948e <_dtoa_r+0x926>
 80093a8:	4631      	mov	r1, r6
 80093aa:	4650      	mov	r0, sl
 80093ac:	f000 fd4a 	bl	8009e44 <__mcmp>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	da6c      	bge.n	800948e <_dtoa_r+0x926>
 80093b4:	2300      	movs	r3, #0
 80093b6:	4651      	mov	r1, sl
 80093b8:	220a      	movs	r2, #10
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 fb28 	bl	8009a10 <__multadd>
 80093c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093c6:	4682      	mov	sl, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 81b0 	beq.w	800972e <_dtoa_r+0xbc6>
 80093ce:	2300      	movs	r3, #0
 80093d0:	4639      	mov	r1, r7
 80093d2:	220a      	movs	r2, #10
 80093d4:	4620      	mov	r0, r4
 80093d6:	f000 fb1b 	bl	8009a10 <__multadd>
 80093da:	9b01      	ldr	r3, [sp, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	4607      	mov	r7, r0
 80093e0:	f300 8096 	bgt.w	8009510 <_dtoa_r+0x9a8>
 80093e4:	9b07      	ldr	r3, [sp, #28]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	dc59      	bgt.n	800949e <_dtoa_r+0x936>
 80093ea:	e091      	b.n	8009510 <_dtoa_r+0x9a8>
 80093ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093f2:	e758      	b.n	80092a6 <_dtoa_r+0x73e>
 80093f4:	9b04      	ldr	r3, [sp, #16]
 80093f6:	1e5e      	subs	r6, r3, #1
 80093f8:	9b08      	ldr	r3, [sp, #32]
 80093fa:	42b3      	cmp	r3, r6
 80093fc:	bfbf      	itttt	lt
 80093fe:	9b08      	ldrlt	r3, [sp, #32]
 8009400:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009402:	9608      	strlt	r6, [sp, #32]
 8009404:	1af3      	sublt	r3, r6, r3
 8009406:	bfb4      	ite	lt
 8009408:	18d2      	addlt	r2, r2, r3
 800940a:	1b9e      	subge	r6, r3, r6
 800940c:	9b04      	ldr	r3, [sp, #16]
 800940e:	bfbc      	itt	lt
 8009410:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009412:	2600      	movlt	r6, #0
 8009414:	2b00      	cmp	r3, #0
 8009416:	bfb7      	itett	lt
 8009418:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800941c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009420:	1a9d      	sublt	r5, r3, r2
 8009422:	2300      	movlt	r3, #0
 8009424:	e741      	b.n	80092aa <_dtoa_r+0x742>
 8009426:	9e08      	ldr	r6, [sp, #32]
 8009428:	9d05      	ldr	r5, [sp, #20]
 800942a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800942c:	e748      	b.n	80092c0 <_dtoa_r+0x758>
 800942e:	9a08      	ldr	r2, [sp, #32]
 8009430:	e770      	b.n	8009314 <_dtoa_r+0x7ac>
 8009432:	9b07      	ldr	r3, [sp, #28]
 8009434:	2b01      	cmp	r3, #1
 8009436:	dc19      	bgt.n	800946c <_dtoa_r+0x904>
 8009438:	9b02      	ldr	r3, [sp, #8]
 800943a:	b9bb      	cbnz	r3, 800946c <_dtoa_r+0x904>
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009442:	b99b      	cbnz	r3, 800946c <_dtoa_r+0x904>
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800944a:	0d1b      	lsrs	r3, r3, #20
 800944c:	051b      	lsls	r3, r3, #20
 800944e:	b183      	cbz	r3, 8009472 <_dtoa_r+0x90a>
 8009450:	9b05      	ldr	r3, [sp, #20]
 8009452:	3301      	adds	r3, #1
 8009454:	9305      	str	r3, [sp, #20]
 8009456:	9b06      	ldr	r3, [sp, #24]
 8009458:	3301      	adds	r3, #1
 800945a:	9306      	str	r3, [sp, #24]
 800945c:	f04f 0801 	mov.w	r8, #1
 8009460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009462:	2b00      	cmp	r3, #0
 8009464:	f47f af6f 	bne.w	8009346 <_dtoa_r+0x7de>
 8009468:	2001      	movs	r0, #1
 800946a:	e774      	b.n	8009356 <_dtoa_r+0x7ee>
 800946c:	f04f 0800 	mov.w	r8, #0
 8009470:	e7f6      	b.n	8009460 <_dtoa_r+0x8f8>
 8009472:	4698      	mov	r8, r3
 8009474:	e7f4      	b.n	8009460 <_dtoa_r+0x8f8>
 8009476:	d082      	beq.n	800937e <_dtoa_r+0x816>
 8009478:	9a05      	ldr	r2, [sp, #20]
 800947a:	331c      	adds	r3, #28
 800947c:	441a      	add	r2, r3
 800947e:	9205      	str	r2, [sp, #20]
 8009480:	9a06      	ldr	r2, [sp, #24]
 8009482:	441a      	add	r2, r3
 8009484:	441d      	add	r5, r3
 8009486:	9206      	str	r2, [sp, #24]
 8009488:	e779      	b.n	800937e <_dtoa_r+0x816>
 800948a:	4603      	mov	r3, r0
 800948c:	e7f4      	b.n	8009478 <_dtoa_r+0x910>
 800948e:	9b04      	ldr	r3, [sp, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	dc37      	bgt.n	8009504 <_dtoa_r+0x99c>
 8009494:	9b07      	ldr	r3, [sp, #28]
 8009496:	2b02      	cmp	r3, #2
 8009498:	dd34      	ble.n	8009504 <_dtoa_r+0x99c>
 800949a:	9b04      	ldr	r3, [sp, #16]
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	9b01      	ldr	r3, [sp, #4]
 80094a0:	b963      	cbnz	r3, 80094bc <_dtoa_r+0x954>
 80094a2:	4631      	mov	r1, r6
 80094a4:	2205      	movs	r2, #5
 80094a6:	4620      	mov	r0, r4
 80094a8:	f000 fab2 	bl	8009a10 <__multadd>
 80094ac:	4601      	mov	r1, r0
 80094ae:	4606      	mov	r6, r0
 80094b0:	4650      	mov	r0, sl
 80094b2:	f000 fcc7 	bl	8009e44 <__mcmp>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f73f adbb 	bgt.w	8009032 <_dtoa_r+0x4ca>
 80094bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094be:	9d00      	ldr	r5, [sp, #0]
 80094c0:	ea6f 0b03 	mvn.w	fp, r3
 80094c4:	f04f 0800 	mov.w	r8, #0
 80094c8:	4631      	mov	r1, r6
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 fa7e 	bl	80099cc <_Bfree>
 80094d0:	2f00      	cmp	r7, #0
 80094d2:	f43f aeab 	beq.w	800922c <_dtoa_r+0x6c4>
 80094d6:	f1b8 0f00 	cmp.w	r8, #0
 80094da:	d005      	beq.n	80094e8 <_dtoa_r+0x980>
 80094dc:	45b8      	cmp	r8, r7
 80094de:	d003      	beq.n	80094e8 <_dtoa_r+0x980>
 80094e0:	4641      	mov	r1, r8
 80094e2:	4620      	mov	r0, r4
 80094e4:	f000 fa72 	bl	80099cc <_Bfree>
 80094e8:	4639      	mov	r1, r7
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 fa6e 	bl	80099cc <_Bfree>
 80094f0:	e69c      	b.n	800922c <_dtoa_r+0x6c4>
 80094f2:	2600      	movs	r6, #0
 80094f4:	4637      	mov	r7, r6
 80094f6:	e7e1      	b.n	80094bc <_dtoa_r+0x954>
 80094f8:	46bb      	mov	fp, r7
 80094fa:	4637      	mov	r7, r6
 80094fc:	e599      	b.n	8009032 <_dtoa_r+0x4ca>
 80094fe:	bf00      	nop
 8009500:	40240000 	.word	0x40240000
 8009504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 80c8 	beq.w	800969c <_dtoa_r+0xb34>
 800950c:	9b04      	ldr	r3, [sp, #16]
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	2d00      	cmp	r5, #0
 8009512:	dd05      	ble.n	8009520 <_dtoa_r+0x9b8>
 8009514:	4639      	mov	r1, r7
 8009516:	462a      	mov	r2, r5
 8009518:	4620      	mov	r0, r4
 800951a:	f000 fc27 	bl	8009d6c <__lshift>
 800951e:	4607      	mov	r7, r0
 8009520:	f1b8 0f00 	cmp.w	r8, #0
 8009524:	d05b      	beq.n	80095de <_dtoa_r+0xa76>
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	4620      	mov	r0, r4
 800952a:	f000 fa0f 	bl	800994c <_Balloc>
 800952e:	4605      	mov	r5, r0
 8009530:	b928      	cbnz	r0, 800953e <_dtoa_r+0x9d6>
 8009532:	4b83      	ldr	r3, [pc, #524]	; (8009740 <_dtoa_r+0xbd8>)
 8009534:	4602      	mov	r2, r0
 8009536:	f240 21ef 	movw	r1, #751	; 0x2ef
 800953a:	f7ff bb2e 	b.w	8008b9a <_dtoa_r+0x32>
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	3202      	adds	r2, #2
 8009542:	0092      	lsls	r2, r2, #2
 8009544:	f107 010c 	add.w	r1, r7, #12
 8009548:	300c      	adds	r0, #12
 800954a:	f001 f82f 	bl	800a5ac <memcpy>
 800954e:	2201      	movs	r2, #1
 8009550:	4629      	mov	r1, r5
 8009552:	4620      	mov	r0, r4
 8009554:	f000 fc0a 	bl	8009d6c <__lshift>
 8009558:	9b00      	ldr	r3, [sp, #0]
 800955a:	3301      	adds	r3, #1
 800955c:	9304      	str	r3, [sp, #16]
 800955e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009562:	4413      	add	r3, r2
 8009564:	9308      	str	r3, [sp, #32]
 8009566:	9b02      	ldr	r3, [sp, #8]
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	46b8      	mov	r8, r7
 800956e:	9306      	str	r3, [sp, #24]
 8009570:	4607      	mov	r7, r0
 8009572:	9b04      	ldr	r3, [sp, #16]
 8009574:	4631      	mov	r1, r6
 8009576:	3b01      	subs	r3, #1
 8009578:	4650      	mov	r0, sl
 800957a:	9301      	str	r3, [sp, #4]
 800957c:	f7ff fa6b 	bl	8008a56 <quorem>
 8009580:	4641      	mov	r1, r8
 8009582:	9002      	str	r0, [sp, #8]
 8009584:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009588:	4650      	mov	r0, sl
 800958a:	f000 fc5b 	bl	8009e44 <__mcmp>
 800958e:	463a      	mov	r2, r7
 8009590:	9005      	str	r0, [sp, #20]
 8009592:	4631      	mov	r1, r6
 8009594:	4620      	mov	r0, r4
 8009596:	f000 fc71 	bl	8009e7c <__mdiff>
 800959a:	68c2      	ldr	r2, [r0, #12]
 800959c:	4605      	mov	r5, r0
 800959e:	bb02      	cbnz	r2, 80095e2 <_dtoa_r+0xa7a>
 80095a0:	4601      	mov	r1, r0
 80095a2:	4650      	mov	r0, sl
 80095a4:	f000 fc4e 	bl	8009e44 <__mcmp>
 80095a8:	4602      	mov	r2, r0
 80095aa:	4629      	mov	r1, r5
 80095ac:	4620      	mov	r0, r4
 80095ae:	9209      	str	r2, [sp, #36]	; 0x24
 80095b0:	f000 fa0c 	bl	80099cc <_Bfree>
 80095b4:	9b07      	ldr	r3, [sp, #28]
 80095b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095b8:	9d04      	ldr	r5, [sp, #16]
 80095ba:	ea43 0102 	orr.w	r1, r3, r2
 80095be:	9b06      	ldr	r3, [sp, #24]
 80095c0:	4319      	orrs	r1, r3
 80095c2:	d110      	bne.n	80095e6 <_dtoa_r+0xa7e>
 80095c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095c8:	d029      	beq.n	800961e <_dtoa_r+0xab6>
 80095ca:	9b05      	ldr	r3, [sp, #20]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	dd02      	ble.n	80095d6 <_dtoa_r+0xa6e>
 80095d0:	9b02      	ldr	r3, [sp, #8]
 80095d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80095d6:	9b01      	ldr	r3, [sp, #4]
 80095d8:	f883 9000 	strb.w	r9, [r3]
 80095dc:	e774      	b.n	80094c8 <_dtoa_r+0x960>
 80095de:	4638      	mov	r0, r7
 80095e0:	e7ba      	b.n	8009558 <_dtoa_r+0x9f0>
 80095e2:	2201      	movs	r2, #1
 80095e4:	e7e1      	b.n	80095aa <_dtoa_r+0xa42>
 80095e6:	9b05      	ldr	r3, [sp, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	db04      	blt.n	80095f6 <_dtoa_r+0xa8e>
 80095ec:	9907      	ldr	r1, [sp, #28]
 80095ee:	430b      	orrs	r3, r1
 80095f0:	9906      	ldr	r1, [sp, #24]
 80095f2:	430b      	orrs	r3, r1
 80095f4:	d120      	bne.n	8009638 <_dtoa_r+0xad0>
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	dded      	ble.n	80095d6 <_dtoa_r+0xa6e>
 80095fa:	4651      	mov	r1, sl
 80095fc:	2201      	movs	r2, #1
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fbb4 	bl	8009d6c <__lshift>
 8009604:	4631      	mov	r1, r6
 8009606:	4682      	mov	sl, r0
 8009608:	f000 fc1c 	bl	8009e44 <__mcmp>
 800960c:	2800      	cmp	r0, #0
 800960e:	dc03      	bgt.n	8009618 <_dtoa_r+0xab0>
 8009610:	d1e1      	bne.n	80095d6 <_dtoa_r+0xa6e>
 8009612:	f019 0f01 	tst.w	r9, #1
 8009616:	d0de      	beq.n	80095d6 <_dtoa_r+0xa6e>
 8009618:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800961c:	d1d8      	bne.n	80095d0 <_dtoa_r+0xa68>
 800961e:	9a01      	ldr	r2, [sp, #4]
 8009620:	2339      	movs	r3, #57	; 0x39
 8009622:	7013      	strb	r3, [r2, #0]
 8009624:	462b      	mov	r3, r5
 8009626:	461d      	mov	r5, r3
 8009628:	3b01      	subs	r3, #1
 800962a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800962e:	2a39      	cmp	r2, #57	; 0x39
 8009630:	d06c      	beq.n	800970c <_dtoa_r+0xba4>
 8009632:	3201      	adds	r2, #1
 8009634:	701a      	strb	r2, [r3, #0]
 8009636:	e747      	b.n	80094c8 <_dtoa_r+0x960>
 8009638:	2a00      	cmp	r2, #0
 800963a:	dd07      	ble.n	800964c <_dtoa_r+0xae4>
 800963c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009640:	d0ed      	beq.n	800961e <_dtoa_r+0xab6>
 8009642:	9a01      	ldr	r2, [sp, #4]
 8009644:	f109 0301 	add.w	r3, r9, #1
 8009648:	7013      	strb	r3, [r2, #0]
 800964a:	e73d      	b.n	80094c8 <_dtoa_r+0x960>
 800964c:	9b04      	ldr	r3, [sp, #16]
 800964e:	9a08      	ldr	r2, [sp, #32]
 8009650:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009654:	4293      	cmp	r3, r2
 8009656:	d043      	beq.n	80096e0 <_dtoa_r+0xb78>
 8009658:	4651      	mov	r1, sl
 800965a:	2300      	movs	r3, #0
 800965c:	220a      	movs	r2, #10
 800965e:	4620      	mov	r0, r4
 8009660:	f000 f9d6 	bl	8009a10 <__multadd>
 8009664:	45b8      	cmp	r8, r7
 8009666:	4682      	mov	sl, r0
 8009668:	f04f 0300 	mov.w	r3, #0
 800966c:	f04f 020a 	mov.w	r2, #10
 8009670:	4641      	mov	r1, r8
 8009672:	4620      	mov	r0, r4
 8009674:	d107      	bne.n	8009686 <_dtoa_r+0xb1e>
 8009676:	f000 f9cb 	bl	8009a10 <__multadd>
 800967a:	4680      	mov	r8, r0
 800967c:	4607      	mov	r7, r0
 800967e:	9b04      	ldr	r3, [sp, #16]
 8009680:	3301      	adds	r3, #1
 8009682:	9304      	str	r3, [sp, #16]
 8009684:	e775      	b.n	8009572 <_dtoa_r+0xa0a>
 8009686:	f000 f9c3 	bl	8009a10 <__multadd>
 800968a:	4639      	mov	r1, r7
 800968c:	4680      	mov	r8, r0
 800968e:	2300      	movs	r3, #0
 8009690:	220a      	movs	r2, #10
 8009692:	4620      	mov	r0, r4
 8009694:	f000 f9bc 	bl	8009a10 <__multadd>
 8009698:	4607      	mov	r7, r0
 800969a:	e7f0      	b.n	800967e <_dtoa_r+0xb16>
 800969c:	9b04      	ldr	r3, [sp, #16]
 800969e:	9301      	str	r3, [sp, #4]
 80096a0:	9d00      	ldr	r5, [sp, #0]
 80096a2:	4631      	mov	r1, r6
 80096a4:	4650      	mov	r0, sl
 80096a6:	f7ff f9d6 	bl	8008a56 <quorem>
 80096aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80096ae:	9b00      	ldr	r3, [sp, #0]
 80096b0:	f805 9b01 	strb.w	r9, [r5], #1
 80096b4:	1aea      	subs	r2, r5, r3
 80096b6:	9b01      	ldr	r3, [sp, #4]
 80096b8:	4293      	cmp	r3, r2
 80096ba:	dd07      	ble.n	80096cc <_dtoa_r+0xb64>
 80096bc:	4651      	mov	r1, sl
 80096be:	2300      	movs	r3, #0
 80096c0:	220a      	movs	r2, #10
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 f9a4 	bl	8009a10 <__multadd>
 80096c8:	4682      	mov	sl, r0
 80096ca:	e7ea      	b.n	80096a2 <_dtoa_r+0xb3a>
 80096cc:	9b01      	ldr	r3, [sp, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	bfc8      	it	gt
 80096d2:	461d      	movgt	r5, r3
 80096d4:	9b00      	ldr	r3, [sp, #0]
 80096d6:	bfd8      	it	le
 80096d8:	2501      	movle	r5, #1
 80096da:	441d      	add	r5, r3
 80096dc:	f04f 0800 	mov.w	r8, #0
 80096e0:	4651      	mov	r1, sl
 80096e2:	2201      	movs	r2, #1
 80096e4:	4620      	mov	r0, r4
 80096e6:	f000 fb41 	bl	8009d6c <__lshift>
 80096ea:	4631      	mov	r1, r6
 80096ec:	4682      	mov	sl, r0
 80096ee:	f000 fba9 	bl	8009e44 <__mcmp>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	dc96      	bgt.n	8009624 <_dtoa_r+0xabc>
 80096f6:	d102      	bne.n	80096fe <_dtoa_r+0xb96>
 80096f8:	f019 0f01 	tst.w	r9, #1
 80096fc:	d192      	bne.n	8009624 <_dtoa_r+0xabc>
 80096fe:	462b      	mov	r3, r5
 8009700:	461d      	mov	r5, r3
 8009702:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009706:	2a30      	cmp	r2, #48	; 0x30
 8009708:	d0fa      	beq.n	8009700 <_dtoa_r+0xb98>
 800970a:	e6dd      	b.n	80094c8 <_dtoa_r+0x960>
 800970c:	9a00      	ldr	r2, [sp, #0]
 800970e:	429a      	cmp	r2, r3
 8009710:	d189      	bne.n	8009626 <_dtoa_r+0xabe>
 8009712:	f10b 0b01 	add.w	fp, fp, #1
 8009716:	2331      	movs	r3, #49	; 0x31
 8009718:	e796      	b.n	8009648 <_dtoa_r+0xae0>
 800971a:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <_dtoa_r+0xbdc>)
 800971c:	f7ff ba99 	b.w	8008c52 <_dtoa_r+0xea>
 8009720:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009722:	2b00      	cmp	r3, #0
 8009724:	f47f aa6d 	bne.w	8008c02 <_dtoa_r+0x9a>
 8009728:	4b07      	ldr	r3, [pc, #28]	; (8009748 <_dtoa_r+0xbe0>)
 800972a:	f7ff ba92 	b.w	8008c52 <_dtoa_r+0xea>
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	dcb5      	bgt.n	80096a0 <_dtoa_r+0xb38>
 8009734:	9b07      	ldr	r3, [sp, #28]
 8009736:	2b02      	cmp	r3, #2
 8009738:	f73f aeb1 	bgt.w	800949e <_dtoa_r+0x936>
 800973c:	e7b0      	b.n	80096a0 <_dtoa_r+0xb38>
 800973e:	bf00      	nop
 8009740:	0800ab40 	.word	0x0800ab40
 8009744:	0800aaa0 	.word	0x0800aaa0
 8009748:	0800aac4 	.word	0x0800aac4

0800974c <_free_r>:
 800974c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800974e:	2900      	cmp	r1, #0
 8009750:	d044      	beq.n	80097dc <_free_r+0x90>
 8009752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009756:	9001      	str	r0, [sp, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	f1a1 0404 	sub.w	r4, r1, #4
 800975e:	bfb8      	it	lt
 8009760:	18e4      	addlt	r4, r4, r3
 8009762:	f000 f8e7 	bl	8009934 <__malloc_lock>
 8009766:	4a1e      	ldr	r2, [pc, #120]	; (80097e0 <_free_r+0x94>)
 8009768:	9801      	ldr	r0, [sp, #4]
 800976a:	6813      	ldr	r3, [r2, #0]
 800976c:	b933      	cbnz	r3, 800977c <_free_r+0x30>
 800976e:	6063      	str	r3, [r4, #4]
 8009770:	6014      	str	r4, [r2, #0]
 8009772:	b003      	add	sp, #12
 8009774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009778:	f000 b8e2 	b.w	8009940 <__malloc_unlock>
 800977c:	42a3      	cmp	r3, r4
 800977e:	d908      	bls.n	8009792 <_free_r+0x46>
 8009780:	6825      	ldr	r5, [r4, #0]
 8009782:	1961      	adds	r1, r4, r5
 8009784:	428b      	cmp	r3, r1
 8009786:	bf01      	itttt	eq
 8009788:	6819      	ldreq	r1, [r3, #0]
 800978a:	685b      	ldreq	r3, [r3, #4]
 800978c:	1949      	addeq	r1, r1, r5
 800978e:	6021      	streq	r1, [r4, #0]
 8009790:	e7ed      	b.n	800976e <_free_r+0x22>
 8009792:	461a      	mov	r2, r3
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	b10b      	cbz	r3, 800979c <_free_r+0x50>
 8009798:	42a3      	cmp	r3, r4
 800979a:	d9fa      	bls.n	8009792 <_free_r+0x46>
 800979c:	6811      	ldr	r1, [r2, #0]
 800979e:	1855      	adds	r5, r2, r1
 80097a0:	42a5      	cmp	r5, r4
 80097a2:	d10b      	bne.n	80097bc <_free_r+0x70>
 80097a4:	6824      	ldr	r4, [r4, #0]
 80097a6:	4421      	add	r1, r4
 80097a8:	1854      	adds	r4, r2, r1
 80097aa:	42a3      	cmp	r3, r4
 80097ac:	6011      	str	r1, [r2, #0]
 80097ae:	d1e0      	bne.n	8009772 <_free_r+0x26>
 80097b0:	681c      	ldr	r4, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	6053      	str	r3, [r2, #4]
 80097b6:	440c      	add	r4, r1
 80097b8:	6014      	str	r4, [r2, #0]
 80097ba:	e7da      	b.n	8009772 <_free_r+0x26>
 80097bc:	d902      	bls.n	80097c4 <_free_r+0x78>
 80097be:	230c      	movs	r3, #12
 80097c0:	6003      	str	r3, [r0, #0]
 80097c2:	e7d6      	b.n	8009772 <_free_r+0x26>
 80097c4:	6825      	ldr	r5, [r4, #0]
 80097c6:	1961      	adds	r1, r4, r5
 80097c8:	428b      	cmp	r3, r1
 80097ca:	bf04      	itt	eq
 80097cc:	6819      	ldreq	r1, [r3, #0]
 80097ce:	685b      	ldreq	r3, [r3, #4]
 80097d0:	6063      	str	r3, [r4, #4]
 80097d2:	bf04      	itt	eq
 80097d4:	1949      	addeq	r1, r1, r5
 80097d6:	6021      	streq	r1, [r4, #0]
 80097d8:	6054      	str	r4, [r2, #4]
 80097da:	e7ca      	b.n	8009772 <_free_r+0x26>
 80097dc:	b003      	add	sp, #12
 80097de:	bd30      	pop	{r4, r5, pc}
 80097e0:	20000c04 	.word	0x20000c04

080097e4 <malloc>:
 80097e4:	4b02      	ldr	r3, [pc, #8]	; (80097f0 <malloc+0xc>)
 80097e6:	4601      	mov	r1, r0
 80097e8:	6818      	ldr	r0, [r3, #0]
 80097ea:	f000 b823 	b.w	8009834 <_malloc_r>
 80097ee:	bf00      	nop
 80097f0:	20000064 	.word	0x20000064

080097f4 <sbrk_aligned>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	4e0e      	ldr	r6, [pc, #56]	; (8009830 <sbrk_aligned+0x3c>)
 80097f8:	460c      	mov	r4, r1
 80097fa:	6831      	ldr	r1, [r6, #0]
 80097fc:	4605      	mov	r5, r0
 80097fe:	b911      	cbnz	r1, 8009806 <sbrk_aligned+0x12>
 8009800:	f000 fec4 	bl	800a58c <_sbrk_r>
 8009804:	6030      	str	r0, [r6, #0]
 8009806:	4621      	mov	r1, r4
 8009808:	4628      	mov	r0, r5
 800980a:	f000 febf 	bl	800a58c <_sbrk_r>
 800980e:	1c43      	adds	r3, r0, #1
 8009810:	d00a      	beq.n	8009828 <sbrk_aligned+0x34>
 8009812:	1cc4      	adds	r4, r0, #3
 8009814:	f024 0403 	bic.w	r4, r4, #3
 8009818:	42a0      	cmp	r0, r4
 800981a:	d007      	beq.n	800982c <sbrk_aligned+0x38>
 800981c:	1a21      	subs	r1, r4, r0
 800981e:	4628      	mov	r0, r5
 8009820:	f000 feb4 	bl	800a58c <_sbrk_r>
 8009824:	3001      	adds	r0, #1
 8009826:	d101      	bne.n	800982c <sbrk_aligned+0x38>
 8009828:	f04f 34ff 	mov.w	r4, #4294967295
 800982c:	4620      	mov	r0, r4
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	20000c08 	.word	0x20000c08

08009834 <_malloc_r>:
 8009834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009838:	1ccd      	adds	r5, r1, #3
 800983a:	f025 0503 	bic.w	r5, r5, #3
 800983e:	3508      	adds	r5, #8
 8009840:	2d0c      	cmp	r5, #12
 8009842:	bf38      	it	cc
 8009844:	250c      	movcc	r5, #12
 8009846:	2d00      	cmp	r5, #0
 8009848:	4607      	mov	r7, r0
 800984a:	db01      	blt.n	8009850 <_malloc_r+0x1c>
 800984c:	42a9      	cmp	r1, r5
 800984e:	d905      	bls.n	800985c <_malloc_r+0x28>
 8009850:	230c      	movs	r3, #12
 8009852:	603b      	str	r3, [r7, #0]
 8009854:	2600      	movs	r6, #0
 8009856:	4630      	mov	r0, r6
 8009858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800985c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009930 <_malloc_r+0xfc>
 8009860:	f000 f868 	bl	8009934 <__malloc_lock>
 8009864:	f8d8 3000 	ldr.w	r3, [r8]
 8009868:	461c      	mov	r4, r3
 800986a:	bb5c      	cbnz	r4, 80098c4 <_malloc_r+0x90>
 800986c:	4629      	mov	r1, r5
 800986e:	4638      	mov	r0, r7
 8009870:	f7ff ffc0 	bl	80097f4 <sbrk_aligned>
 8009874:	1c43      	adds	r3, r0, #1
 8009876:	4604      	mov	r4, r0
 8009878:	d155      	bne.n	8009926 <_malloc_r+0xf2>
 800987a:	f8d8 4000 	ldr.w	r4, [r8]
 800987e:	4626      	mov	r6, r4
 8009880:	2e00      	cmp	r6, #0
 8009882:	d145      	bne.n	8009910 <_malloc_r+0xdc>
 8009884:	2c00      	cmp	r4, #0
 8009886:	d048      	beq.n	800991a <_malloc_r+0xe6>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	4631      	mov	r1, r6
 800988c:	4638      	mov	r0, r7
 800988e:	eb04 0903 	add.w	r9, r4, r3
 8009892:	f000 fe7b 	bl	800a58c <_sbrk_r>
 8009896:	4581      	cmp	r9, r0
 8009898:	d13f      	bne.n	800991a <_malloc_r+0xe6>
 800989a:	6821      	ldr	r1, [r4, #0]
 800989c:	1a6d      	subs	r5, r5, r1
 800989e:	4629      	mov	r1, r5
 80098a0:	4638      	mov	r0, r7
 80098a2:	f7ff ffa7 	bl	80097f4 <sbrk_aligned>
 80098a6:	3001      	adds	r0, #1
 80098a8:	d037      	beq.n	800991a <_malloc_r+0xe6>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	442b      	add	r3, r5
 80098ae:	6023      	str	r3, [r4, #0]
 80098b0:	f8d8 3000 	ldr.w	r3, [r8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d038      	beq.n	800992a <_malloc_r+0xf6>
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	42a2      	cmp	r2, r4
 80098bc:	d12b      	bne.n	8009916 <_malloc_r+0xe2>
 80098be:	2200      	movs	r2, #0
 80098c0:	605a      	str	r2, [r3, #4]
 80098c2:	e00f      	b.n	80098e4 <_malloc_r+0xb0>
 80098c4:	6822      	ldr	r2, [r4, #0]
 80098c6:	1b52      	subs	r2, r2, r5
 80098c8:	d41f      	bmi.n	800990a <_malloc_r+0xd6>
 80098ca:	2a0b      	cmp	r2, #11
 80098cc:	d917      	bls.n	80098fe <_malloc_r+0xca>
 80098ce:	1961      	adds	r1, r4, r5
 80098d0:	42a3      	cmp	r3, r4
 80098d2:	6025      	str	r5, [r4, #0]
 80098d4:	bf18      	it	ne
 80098d6:	6059      	strne	r1, [r3, #4]
 80098d8:	6863      	ldr	r3, [r4, #4]
 80098da:	bf08      	it	eq
 80098dc:	f8c8 1000 	streq.w	r1, [r8]
 80098e0:	5162      	str	r2, [r4, r5]
 80098e2:	604b      	str	r3, [r1, #4]
 80098e4:	4638      	mov	r0, r7
 80098e6:	f104 060b 	add.w	r6, r4, #11
 80098ea:	f000 f829 	bl	8009940 <__malloc_unlock>
 80098ee:	f026 0607 	bic.w	r6, r6, #7
 80098f2:	1d23      	adds	r3, r4, #4
 80098f4:	1af2      	subs	r2, r6, r3
 80098f6:	d0ae      	beq.n	8009856 <_malloc_r+0x22>
 80098f8:	1b9b      	subs	r3, r3, r6
 80098fa:	50a3      	str	r3, [r4, r2]
 80098fc:	e7ab      	b.n	8009856 <_malloc_r+0x22>
 80098fe:	42a3      	cmp	r3, r4
 8009900:	6862      	ldr	r2, [r4, #4]
 8009902:	d1dd      	bne.n	80098c0 <_malloc_r+0x8c>
 8009904:	f8c8 2000 	str.w	r2, [r8]
 8009908:	e7ec      	b.n	80098e4 <_malloc_r+0xb0>
 800990a:	4623      	mov	r3, r4
 800990c:	6864      	ldr	r4, [r4, #4]
 800990e:	e7ac      	b.n	800986a <_malloc_r+0x36>
 8009910:	4634      	mov	r4, r6
 8009912:	6876      	ldr	r6, [r6, #4]
 8009914:	e7b4      	b.n	8009880 <_malloc_r+0x4c>
 8009916:	4613      	mov	r3, r2
 8009918:	e7cc      	b.n	80098b4 <_malloc_r+0x80>
 800991a:	230c      	movs	r3, #12
 800991c:	603b      	str	r3, [r7, #0]
 800991e:	4638      	mov	r0, r7
 8009920:	f000 f80e 	bl	8009940 <__malloc_unlock>
 8009924:	e797      	b.n	8009856 <_malloc_r+0x22>
 8009926:	6025      	str	r5, [r4, #0]
 8009928:	e7dc      	b.n	80098e4 <_malloc_r+0xb0>
 800992a:	605b      	str	r3, [r3, #4]
 800992c:	deff      	udf	#255	; 0xff
 800992e:	bf00      	nop
 8009930:	20000c04 	.word	0x20000c04

08009934 <__malloc_lock>:
 8009934:	4801      	ldr	r0, [pc, #4]	; (800993c <__malloc_lock+0x8>)
 8009936:	f7ff b88c 	b.w	8008a52 <__retarget_lock_acquire_recursive>
 800993a:	bf00      	nop
 800993c:	20000c00 	.word	0x20000c00

08009940 <__malloc_unlock>:
 8009940:	4801      	ldr	r0, [pc, #4]	; (8009948 <__malloc_unlock+0x8>)
 8009942:	f7ff b887 	b.w	8008a54 <__retarget_lock_release_recursive>
 8009946:	bf00      	nop
 8009948:	20000c00 	.word	0x20000c00

0800994c <_Balloc>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	69c6      	ldr	r6, [r0, #28]
 8009950:	4604      	mov	r4, r0
 8009952:	460d      	mov	r5, r1
 8009954:	b976      	cbnz	r6, 8009974 <_Balloc+0x28>
 8009956:	2010      	movs	r0, #16
 8009958:	f7ff ff44 	bl	80097e4 <malloc>
 800995c:	4602      	mov	r2, r0
 800995e:	61e0      	str	r0, [r4, #28]
 8009960:	b920      	cbnz	r0, 800996c <_Balloc+0x20>
 8009962:	4b18      	ldr	r3, [pc, #96]	; (80099c4 <_Balloc+0x78>)
 8009964:	4818      	ldr	r0, [pc, #96]	; (80099c8 <_Balloc+0x7c>)
 8009966:	216b      	movs	r1, #107	; 0x6b
 8009968:	f000 fe2e 	bl	800a5c8 <__assert_func>
 800996c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009970:	6006      	str	r6, [r0, #0]
 8009972:	60c6      	str	r6, [r0, #12]
 8009974:	69e6      	ldr	r6, [r4, #28]
 8009976:	68f3      	ldr	r3, [r6, #12]
 8009978:	b183      	cbz	r3, 800999c <_Balloc+0x50>
 800997a:	69e3      	ldr	r3, [r4, #28]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009982:	b9b8      	cbnz	r0, 80099b4 <_Balloc+0x68>
 8009984:	2101      	movs	r1, #1
 8009986:	fa01 f605 	lsl.w	r6, r1, r5
 800998a:	1d72      	adds	r2, r6, #5
 800998c:	0092      	lsls	r2, r2, #2
 800998e:	4620      	mov	r0, r4
 8009990:	f000 fe38 	bl	800a604 <_calloc_r>
 8009994:	b160      	cbz	r0, 80099b0 <_Balloc+0x64>
 8009996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800999a:	e00e      	b.n	80099ba <_Balloc+0x6e>
 800999c:	2221      	movs	r2, #33	; 0x21
 800999e:	2104      	movs	r1, #4
 80099a0:	4620      	mov	r0, r4
 80099a2:	f000 fe2f 	bl	800a604 <_calloc_r>
 80099a6:	69e3      	ldr	r3, [r4, #28]
 80099a8:	60f0      	str	r0, [r6, #12]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e4      	bne.n	800997a <_Balloc+0x2e>
 80099b0:	2000      	movs	r0, #0
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	6802      	ldr	r2, [r0, #0]
 80099b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099ba:	2300      	movs	r3, #0
 80099bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099c0:	e7f7      	b.n	80099b2 <_Balloc+0x66>
 80099c2:	bf00      	nop
 80099c4:	0800aad1 	.word	0x0800aad1
 80099c8:	0800ab51 	.word	0x0800ab51

080099cc <_Bfree>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	69c6      	ldr	r6, [r0, #28]
 80099d0:	4605      	mov	r5, r0
 80099d2:	460c      	mov	r4, r1
 80099d4:	b976      	cbnz	r6, 80099f4 <_Bfree+0x28>
 80099d6:	2010      	movs	r0, #16
 80099d8:	f7ff ff04 	bl	80097e4 <malloc>
 80099dc:	4602      	mov	r2, r0
 80099de:	61e8      	str	r0, [r5, #28]
 80099e0:	b920      	cbnz	r0, 80099ec <_Bfree+0x20>
 80099e2:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <_Bfree+0x3c>)
 80099e4:	4809      	ldr	r0, [pc, #36]	; (8009a0c <_Bfree+0x40>)
 80099e6:	218f      	movs	r1, #143	; 0x8f
 80099e8:	f000 fdee 	bl	800a5c8 <__assert_func>
 80099ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099f0:	6006      	str	r6, [r0, #0]
 80099f2:	60c6      	str	r6, [r0, #12]
 80099f4:	b13c      	cbz	r4, 8009a06 <_Bfree+0x3a>
 80099f6:	69eb      	ldr	r3, [r5, #28]
 80099f8:	6862      	ldr	r2, [r4, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a00:	6021      	str	r1, [r4, #0]
 8009a02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a06:	bd70      	pop	{r4, r5, r6, pc}
 8009a08:	0800aad1 	.word	0x0800aad1
 8009a0c:	0800ab51 	.word	0x0800ab51

08009a10 <__multadd>:
 8009a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a14:	690d      	ldr	r5, [r1, #16]
 8009a16:	4607      	mov	r7, r0
 8009a18:	460c      	mov	r4, r1
 8009a1a:	461e      	mov	r6, r3
 8009a1c:	f101 0c14 	add.w	ip, r1, #20
 8009a20:	2000      	movs	r0, #0
 8009a22:	f8dc 3000 	ldr.w	r3, [ip]
 8009a26:	b299      	uxth	r1, r3
 8009a28:	fb02 6101 	mla	r1, r2, r1, r6
 8009a2c:	0c1e      	lsrs	r6, r3, #16
 8009a2e:	0c0b      	lsrs	r3, r1, #16
 8009a30:	fb02 3306 	mla	r3, r2, r6, r3
 8009a34:	b289      	uxth	r1, r1
 8009a36:	3001      	adds	r0, #1
 8009a38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a3c:	4285      	cmp	r5, r0
 8009a3e:	f84c 1b04 	str.w	r1, [ip], #4
 8009a42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a46:	dcec      	bgt.n	8009a22 <__multadd+0x12>
 8009a48:	b30e      	cbz	r6, 8009a8e <__multadd+0x7e>
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	42ab      	cmp	r3, r5
 8009a4e:	dc19      	bgt.n	8009a84 <__multadd+0x74>
 8009a50:	6861      	ldr	r1, [r4, #4]
 8009a52:	4638      	mov	r0, r7
 8009a54:	3101      	adds	r1, #1
 8009a56:	f7ff ff79 	bl	800994c <_Balloc>
 8009a5a:	4680      	mov	r8, r0
 8009a5c:	b928      	cbnz	r0, 8009a6a <__multadd+0x5a>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	4b0c      	ldr	r3, [pc, #48]	; (8009a94 <__multadd+0x84>)
 8009a62:	480d      	ldr	r0, [pc, #52]	; (8009a98 <__multadd+0x88>)
 8009a64:	21ba      	movs	r1, #186	; 0xba
 8009a66:	f000 fdaf 	bl	800a5c8 <__assert_func>
 8009a6a:	6922      	ldr	r2, [r4, #16]
 8009a6c:	3202      	adds	r2, #2
 8009a6e:	f104 010c 	add.w	r1, r4, #12
 8009a72:	0092      	lsls	r2, r2, #2
 8009a74:	300c      	adds	r0, #12
 8009a76:	f000 fd99 	bl	800a5ac <memcpy>
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	f7ff ffa5 	bl	80099cc <_Bfree>
 8009a82:	4644      	mov	r4, r8
 8009a84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a88:	3501      	adds	r5, #1
 8009a8a:	615e      	str	r6, [r3, #20]
 8009a8c:	6125      	str	r5, [r4, #16]
 8009a8e:	4620      	mov	r0, r4
 8009a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a94:	0800ab40 	.word	0x0800ab40
 8009a98:	0800ab51 	.word	0x0800ab51

08009a9c <__hi0bits>:
 8009a9c:	0c03      	lsrs	r3, r0, #16
 8009a9e:	041b      	lsls	r3, r3, #16
 8009aa0:	b9d3      	cbnz	r3, 8009ad8 <__hi0bits+0x3c>
 8009aa2:	0400      	lsls	r0, r0, #16
 8009aa4:	2310      	movs	r3, #16
 8009aa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009aaa:	bf04      	itt	eq
 8009aac:	0200      	lsleq	r0, r0, #8
 8009aae:	3308      	addeq	r3, #8
 8009ab0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ab4:	bf04      	itt	eq
 8009ab6:	0100      	lsleq	r0, r0, #4
 8009ab8:	3304      	addeq	r3, #4
 8009aba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009abe:	bf04      	itt	eq
 8009ac0:	0080      	lsleq	r0, r0, #2
 8009ac2:	3302      	addeq	r3, #2
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	db05      	blt.n	8009ad4 <__hi0bits+0x38>
 8009ac8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009acc:	f103 0301 	add.w	r3, r3, #1
 8009ad0:	bf08      	it	eq
 8009ad2:	2320      	moveq	r3, #32
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	4770      	bx	lr
 8009ad8:	2300      	movs	r3, #0
 8009ada:	e7e4      	b.n	8009aa6 <__hi0bits+0xa>

08009adc <__lo0bits>:
 8009adc:	6803      	ldr	r3, [r0, #0]
 8009ade:	f013 0207 	ands.w	r2, r3, #7
 8009ae2:	d00c      	beq.n	8009afe <__lo0bits+0x22>
 8009ae4:	07d9      	lsls	r1, r3, #31
 8009ae6:	d422      	bmi.n	8009b2e <__lo0bits+0x52>
 8009ae8:	079a      	lsls	r2, r3, #30
 8009aea:	bf49      	itett	mi
 8009aec:	085b      	lsrmi	r3, r3, #1
 8009aee:	089b      	lsrpl	r3, r3, #2
 8009af0:	6003      	strmi	r3, [r0, #0]
 8009af2:	2201      	movmi	r2, #1
 8009af4:	bf5c      	itt	pl
 8009af6:	6003      	strpl	r3, [r0, #0]
 8009af8:	2202      	movpl	r2, #2
 8009afa:	4610      	mov	r0, r2
 8009afc:	4770      	bx	lr
 8009afe:	b299      	uxth	r1, r3
 8009b00:	b909      	cbnz	r1, 8009b06 <__lo0bits+0x2a>
 8009b02:	0c1b      	lsrs	r3, r3, #16
 8009b04:	2210      	movs	r2, #16
 8009b06:	b2d9      	uxtb	r1, r3
 8009b08:	b909      	cbnz	r1, 8009b0e <__lo0bits+0x32>
 8009b0a:	3208      	adds	r2, #8
 8009b0c:	0a1b      	lsrs	r3, r3, #8
 8009b0e:	0719      	lsls	r1, r3, #28
 8009b10:	bf04      	itt	eq
 8009b12:	091b      	lsreq	r3, r3, #4
 8009b14:	3204      	addeq	r2, #4
 8009b16:	0799      	lsls	r1, r3, #30
 8009b18:	bf04      	itt	eq
 8009b1a:	089b      	lsreq	r3, r3, #2
 8009b1c:	3202      	addeq	r2, #2
 8009b1e:	07d9      	lsls	r1, r3, #31
 8009b20:	d403      	bmi.n	8009b2a <__lo0bits+0x4e>
 8009b22:	085b      	lsrs	r3, r3, #1
 8009b24:	f102 0201 	add.w	r2, r2, #1
 8009b28:	d003      	beq.n	8009b32 <__lo0bits+0x56>
 8009b2a:	6003      	str	r3, [r0, #0]
 8009b2c:	e7e5      	b.n	8009afa <__lo0bits+0x1e>
 8009b2e:	2200      	movs	r2, #0
 8009b30:	e7e3      	b.n	8009afa <__lo0bits+0x1e>
 8009b32:	2220      	movs	r2, #32
 8009b34:	e7e1      	b.n	8009afa <__lo0bits+0x1e>
	...

08009b38 <__i2b>:
 8009b38:	b510      	push	{r4, lr}
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	f7ff ff05 	bl	800994c <_Balloc>
 8009b42:	4602      	mov	r2, r0
 8009b44:	b928      	cbnz	r0, 8009b52 <__i2b+0x1a>
 8009b46:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <__i2b+0x24>)
 8009b48:	4805      	ldr	r0, [pc, #20]	; (8009b60 <__i2b+0x28>)
 8009b4a:	f240 1145 	movw	r1, #325	; 0x145
 8009b4e:	f000 fd3b 	bl	800a5c8 <__assert_func>
 8009b52:	2301      	movs	r3, #1
 8009b54:	6144      	str	r4, [r0, #20]
 8009b56:	6103      	str	r3, [r0, #16]
 8009b58:	bd10      	pop	{r4, pc}
 8009b5a:	bf00      	nop
 8009b5c:	0800ab40 	.word	0x0800ab40
 8009b60:	0800ab51 	.word	0x0800ab51

08009b64 <__multiply>:
 8009b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	4691      	mov	r9, r2
 8009b6a:	690a      	ldr	r2, [r1, #16]
 8009b6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	bfb8      	it	lt
 8009b74:	460b      	movlt	r3, r1
 8009b76:	460c      	mov	r4, r1
 8009b78:	bfbc      	itt	lt
 8009b7a:	464c      	movlt	r4, r9
 8009b7c:	4699      	movlt	r9, r3
 8009b7e:	6927      	ldr	r7, [r4, #16]
 8009b80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b84:	68a3      	ldr	r3, [r4, #8]
 8009b86:	6861      	ldr	r1, [r4, #4]
 8009b88:	eb07 060a 	add.w	r6, r7, sl
 8009b8c:	42b3      	cmp	r3, r6
 8009b8e:	b085      	sub	sp, #20
 8009b90:	bfb8      	it	lt
 8009b92:	3101      	addlt	r1, #1
 8009b94:	f7ff feda 	bl	800994c <_Balloc>
 8009b98:	b930      	cbnz	r0, 8009ba8 <__multiply+0x44>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	4b44      	ldr	r3, [pc, #272]	; (8009cb0 <__multiply+0x14c>)
 8009b9e:	4845      	ldr	r0, [pc, #276]	; (8009cb4 <__multiply+0x150>)
 8009ba0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009ba4:	f000 fd10 	bl	800a5c8 <__assert_func>
 8009ba8:	f100 0514 	add.w	r5, r0, #20
 8009bac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009bb0:	462b      	mov	r3, r5
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	4543      	cmp	r3, r8
 8009bb6:	d321      	bcc.n	8009bfc <__multiply+0x98>
 8009bb8:	f104 0314 	add.w	r3, r4, #20
 8009bbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009bc0:	f109 0314 	add.w	r3, r9, #20
 8009bc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009bc8:	9202      	str	r2, [sp, #8]
 8009bca:	1b3a      	subs	r2, r7, r4
 8009bcc:	3a15      	subs	r2, #21
 8009bce:	f022 0203 	bic.w	r2, r2, #3
 8009bd2:	3204      	adds	r2, #4
 8009bd4:	f104 0115 	add.w	r1, r4, #21
 8009bd8:	428f      	cmp	r7, r1
 8009bda:	bf38      	it	cc
 8009bdc:	2204      	movcc	r2, #4
 8009bde:	9201      	str	r2, [sp, #4]
 8009be0:	9a02      	ldr	r2, [sp, #8]
 8009be2:	9303      	str	r3, [sp, #12]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d80c      	bhi.n	8009c02 <__multiply+0x9e>
 8009be8:	2e00      	cmp	r6, #0
 8009bea:	dd03      	ble.n	8009bf4 <__multiply+0x90>
 8009bec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d05b      	beq.n	8009cac <__multiply+0x148>
 8009bf4:	6106      	str	r6, [r0, #16]
 8009bf6:	b005      	add	sp, #20
 8009bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfc:	f843 2b04 	str.w	r2, [r3], #4
 8009c00:	e7d8      	b.n	8009bb4 <__multiply+0x50>
 8009c02:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c06:	f1ba 0f00 	cmp.w	sl, #0
 8009c0a:	d024      	beq.n	8009c56 <__multiply+0xf2>
 8009c0c:	f104 0e14 	add.w	lr, r4, #20
 8009c10:	46a9      	mov	r9, r5
 8009c12:	f04f 0c00 	mov.w	ip, #0
 8009c16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c1a:	f8d9 1000 	ldr.w	r1, [r9]
 8009c1e:	fa1f fb82 	uxth.w	fp, r2
 8009c22:	b289      	uxth	r1, r1
 8009c24:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c2c:	f8d9 2000 	ldr.w	r2, [r9]
 8009c30:	4461      	add	r1, ip
 8009c32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c36:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c3e:	b289      	uxth	r1, r1
 8009c40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c44:	4577      	cmp	r7, lr
 8009c46:	f849 1b04 	str.w	r1, [r9], #4
 8009c4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c4e:	d8e2      	bhi.n	8009c16 <__multiply+0xb2>
 8009c50:	9a01      	ldr	r2, [sp, #4]
 8009c52:	f845 c002 	str.w	ip, [r5, r2]
 8009c56:	9a03      	ldr	r2, [sp, #12]
 8009c58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	f1b9 0f00 	cmp.w	r9, #0
 8009c62:	d021      	beq.n	8009ca8 <__multiply+0x144>
 8009c64:	6829      	ldr	r1, [r5, #0]
 8009c66:	f104 0c14 	add.w	ip, r4, #20
 8009c6a:	46ae      	mov	lr, r5
 8009c6c:	f04f 0a00 	mov.w	sl, #0
 8009c70:	f8bc b000 	ldrh.w	fp, [ip]
 8009c74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c78:	fb09 220b 	mla	r2, r9, fp, r2
 8009c7c:	4452      	add	r2, sl
 8009c7e:	b289      	uxth	r1, r1
 8009c80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c84:	f84e 1b04 	str.w	r1, [lr], #4
 8009c88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c90:	f8be 1000 	ldrh.w	r1, [lr]
 8009c94:	fb09 110a 	mla	r1, r9, sl, r1
 8009c98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009c9c:	4567      	cmp	r7, ip
 8009c9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ca2:	d8e5      	bhi.n	8009c70 <__multiply+0x10c>
 8009ca4:	9a01      	ldr	r2, [sp, #4]
 8009ca6:	50a9      	str	r1, [r5, r2]
 8009ca8:	3504      	adds	r5, #4
 8009caa:	e799      	b.n	8009be0 <__multiply+0x7c>
 8009cac:	3e01      	subs	r6, #1
 8009cae:	e79b      	b.n	8009be8 <__multiply+0x84>
 8009cb0:	0800ab40 	.word	0x0800ab40
 8009cb4:	0800ab51 	.word	0x0800ab51

08009cb8 <__pow5mult>:
 8009cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cbc:	4615      	mov	r5, r2
 8009cbe:	f012 0203 	ands.w	r2, r2, #3
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	460f      	mov	r7, r1
 8009cc6:	d007      	beq.n	8009cd8 <__pow5mult+0x20>
 8009cc8:	4c25      	ldr	r4, [pc, #148]	; (8009d60 <__pow5mult+0xa8>)
 8009cca:	3a01      	subs	r2, #1
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cd2:	f7ff fe9d 	bl	8009a10 <__multadd>
 8009cd6:	4607      	mov	r7, r0
 8009cd8:	10ad      	asrs	r5, r5, #2
 8009cda:	d03d      	beq.n	8009d58 <__pow5mult+0xa0>
 8009cdc:	69f4      	ldr	r4, [r6, #28]
 8009cde:	b97c      	cbnz	r4, 8009d00 <__pow5mult+0x48>
 8009ce0:	2010      	movs	r0, #16
 8009ce2:	f7ff fd7f 	bl	80097e4 <malloc>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	61f0      	str	r0, [r6, #28]
 8009cea:	b928      	cbnz	r0, 8009cf8 <__pow5mult+0x40>
 8009cec:	4b1d      	ldr	r3, [pc, #116]	; (8009d64 <__pow5mult+0xac>)
 8009cee:	481e      	ldr	r0, [pc, #120]	; (8009d68 <__pow5mult+0xb0>)
 8009cf0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009cf4:	f000 fc68 	bl	800a5c8 <__assert_func>
 8009cf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cfc:	6004      	str	r4, [r0, #0]
 8009cfe:	60c4      	str	r4, [r0, #12]
 8009d00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009d04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d08:	b94c      	cbnz	r4, 8009d1e <__pow5mult+0x66>
 8009d0a:	f240 2171 	movw	r1, #625	; 0x271
 8009d0e:	4630      	mov	r0, r6
 8009d10:	f7ff ff12 	bl	8009b38 <__i2b>
 8009d14:	2300      	movs	r3, #0
 8009d16:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	6003      	str	r3, [r0, #0]
 8009d1e:	f04f 0900 	mov.w	r9, #0
 8009d22:	07eb      	lsls	r3, r5, #31
 8009d24:	d50a      	bpl.n	8009d3c <__pow5mult+0x84>
 8009d26:	4639      	mov	r1, r7
 8009d28:	4622      	mov	r2, r4
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f7ff ff1a 	bl	8009b64 <__multiply>
 8009d30:	4639      	mov	r1, r7
 8009d32:	4680      	mov	r8, r0
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7ff fe49 	bl	80099cc <_Bfree>
 8009d3a:	4647      	mov	r7, r8
 8009d3c:	106d      	asrs	r5, r5, #1
 8009d3e:	d00b      	beq.n	8009d58 <__pow5mult+0xa0>
 8009d40:	6820      	ldr	r0, [r4, #0]
 8009d42:	b938      	cbnz	r0, 8009d54 <__pow5mult+0x9c>
 8009d44:	4622      	mov	r2, r4
 8009d46:	4621      	mov	r1, r4
 8009d48:	4630      	mov	r0, r6
 8009d4a:	f7ff ff0b 	bl	8009b64 <__multiply>
 8009d4e:	6020      	str	r0, [r4, #0]
 8009d50:	f8c0 9000 	str.w	r9, [r0]
 8009d54:	4604      	mov	r4, r0
 8009d56:	e7e4      	b.n	8009d22 <__pow5mult+0x6a>
 8009d58:	4638      	mov	r0, r7
 8009d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d5e:	bf00      	nop
 8009d60:	0800aca0 	.word	0x0800aca0
 8009d64:	0800aad1 	.word	0x0800aad1
 8009d68:	0800ab51 	.word	0x0800ab51

08009d6c <__lshift>:
 8009d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d70:	460c      	mov	r4, r1
 8009d72:	6849      	ldr	r1, [r1, #4]
 8009d74:	6923      	ldr	r3, [r4, #16]
 8009d76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d7a:	68a3      	ldr	r3, [r4, #8]
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	4691      	mov	r9, r2
 8009d80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d84:	f108 0601 	add.w	r6, r8, #1
 8009d88:	42b3      	cmp	r3, r6
 8009d8a:	db0b      	blt.n	8009da4 <__lshift+0x38>
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	f7ff fddd 	bl	800994c <_Balloc>
 8009d92:	4605      	mov	r5, r0
 8009d94:	b948      	cbnz	r0, 8009daa <__lshift+0x3e>
 8009d96:	4602      	mov	r2, r0
 8009d98:	4b28      	ldr	r3, [pc, #160]	; (8009e3c <__lshift+0xd0>)
 8009d9a:	4829      	ldr	r0, [pc, #164]	; (8009e40 <__lshift+0xd4>)
 8009d9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009da0:	f000 fc12 	bl	800a5c8 <__assert_func>
 8009da4:	3101      	adds	r1, #1
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	e7ee      	b.n	8009d88 <__lshift+0x1c>
 8009daa:	2300      	movs	r3, #0
 8009dac:	f100 0114 	add.w	r1, r0, #20
 8009db0:	f100 0210 	add.w	r2, r0, #16
 8009db4:	4618      	mov	r0, r3
 8009db6:	4553      	cmp	r3, sl
 8009db8:	db33      	blt.n	8009e22 <__lshift+0xb6>
 8009dba:	6920      	ldr	r0, [r4, #16]
 8009dbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dc0:	f104 0314 	add.w	r3, r4, #20
 8009dc4:	f019 091f 	ands.w	r9, r9, #31
 8009dc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dd0:	d02b      	beq.n	8009e2a <__lshift+0xbe>
 8009dd2:	f1c9 0e20 	rsb	lr, r9, #32
 8009dd6:	468a      	mov	sl, r1
 8009dd8:	2200      	movs	r2, #0
 8009dda:	6818      	ldr	r0, [r3, #0]
 8009ddc:	fa00 f009 	lsl.w	r0, r0, r9
 8009de0:	4310      	orrs	r0, r2
 8009de2:	f84a 0b04 	str.w	r0, [sl], #4
 8009de6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dea:	459c      	cmp	ip, r3
 8009dec:	fa22 f20e 	lsr.w	r2, r2, lr
 8009df0:	d8f3      	bhi.n	8009dda <__lshift+0x6e>
 8009df2:	ebac 0304 	sub.w	r3, ip, r4
 8009df6:	3b15      	subs	r3, #21
 8009df8:	f023 0303 	bic.w	r3, r3, #3
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	f104 0015 	add.w	r0, r4, #21
 8009e02:	4584      	cmp	ip, r0
 8009e04:	bf38      	it	cc
 8009e06:	2304      	movcc	r3, #4
 8009e08:	50ca      	str	r2, [r1, r3]
 8009e0a:	b10a      	cbz	r2, 8009e10 <__lshift+0xa4>
 8009e0c:	f108 0602 	add.w	r6, r8, #2
 8009e10:	3e01      	subs	r6, #1
 8009e12:	4638      	mov	r0, r7
 8009e14:	612e      	str	r6, [r5, #16]
 8009e16:	4621      	mov	r1, r4
 8009e18:	f7ff fdd8 	bl	80099cc <_Bfree>
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e22:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e26:	3301      	adds	r3, #1
 8009e28:	e7c5      	b.n	8009db6 <__lshift+0x4a>
 8009e2a:	3904      	subs	r1, #4
 8009e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e30:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e34:	459c      	cmp	ip, r3
 8009e36:	d8f9      	bhi.n	8009e2c <__lshift+0xc0>
 8009e38:	e7ea      	b.n	8009e10 <__lshift+0xa4>
 8009e3a:	bf00      	nop
 8009e3c:	0800ab40 	.word	0x0800ab40
 8009e40:	0800ab51 	.word	0x0800ab51

08009e44 <__mcmp>:
 8009e44:	b530      	push	{r4, r5, lr}
 8009e46:	6902      	ldr	r2, [r0, #16]
 8009e48:	690c      	ldr	r4, [r1, #16]
 8009e4a:	1b12      	subs	r2, r2, r4
 8009e4c:	d10e      	bne.n	8009e6c <__mcmp+0x28>
 8009e4e:	f100 0314 	add.w	r3, r0, #20
 8009e52:	3114      	adds	r1, #20
 8009e54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e64:	42a5      	cmp	r5, r4
 8009e66:	d003      	beq.n	8009e70 <__mcmp+0x2c>
 8009e68:	d305      	bcc.n	8009e76 <__mcmp+0x32>
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	bd30      	pop	{r4, r5, pc}
 8009e70:	4283      	cmp	r3, r0
 8009e72:	d3f3      	bcc.n	8009e5c <__mcmp+0x18>
 8009e74:	e7fa      	b.n	8009e6c <__mcmp+0x28>
 8009e76:	f04f 32ff 	mov.w	r2, #4294967295
 8009e7a:	e7f7      	b.n	8009e6c <__mcmp+0x28>

08009e7c <__mdiff>:
 8009e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e80:	460c      	mov	r4, r1
 8009e82:	4606      	mov	r6, r0
 8009e84:	4611      	mov	r1, r2
 8009e86:	4620      	mov	r0, r4
 8009e88:	4690      	mov	r8, r2
 8009e8a:	f7ff ffdb 	bl	8009e44 <__mcmp>
 8009e8e:	1e05      	subs	r5, r0, #0
 8009e90:	d110      	bne.n	8009eb4 <__mdiff+0x38>
 8009e92:	4629      	mov	r1, r5
 8009e94:	4630      	mov	r0, r6
 8009e96:	f7ff fd59 	bl	800994c <_Balloc>
 8009e9a:	b930      	cbnz	r0, 8009eaa <__mdiff+0x2e>
 8009e9c:	4b3a      	ldr	r3, [pc, #232]	; (8009f88 <__mdiff+0x10c>)
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	f240 2137 	movw	r1, #567	; 0x237
 8009ea4:	4839      	ldr	r0, [pc, #228]	; (8009f8c <__mdiff+0x110>)
 8009ea6:	f000 fb8f 	bl	800a5c8 <__assert_func>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009eb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb4:	bfa4      	itt	ge
 8009eb6:	4643      	movge	r3, r8
 8009eb8:	46a0      	movge	r8, r4
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ec0:	bfa6      	itte	ge
 8009ec2:	461c      	movge	r4, r3
 8009ec4:	2500      	movge	r5, #0
 8009ec6:	2501      	movlt	r5, #1
 8009ec8:	f7ff fd40 	bl	800994c <_Balloc>
 8009ecc:	b920      	cbnz	r0, 8009ed8 <__mdiff+0x5c>
 8009ece:	4b2e      	ldr	r3, [pc, #184]	; (8009f88 <__mdiff+0x10c>)
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	f240 2145 	movw	r1, #581	; 0x245
 8009ed6:	e7e5      	b.n	8009ea4 <__mdiff+0x28>
 8009ed8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009edc:	6926      	ldr	r6, [r4, #16]
 8009ede:	60c5      	str	r5, [r0, #12]
 8009ee0:	f104 0914 	add.w	r9, r4, #20
 8009ee4:	f108 0514 	add.w	r5, r8, #20
 8009ee8:	f100 0e14 	add.w	lr, r0, #20
 8009eec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ef0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ef4:	f108 0210 	add.w	r2, r8, #16
 8009ef8:	46f2      	mov	sl, lr
 8009efa:	2100      	movs	r1, #0
 8009efc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f04:	fa11 f88b 	uxtah	r8, r1, fp
 8009f08:	b299      	uxth	r1, r3
 8009f0a:	0c1b      	lsrs	r3, r3, #16
 8009f0c:	eba8 0801 	sub.w	r8, r8, r1
 8009f10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f18:	fa1f f888 	uxth.w	r8, r8
 8009f1c:	1419      	asrs	r1, r3, #16
 8009f1e:	454e      	cmp	r6, r9
 8009f20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f24:	f84a 3b04 	str.w	r3, [sl], #4
 8009f28:	d8e8      	bhi.n	8009efc <__mdiff+0x80>
 8009f2a:	1b33      	subs	r3, r6, r4
 8009f2c:	3b15      	subs	r3, #21
 8009f2e:	f023 0303 	bic.w	r3, r3, #3
 8009f32:	3304      	adds	r3, #4
 8009f34:	3415      	adds	r4, #21
 8009f36:	42a6      	cmp	r6, r4
 8009f38:	bf38      	it	cc
 8009f3a:	2304      	movcc	r3, #4
 8009f3c:	441d      	add	r5, r3
 8009f3e:	4473      	add	r3, lr
 8009f40:	469e      	mov	lr, r3
 8009f42:	462e      	mov	r6, r5
 8009f44:	4566      	cmp	r6, ip
 8009f46:	d30e      	bcc.n	8009f66 <__mdiff+0xea>
 8009f48:	f10c 0203 	add.w	r2, ip, #3
 8009f4c:	1b52      	subs	r2, r2, r5
 8009f4e:	f022 0203 	bic.w	r2, r2, #3
 8009f52:	3d03      	subs	r5, #3
 8009f54:	45ac      	cmp	ip, r5
 8009f56:	bf38      	it	cc
 8009f58:	2200      	movcc	r2, #0
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f60:	b17a      	cbz	r2, 8009f82 <__mdiff+0x106>
 8009f62:	6107      	str	r7, [r0, #16]
 8009f64:	e7a4      	b.n	8009eb0 <__mdiff+0x34>
 8009f66:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f6a:	fa11 f288 	uxtah	r2, r1, r8
 8009f6e:	1414      	asrs	r4, r2, #16
 8009f70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f74:	b292      	uxth	r2, r2
 8009f76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f7a:	f84e 2b04 	str.w	r2, [lr], #4
 8009f7e:	1421      	asrs	r1, r4, #16
 8009f80:	e7e0      	b.n	8009f44 <__mdiff+0xc8>
 8009f82:	3f01      	subs	r7, #1
 8009f84:	e7ea      	b.n	8009f5c <__mdiff+0xe0>
 8009f86:	bf00      	nop
 8009f88:	0800ab40 	.word	0x0800ab40
 8009f8c:	0800ab51 	.word	0x0800ab51

08009f90 <__d2b>:
 8009f90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f94:	460f      	mov	r7, r1
 8009f96:	2101      	movs	r1, #1
 8009f98:	ec59 8b10 	vmov	r8, r9, d0
 8009f9c:	4616      	mov	r6, r2
 8009f9e:	f7ff fcd5 	bl	800994c <_Balloc>
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	b930      	cbnz	r0, 8009fb4 <__d2b+0x24>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	4b24      	ldr	r3, [pc, #144]	; (800a03c <__d2b+0xac>)
 8009faa:	4825      	ldr	r0, [pc, #148]	; (800a040 <__d2b+0xb0>)
 8009fac:	f240 310f 	movw	r1, #783	; 0x30f
 8009fb0:	f000 fb0a 	bl	800a5c8 <__assert_func>
 8009fb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009fb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fbc:	bb2d      	cbnz	r5, 800a00a <__d2b+0x7a>
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	f1b8 0300 	subs.w	r3, r8, #0
 8009fc4:	d026      	beq.n	800a014 <__d2b+0x84>
 8009fc6:	4668      	mov	r0, sp
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	f7ff fd87 	bl	8009adc <__lo0bits>
 8009fce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009fd2:	b1e8      	cbz	r0, 800a010 <__d2b+0x80>
 8009fd4:	f1c0 0320 	rsb	r3, r0, #32
 8009fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fdc:	430b      	orrs	r3, r1
 8009fde:	40c2      	lsrs	r2, r0
 8009fe0:	6163      	str	r3, [r4, #20]
 8009fe2:	9201      	str	r2, [sp, #4]
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	61a3      	str	r3, [r4, #24]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	bf14      	ite	ne
 8009fec:	2202      	movne	r2, #2
 8009fee:	2201      	moveq	r2, #1
 8009ff0:	6122      	str	r2, [r4, #16]
 8009ff2:	b1bd      	cbz	r5, 800a024 <__d2b+0x94>
 8009ff4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ff8:	4405      	add	r5, r0
 8009ffa:	603d      	str	r5, [r7, #0]
 8009ffc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a000:	6030      	str	r0, [r6, #0]
 800a002:	4620      	mov	r0, r4
 800a004:	b003      	add	sp, #12
 800a006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a00a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a00e:	e7d6      	b.n	8009fbe <__d2b+0x2e>
 800a010:	6161      	str	r1, [r4, #20]
 800a012:	e7e7      	b.n	8009fe4 <__d2b+0x54>
 800a014:	a801      	add	r0, sp, #4
 800a016:	f7ff fd61 	bl	8009adc <__lo0bits>
 800a01a:	9b01      	ldr	r3, [sp, #4]
 800a01c:	6163      	str	r3, [r4, #20]
 800a01e:	3020      	adds	r0, #32
 800a020:	2201      	movs	r2, #1
 800a022:	e7e5      	b.n	8009ff0 <__d2b+0x60>
 800a024:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a028:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a02c:	6038      	str	r0, [r7, #0]
 800a02e:	6918      	ldr	r0, [r3, #16]
 800a030:	f7ff fd34 	bl	8009a9c <__hi0bits>
 800a034:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a038:	e7e2      	b.n	800a000 <__d2b+0x70>
 800a03a:	bf00      	nop
 800a03c:	0800ab40 	.word	0x0800ab40
 800a040:	0800ab51 	.word	0x0800ab51

0800a044 <__ssputs_r>:
 800a044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a048:	688e      	ldr	r6, [r1, #8]
 800a04a:	461f      	mov	r7, r3
 800a04c:	42be      	cmp	r6, r7
 800a04e:	680b      	ldr	r3, [r1, #0]
 800a050:	4682      	mov	sl, r0
 800a052:	460c      	mov	r4, r1
 800a054:	4690      	mov	r8, r2
 800a056:	d82c      	bhi.n	800a0b2 <__ssputs_r+0x6e>
 800a058:	898a      	ldrh	r2, [r1, #12]
 800a05a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a05e:	d026      	beq.n	800a0ae <__ssputs_r+0x6a>
 800a060:	6965      	ldr	r5, [r4, #20]
 800a062:	6909      	ldr	r1, [r1, #16]
 800a064:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a068:	eba3 0901 	sub.w	r9, r3, r1
 800a06c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a070:	1c7b      	adds	r3, r7, #1
 800a072:	444b      	add	r3, r9
 800a074:	106d      	asrs	r5, r5, #1
 800a076:	429d      	cmp	r5, r3
 800a078:	bf38      	it	cc
 800a07a:	461d      	movcc	r5, r3
 800a07c:	0553      	lsls	r3, r2, #21
 800a07e:	d527      	bpl.n	800a0d0 <__ssputs_r+0x8c>
 800a080:	4629      	mov	r1, r5
 800a082:	f7ff fbd7 	bl	8009834 <_malloc_r>
 800a086:	4606      	mov	r6, r0
 800a088:	b360      	cbz	r0, 800a0e4 <__ssputs_r+0xa0>
 800a08a:	6921      	ldr	r1, [r4, #16]
 800a08c:	464a      	mov	r2, r9
 800a08e:	f000 fa8d 	bl	800a5ac <memcpy>
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a09c:	81a3      	strh	r3, [r4, #12]
 800a09e:	6126      	str	r6, [r4, #16]
 800a0a0:	6165      	str	r5, [r4, #20]
 800a0a2:	444e      	add	r6, r9
 800a0a4:	eba5 0509 	sub.w	r5, r5, r9
 800a0a8:	6026      	str	r6, [r4, #0]
 800a0aa:	60a5      	str	r5, [r4, #8]
 800a0ac:	463e      	mov	r6, r7
 800a0ae:	42be      	cmp	r6, r7
 800a0b0:	d900      	bls.n	800a0b4 <__ssputs_r+0x70>
 800a0b2:	463e      	mov	r6, r7
 800a0b4:	6820      	ldr	r0, [r4, #0]
 800a0b6:	4632      	mov	r2, r6
 800a0b8:	4641      	mov	r1, r8
 800a0ba:	f000 fa2b 	bl	800a514 <memmove>
 800a0be:	68a3      	ldr	r3, [r4, #8]
 800a0c0:	1b9b      	subs	r3, r3, r6
 800a0c2:	60a3      	str	r3, [r4, #8]
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	4433      	add	r3, r6
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d0:	462a      	mov	r2, r5
 800a0d2:	f000 fabf 	bl	800a654 <_realloc_r>
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d1e0      	bne.n	800a09e <__ssputs_r+0x5a>
 800a0dc:	6921      	ldr	r1, [r4, #16]
 800a0de:	4650      	mov	r0, sl
 800a0e0:	f7ff fb34 	bl	800974c <_free_r>
 800a0e4:	230c      	movs	r3, #12
 800a0e6:	f8ca 3000 	str.w	r3, [sl]
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0f0:	81a3      	strh	r3, [r4, #12]
 800a0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f6:	e7e9      	b.n	800a0cc <__ssputs_r+0x88>

0800a0f8 <_svfiprintf_r>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	4698      	mov	r8, r3
 800a0fe:	898b      	ldrh	r3, [r1, #12]
 800a100:	061b      	lsls	r3, r3, #24
 800a102:	b09d      	sub	sp, #116	; 0x74
 800a104:	4607      	mov	r7, r0
 800a106:	460d      	mov	r5, r1
 800a108:	4614      	mov	r4, r2
 800a10a:	d50e      	bpl.n	800a12a <_svfiprintf_r+0x32>
 800a10c:	690b      	ldr	r3, [r1, #16]
 800a10e:	b963      	cbnz	r3, 800a12a <_svfiprintf_r+0x32>
 800a110:	2140      	movs	r1, #64	; 0x40
 800a112:	f7ff fb8f 	bl	8009834 <_malloc_r>
 800a116:	6028      	str	r0, [r5, #0]
 800a118:	6128      	str	r0, [r5, #16]
 800a11a:	b920      	cbnz	r0, 800a126 <_svfiprintf_r+0x2e>
 800a11c:	230c      	movs	r3, #12
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	f04f 30ff 	mov.w	r0, #4294967295
 800a124:	e0d0      	b.n	800a2c8 <_svfiprintf_r+0x1d0>
 800a126:	2340      	movs	r3, #64	; 0x40
 800a128:	616b      	str	r3, [r5, #20]
 800a12a:	2300      	movs	r3, #0
 800a12c:	9309      	str	r3, [sp, #36]	; 0x24
 800a12e:	2320      	movs	r3, #32
 800a130:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a134:	f8cd 800c 	str.w	r8, [sp, #12]
 800a138:	2330      	movs	r3, #48	; 0x30
 800a13a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a2e0 <_svfiprintf_r+0x1e8>
 800a13e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a142:	f04f 0901 	mov.w	r9, #1
 800a146:	4623      	mov	r3, r4
 800a148:	469a      	mov	sl, r3
 800a14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a14e:	b10a      	cbz	r2, 800a154 <_svfiprintf_r+0x5c>
 800a150:	2a25      	cmp	r2, #37	; 0x25
 800a152:	d1f9      	bne.n	800a148 <_svfiprintf_r+0x50>
 800a154:	ebba 0b04 	subs.w	fp, sl, r4
 800a158:	d00b      	beq.n	800a172 <_svfiprintf_r+0x7a>
 800a15a:	465b      	mov	r3, fp
 800a15c:	4622      	mov	r2, r4
 800a15e:	4629      	mov	r1, r5
 800a160:	4638      	mov	r0, r7
 800a162:	f7ff ff6f 	bl	800a044 <__ssputs_r>
 800a166:	3001      	adds	r0, #1
 800a168:	f000 80a9 	beq.w	800a2be <_svfiprintf_r+0x1c6>
 800a16c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a16e:	445a      	add	r2, fp
 800a170:	9209      	str	r2, [sp, #36]	; 0x24
 800a172:	f89a 3000 	ldrb.w	r3, [sl]
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 80a1 	beq.w	800a2be <_svfiprintf_r+0x1c6>
 800a17c:	2300      	movs	r3, #0
 800a17e:	f04f 32ff 	mov.w	r2, #4294967295
 800a182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a186:	f10a 0a01 	add.w	sl, sl, #1
 800a18a:	9304      	str	r3, [sp, #16]
 800a18c:	9307      	str	r3, [sp, #28]
 800a18e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a192:	931a      	str	r3, [sp, #104]	; 0x68
 800a194:	4654      	mov	r4, sl
 800a196:	2205      	movs	r2, #5
 800a198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19c:	4850      	ldr	r0, [pc, #320]	; (800a2e0 <_svfiprintf_r+0x1e8>)
 800a19e:	f7f6 f837 	bl	8000210 <memchr>
 800a1a2:	9a04      	ldr	r2, [sp, #16]
 800a1a4:	b9d8      	cbnz	r0, 800a1de <_svfiprintf_r+0xe6>
 800a1a6:	06d0      	lsls	r0, r2, #27
 800a1a8:	bf44      	itt	mi
 800a1aa:	2320      	movmi	r3, #32
 800a1ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1b0:	0711      	lsls	r1, r2, #28
 800a1b2:	bf44      	itt	mi
 800a1b4:	232b      	movmi	r3, #43	; 0x2b
 800a1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a1be:	2b2a      	cmp	r3, #42	; 0x2a
 800a1c0:	d015      	beq.n	800a1ee <_svfiprintf_r+0xf6>
 800a1c2:	9a07      	ldr	r2, [sp, #28]
 800a1c4:	4654      	mov	r4, sl
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	f04f 0c0a 	mov.w	ip, #10
 800a1cc:	4621      	mov	r1, r4
 800a1ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1d2:	3b30      	subs	r3, #48	; 0x30
 800a1d4:	2b09      	cmp	r3, #9
 800a1d6:	d94d      	bls.n	800a274 <_svfiprintf_r+0x17c>
 800a1d8:	b1b0      	cbz	r0, 800a208 <_svfiprintf_r+0x110>
 800a1da:	9207      	str	r2, [sp, #28]
 800a1dc:	e014      	b.n	800a208 <_svfiprintf_r+0x110>
 800a1de:	eba0 0308 	sub.w	r3, r0, r8
 800a1e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	9304      	str	r3, [sp, #16]
 800a1ea:	46a2      	mov	sl, r4
 800a1ec:	e7d2      	b.n	800a194 <_svfiprintf_r+0x9c>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	1d19      	adds	r1, r3, #4
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	9103      	str	r1, [sp, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	bfbb      	ittet	lt
 800a1fa:	425b      	neglt	r3, r3
 800a1fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a200:	9307      	strge	r3, [sp, #28]
 800a202:	9307      	strlt	r3, [sp, #28]
 800a204:	bfb8      	it	lt
 800a206:	9204      	strlt	r2, [sp, #16]
 800a208:	7823      	ldrb	r3, [r4, #0]
 800a20a:	2b2e      	cmp	r3, #46	; 0x2e
 800a20c:	d10c      	bne.n	800a228 <_svfiprintf_r+0x130>
 800a20e:	7863      	ldrb	r3, [r4, #1]
 800a210:	2b2a      	cmp	r3, #42	; 0x2a
 800a212:	d134      	bne.n	800a27e <_svfiprintf_r+0x186>
 800a214:	9b03      	ldr	r3, [sp, #12]
 800a216:	1d1a      	adds	r2, r3, #4
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	9203      	str	r2, [sp, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	bfb8      	it	lt
 800a220:	f04f 33ff 	movlt.w	r3, #4294967295
 800a224:	3402      	adds	r4, #2
 800a226:	9305      	str	r3, [sp, #20]
 800a228:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a2f0 <_svfiprintf_r+0x1f8>
 800a22c:	7821      	ldrb	r1, [r4, #0]
 800a22e:	2203      	movs	r2, #3
 800a230:	4650      	mov	r0, sl
 800a232:	f7f5 ffed 	bl	8000210 <memchr>
 800a236:	b138      	cbz	r0, 800a248 <_svfiprintf_r+0x150>
 800a238:	9b04      	ldr	r3, [sp, #16]
 800a23a:	eba0 000a 	sub.w	r0, r0, sl
 800a23e:	2240      	movs	r2, #64	; 0x40
 800a240:	4082      	lsls	r2, r0
 800a242:	4313      	orrs	r3, r2
 800a244:	3401      	adds	r4, #1
 800a246:	9304      	str	r3, [sp, #16]
 800a248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24c:	4825      	ldr	r0, [pc, #148]	; (800a2e4 <_svfiprintf_r+0x1ec>)
 800a24e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a252:	2206      	movs	r2, #6
 800a254:	f7f5 ffdc 	bl	8000210 <memchr>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d038      	beq.n	800a2ce <_svfiprintf_r+0x1d6>
 800a25c:	4b22      	ldr	r3, [pc, #136]	; (800a2e8 <_svfiprintf_r+0x1f0>)
 800a25e:	bb1b      	cbnz	r3, 800a2a8 <_svfiprintf_r+0x1b0>
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	3307      	adds	r3, #7
 800a264:	f023 0307 	bic.w	r3, r3, #7
 800a268:	3308      	adds	r3, #8
 800a26a:	9303      	str	r3, [sp, #12]
 800a26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26e:	4433      	add	r3, r6
 800a270:	9309      	str	r3, [sp, #36]	; 0x24
 800a272:	e768      	b.n	800a146 <_svfiprintf_r+0x4e>
 800a274:	fb0c 3202 	mla	r2, ip, r2, r3
 800a278:	460c      	mov	r4, r1
 800a27a:	2001      	movs	r0, #1
 800a27c:	e7a6      	b.n	800a1cc <_svfiprintf_r+0xd4>
 800a27e:	2300      	movs	r3, #0
 800a280:	3401      	adds	r4, #1
 800a282:	9305      	str	r3, [sp, #20]
 800a284:	4619      	mov	r1, r3
 800a286:	f04f 0c0a 	mov.w	ip, #10
 800a28a:	4620      	mov	r0, r4
 800a28c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a290:	3a30      	subs	r2, #48	; 0x30
 800a292:	2a09      	cmp	r2, #9
 800a294:	d903      	bls.n	800a29e <_svfiprintf_r+0x1a6>
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0c6      	beq.n	800a228 <_svfiprintf_r+0x130>
 800a29a:	9105      	str	r1, [sp, #20]
 800a29c:	e7c4      	b.n	800a228 <_svfiprintf_r+0x130>
 800a29e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e7f0      	b.n	800a28a <_svfiprintf_r+0x192>
 800a2a8:	ab03      	add	r3, sp, #12
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	462a      	mov	r2, r5
 800a2ae:	4b0f      	ldr	r3, [pc, #60]	; (800a2ec <_svfiprintf_r+0x1f4>)
 800a2b0:	a904      	add	r1, sp, #16
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f7fd fd74 	bl	8007da0 <_printf_float>
 800a2b8:	1c42      	adds	r2, r0, #1
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	d1d6      	bne.n	800a26c <_svfiprintf_r+0x174>
 800a2be:	89ab      	ldrh	r3, [r5, #12]
 800a2c0:	065b      	lsls	r3, r3, #25
 800a2c2:	f53f af2d 	bmi.w	800a120 <_svfiprintf_r+0x28>
 800a2c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2c8:	b01d      	add	sp, #116	; 0x74
 800a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ce:	ab03      	add	r3, sp, #12
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4b05      	ldr	r3, [pc, #20]	; (800a2ec <_svfiprintf_r+0x1f4>)
 800a2d6:	a904      	add	r1, sp, #16
 800a2d8:	4638      	mov	r0, r7
 800a2da:	f7fe f805 	bl	80082e8 <_printf_i>
 800a2de:	e7eb      	b.n	800a2b8 <_svfiprintf_r+0x1c0>
 800a2e0:	0800acac 	.word	0x0800acac
 800a2e4:	0800acb6 	.word	0x0800acb6
 800a2e8:	08007da1 	.word	0x08007da1
 800a2ec:	0800a045 	.word	0x0800a045
 800a2f0:	0800acb2 	.word	0x0800acb2

0800a2f4 <__sflush_r>:
 800a2f4:	898a      	ldrh	r2, [r1, #12]
 800a2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	0710      	lsls	r0, r2, #28
 800a2fe:	460c      	mov	r4, r1
 800a300:	d458      	bmi.n	800a3b4 <__sflush_r+0xc0>
 800a302:	684b      	ldr	r3, [r1, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	dc05      	bgt.n	800a314 <__sflush_r+0x20>
 800a308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	dc02      	bgt.n	800a314 <__sflush_r+0x20>
 800a30e:	2000      	movs	r0, #0
 800a310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a316:	2e00      	cmp	r6, #0
 800a318:	d0f9      	beq.n	800a30e <__sflush_r+0x1a>
 800a31a:	2300      	movs	r3, #0
 800a31c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a320:	682f      	ldr	r7, [r5, #0]
 800a322:	6a21      	ldr	r1, [r4, #32]
 800a324:	602b      	str	r3, [r5, #0]
 800a326:	d032      	beq.n	800a38e <__sflush_r+0x9a>
 800a328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	075a      	lsls	r2, r3, #29
 800a32e:	d505      	bpl.n	800a33c <__sflush_r+0x48>
 800a330:	6863      	ldr	r3, [r4, #4]
 800a332:	1ac0      	subs	r0, r0, r3
 800a334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a336:	b10b      	cbz	r3, 800a33c <__sflush_r+0x48>
 800a338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a33a:	1ac0      	subs	r0, r0, r3
 800a33c:	2300      	movs	r3, #0
 800a33e:	4602      	mov	r2, r0
 800a340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a342:	6a21      	ldr	r1, [r4, #32]
 800a344:	4628      	mov	r0, r5
 800a346:	47b0      	blx	r6
 800a348:	1c43      	adds	r3, r0, #1
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	d106      	bne.n	800a35c <__sflush_r+0x68>
 800a34e:	6829      	ldr	r1, [r5, #0]
 800a350:	291d      	cmp	r1, #29
 800a352:	d82b      	bhi.n	800a3ac <__sflush_r+0xb8>
 800a354:	4a29      	ldr	r2, [pc, #164]	; (800a3fc <__sflush_r+0x108>)
 800a356:	410a      	asrs	r2, r1
 800a358:	07d6      	lsls	r6, r2, #31
 800a35a:	d427      	bmi.n	800a3ac <__sflush_r+0xb8>
 800a35c:	2200      	movs	r2, #0
 800a35e:	6062      	str	r2, [r4, #4]
 800a360:	04d9      	lsls	r1, r3, #19
 800a362:	6922      	ldr	r2, [r4, #16]
 800a364:	6022      	str	r2, [r4, #0]
 800a366:	d504      	bpl.n	800a372 <__sflush_r+0x7e>
 800a368:	1c42      	adds	r2, r0, #1
 800a36a:	d101      	bne.n	800a370 <__sflush_r+0x7c>
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	b903      	cbnz	r3, 800a372 <__sflush_r+0x7e>
 800a370:	6560      	str	r0, [r4, #84]	; 0x54
 800a372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a374:	602f      	str	r7, [r5, #0]
 800a376:	2900      	cmp	r1, #0
 800a378:	d0c9      	beq.n	800a30e <__sflush_r+0x1a>
 800a37a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a37e:	4299      	cmp	r1, r3
 800a380:	d002      	beq.n	800a388 <__sflush_r+0x94>
 800a382:	4628      	mov	r0, r5
 800a384:	f7ff f9e2 	bl	800974c <_free_r>
 800a388:	2000      	movs	r0, #0
 800a38a:	6360      	str	r0, [r4, #52]	; 0x34
 800a38c:	e7c0      	b.n	800a310 <__sflush_r+0x1c>
 800a38e:	2301      	movs	r3, #1
 800a390:	4628      	mov	r0, r5
 800a392:	47b0      	blx	r6
 800a394:	1c41      	adds	r1, r0, #1
 800a396:	d1c8      	bne.n	800a32a <__sflush_r+0x36>
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0c5      	beq.n	800a32a <__sflush_r+0x36>
 800a39e:	2b1d      	cmp	r3, #29
 800a3a0:	d001      	beq.n	800a3a6 <__sflush_r+0xb2>
 800a3a2:	2b16      	cmp	r3, #22
 800a3a4:	d101      	bne.n	800a3aa <__sflush_r+0xb6>
 800a3a6:	602f      	str	r7, [r5, #0]
 800a3a8:	e7b1      	b.n	800a30e <__sflush_r+0x1a>
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	e7ad      	b.n	800a310 <__sflush_r+0x1c>
 800a3b4:	690f      	ldr	r7, [r1, #16]
 800a3b6:	2f00      	cmp	r7, #0
 800a3b8:	d0a9      	beq.n	800a30e <__sflush_r+0x1a>
 800a3ba:	0793      	lsls	r3, r2, #30
 800a3bc:	680e      	ldr	r6, [r1, #0]
 800a3be:	bf08      	it	eq
 800a3c0:	694b      	ldreq	r3, [r1, #20]
 800a3c2:	600f      	str	r7, [r1, #0]
 800a3c4:	bf18      	it	ne
 800a3c6:	2300      	movne	r3, #0
 800a3c8:	eba6 0807 	sub.w	r8, r6, r7
 800a3cc:	608b      	str	r3, [r1, #8]
 800a3ce:	f1b8 0f00 	cmp.w	r8, #0
 800a3d2:	dd9c      	ble.n	800a30e <__sflush_r+0x1a>
 800a3d4:	6a21      	ldr	r1, [r4, #32]
 800a3d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3d8:	4643      	mov	r3, r8
 800a3da:	463a      	mov	r2, r7
 800a3dc:	4628      	mov	r0, r5
 800a3de:	47b0      	blx	r6
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	dc06      	bgt.n	800a3f2 <__sflush_r+0xfe>
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ea:	81a3      	strh	r3, [r4, #12]
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	e78e      	b.n	800a310 <__sflush_r+0x1c>
 800a3f2:	4407      	add	r7, r0
 800a3f4:	eba8 0800 	sub.w	r8, r8, r0
 800a3f8:	e7e9      	b.n	800a3ce <__sflush_r+0xda>
 800a3fa:	bf00      	nop
 800a3fc:	dfbffffe 	.word	0xdfbffffe

0800a400 <_fflush_r>:
 800a400:	b538      	push	{r3, r4, r5, lr}
 800a402:	690b      	ldr	r3, [r1, #16]
 800a404:	4605      	mov	r5, r0
 800a406:	460c      	mov	r4, r1
 800a408:	b913      	cbnz	r3, 800a410 <_fflush_r+0x10>
 800a40a:	2500      	movs	r5, #0
 800a40c:	4628      	mov	r0, r5
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	b118      	cbz	r0, 800a41a <_fflush_r+0x1a>
 800a412:	6a03      	ldr	r3, [r0, #32]
 800a414:	b90b      	cbnz	r3, 800a41a <_fflush_r+0x1a>
 800a416:	f7fe f915 	bl	8008644 <__sinit>
 800a41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0f3      	beq.n	800a40a <_fflush_r+0xa>
 800a422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a424:	07d0      	lsls	r0, r2, #31
 800a426:	d404      	bmi.n	800a432 <_fflush_r+0x32>
 800a428:	0599      	lsls	r1, r3, #22
 800a42a:	d402      	bmi.n	800a432 <_fflush_r+0x32>
 800a42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a42e:	f7fe fb10 	bl	8008a52 <__retarget_lock_acquire_recursive>
 800a432:	4628      	mov	r0, r5
 800a434:	4621      	mov	r1, r4
 800a436:	f7ff ff5d 	bl	800a2f4 <__sflush_r>
 800a43a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a43c:	07da      	lsls	r2, r3, #31
 800a43e:	4605      	mov	r5, r0
 800a440:	d4e4      	bmi.n	800a40c <_fflush_r+0xc>
 800a442:	89a3      	ldrh	r3, [r4, #12]
 800a444:	059b      	lsls	r3, r3, #22
 800a446:	d4e1      	bmi.n	800a40c <_fflush_r+0xc>
 800a448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a44a:	f7fe fb03 	bl	8008a54 <__retarget_lock_release_recursive>
 800a44e:	e7dd      	b.n	800a40c <_fflush_r+0xc>

0800a450 <__swhatbuf_r>:
 800a450:	b570      	push	{r4, r5, r6, lr}
 800a452:	460c      	mov	r4, r1
 800a454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a458:	2900      	cmp	r1, #0
 800a45a:	b096      	sub	sp, #88	; 0x58
 800a45c:	4615      	mov	r5, r2
 800a45e:	461e      	mov	r6, r3
 800a460:	da0d      	bge.n	800a47e <__swhatbuf_r+0x2e>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a468:	f04f 0100 	mov.w	r1, #0
 800a46c:	bf0c      	ite	eq
 800a46e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a472:	2340      	movne	r3, #64	; 0x40
 800a474:	2000      	movs	r0, #0
 800a476:	6031      	str	r1, [r6, #0]
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	b016      	add	sp, #88	; 0x58
 800a47c:	bd70      	pop	{r4, r5, r6, pc}
 800a47e:	466a      	mov	r2, sp
 800a480:	f000 f862 	bl	800a548 <_fstat_r>
 800a484:	2800      	cmp	r0, #0
 800a486:	dbec      	blt.n	800a462 <__swhatbuf_r+0x12>
 800a488:	9901      	ldr	r1, [sp, #4]
 800a48a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a48e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a492:	4259      	negs	r1, r3
 800a494:	4159      	adcs	r1, r3
 800a496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a49a:	e7eb      	b.n	800a474 <__swhatbuf_r+0x24>

0800a49c <__smakebuf_r>:
 800a49c:	898b      	ldrh	r3, [r1, #12]
 800a49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4a0:	079d      	lsls	r5, r3, #30
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	d507      	bpl.n	800a4b8 <__smakebuf_r+0x1c>
 800a4a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	6123      	str	r3, [r4, #16]
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	6163      	str	r3, [r4, #20]
 800a4b4:	b002      	add	sp, #8
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
 800a4b8:	ab01      	add	r3, sp, #4
 800a4ba:	466a      	mov	r2, sp
 800a4bc:	f7ff ffc8 	bl	800a450 <__swhatbuf_r>
 800a4c0:	9900      	ldr	r1, [sp, #0]
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f7ff f9b5 	bl	8009834 <_malloc_r>
 800a4ca:	b948      	cbnz	r0, 800a4e0 <__smakebuf_r+0x44>
 800a4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d0:	059a      	lsls	r2, r3, #22
 800a4d2:	d4ef      	bmi.n	800a4b4 <__smakebuf_r+0x18>
 800a4d4:	f023 0303 	bic.w	r3, r3, #3
 800a4d8:	f043 0302 	orr.w	r3, r3, #2
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	e7e3      	b.n	800a4a8 <__smakebuf_r+0xc>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	6020      	str	r0, [r4, #0]
 800a4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e8:	81a3      	strh	r3, [r4, #12]
 800a4ea:	9b00      	ldr	r3, [sp, #0]
 800a4ec:	6163      	str	r3, [r4, #20]
 800a4ee:	9b01      	ldr	r3, [sp, #4]
 800a4f0:	6120      	str	r0, [r4, #16]
 800a4f2:	b15b      	cbz	r3, 800a50c <__smakebuf_r+0x70>
 800a4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	f000 f837 	bl	800a56c <_isatty_r>
 800a4fe:	b128      	cbz	r0, 800a50c <__smakebuf_r+0x70>
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	f023 0303 	bic.w	r3, r3, #3
 800a506:	f043 0301 	orr.w	r3, r3, #1
 800a50a:	81a3      	strh	r3, [r4, #12]
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	431d      	orrs	r5, r3
 800a510:	81a5      	strh	r5, [r4, #12]
 800a512:	e7cf      	b.n	800a4b4 <__smakebuf_r+0x18>

0800a514 <memmove>:
 800a514:	4288      	cmp	r0, r1
 800a516:	b510      	push	{r4, lr}
 800a518:	eb01 0402 	add.w	r4, r1, r2
 800a51c:	d902      	bls.n	800a524 <memmove+0x10>
 800a51e:	4284      	cmp	r4, r0
 800a520:	4623      	mov	r3, r4
 800a522:	d807      	bhi.n	800a534 <memmove+0x20>
 800a524:	1e43      	subs	r3, r0, #1
 800a526:	42a1      	cmp	r1, r4
 800a528:	d008      	beq.n	800a53c <memmove+0x28>
 800a52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a532:	e7f8      	b.n	800a526 <memmove+0x12>
 800a534:	4402      	add	r2, r0
 800a536:	4601      	mov	r1, r0
 800a538:	428a      	cmp	r2, r1
 800a53a:	d100      	bne.n	800a53e <memmove+0x2a>
 800a53c:	bd10      	pop	{r4, pc}
 800a53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a546:	e7f7      	b.n	800a538 <memmove+0x24>

0800a548 <_fstat_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d07      	ldr	r5, [pc, #28]	; (800a568 <_fstat_r+0x20>)
 800a54c:	2300      	movs	r3, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	4608      	mov	r0, r1
 800a552:	4611      	mov	r1, r2
 800a554:	602b      	str	r3, [r5, #0]
 800a556:	f7f7 f914 	bl	8001782 <_fstat>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	d102      	bne.n	800a564 <_fstat_r+0x1c>
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	b103      	cbz	r3, 800a564 <_fstat_r+0x1c>
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	bd38      	pop	{r3, r4, r5, pc}
 800a566:	bf00      	nop
 800a568:	20000bfc 	.word	0x20000bfc

0800a56c <_isatty_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4d06      	ldr	r5, [pc, #24]	; (800a588 <_isatty_r+0x1c>)
 800a570:	2300      	movs	r3, #0
 800a572:	4604      	mov	r4, r0
 800a574:	4608      	mov	r0, r1
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	f7f7 f913 	bl	80017a2 <_isatty>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_isatty_r+0x1a>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	b103      	cbz	r3, 800a586 <_isatty_r+0x1a>
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	20000bfc 	.word	0x20000bfc

0800a58c <_sbrk_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4d06      	ldr	r5, [pc, #24]	; (800a5a8 <_sbrk_r+0x1c>)
 800a590:	2300      	movs	r3, #0
 800a592:	4604      	mov	r4, r0
 800a594:	4608      	mov	r0, r1
 800a596:	602b      	str	r3, [r5, #0]
 800a598:	f7f7 f91c 	bl	80017d4 <_sbrk>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_sbrk_r+0x1a>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_sbrk_r+0x1a>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20000bfc 	.word	0x20000bfc

0800a5ac <memcpy>:
 800a5ac:	440a      	add	r2, r1
 800a5ae:	4291      	cmp	r1, r2
 800a5b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5b4:	d100      	bne.n	800a5b8 <memcpy+0xc>
 800a5b6:	4770      	bx	lr
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5c2:	4291      	cmp	r1, r2
 800a5c4:	d1f9      	bne.n	800a5ba <memcpy+0xe>
 800a5c6:	bd10      	pop	{r4, pc}

0800a5c8 <__assert_func>:
 800a5c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5ca:	4614      	mov	r4, r2
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <__assert_func+0x2c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	68d8      	ldr	r0, [r3, #12]
 800a5d6:	b14c      	cbz	r4, 800a5ec <__assert_func+0x24>
 800a5d8:	4b07      	ldr	r3, [pc, #28]	; (800a5f8 <__assert_func+0x30>)
 800a5da:	9100      	str	r1, [sp, #0]
 800a5dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5e0:	4906      	ldr	r1, [pc, #24]	; (800a5fc <__assert_func+0x34>)
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	f000 f872 	bl	800a6cc <fiprintf>
 800a5e8:	f000 f882 	bl	800a6f0 <abort>
 800a5ec:	4b04      	ldr	r3, [pc, #16]	; (800a600 <__assert_func+0x38>)
 800a5ee:	461c      	mov	r4, r3
 800a5f0:	e7f3      	b.n	800a5da <__assert_func+0x12>
 800a5f2:	bf00      	nop
 800a5f4:	20000064 	.word	0x20000064
 800a5f8:	0800acc7 	.word	0x0800acc7
 800a5fc:	0800acd4 	.word	0x0800acd4
 800a600:	0800ad02 	.word	0x0800ad02

0800a604 <_calloc_r>:
 800a604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a606:	fba1 2402 	umull	r2, r4, r1, r2
 800a60a:	b94c      	cbnz	r4, 800a620 <_calloc_r+0x1c>
 800a60c:	4611      	mov	r1, r2
 800a60e:	9201      	str	r2, [sp, #4]
 800a610:	f7ff f910 	bl	8009834 <_malloc_r>
 800a614:	9a01      	ldr	r2, [sp, #4]
 800a616:	4605      	mov	r5, r0
 800a618:	b930      	cbnz	r0, 800a628 <_calloc_r+0x24>
 800a61a:	4628      	mov	r0, r5
 800a61c:	b003      	add	sp, #12
 800a61e:	bd30      	pop	{r4, r5, pc}
 800a620:	220c      	movs	r2, #12
 800a622:	6002      	str	r2, [r0, #0]
 800a624:	2500      	movs	r5, #0
 800a626:	e7f8      	b.n	800a61a <_calloc_r+0x16>
 800a628:	4621      	mov	r1, r4
 800a62a:	f7fe f995 	bl	8008958 <memset>
 800a62e:	e7f4      	b.n	800a61a <_calloc_r+0x16>

0800a630 <__ascii_mbtowc>:
 800a630:	b082      	sub	sp, #8
 800a632:	b901      	cbnz	r1, 800a636 <__ascii_mbtowc+0x6>
 800a634:	a901      	add	r1, sp, #4
 800a636:	b142      	cbz	r2, 800a64a <__ascii_mbtowc+0x1a>
 800a638:	b14b      	cbz	r3, 800a64e <__ascii_mbtowc+0x1e>
 800a63a:	7813      	ldrb	r3, [r2, #0]
 800a63c:	600b      	str	r3, [r1, #0]
 800a63e:	7812      	ldrb	r2, [r2, #0]
 800a640:	1e10      	subs	r0, r2, #0
 800a642:	bf18      	it	ne
 800a644:	2001      	movne	r0, #1
 800a646:	b002      	add	sp, #8
 800a648:	4770      	bx	lr
 800a64a:	4610      	mov	r0, r2
 800a64c:	e7fb      	b.n	800a646 <__ascii_mbtowc+0x16>
 800a64e:	f06f 0001 	mvn.w	r0, #1
 800a652:	e7f8      	b.n	800a646 <__ascii_mbtowc+0x16>

0800a654 <_realloc_r>:
 800a654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a658:	4680      	mov	r8, r0
 800a65a:	4614      	mov	r4, r2
 800a65c:	460e      	mov	r6, r1
 800a65e:	b921      	cbnz	r1, 800a66a <_realloc_r+0x16>
 800a660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a664:	4611      	mov	r1, r2
 800a666:	f7ff b8e5 	b.w	8009834 <_malloc_r>
 800a66a:	b92a      	cbnz	r2, 800a678 <_realloc_r+0x24>
 800a66c:	f7ff f86e 	bl	800974c <_free_r>
 800a670:	4625      	mov	r5, r4
 800a672:	4628      	mov	r0, r5
 800a674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a678:	f000 f841 	bl	800a6fe <_malloc_usable_size_r>
 800a67c:	4284      	cmp	r4, r0
 800a67e:	4607      	mov	r7, r0
 800a680:	d802      	bhi.n	800a688 <_realloc_r+0x34>
 800a682:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a686:	d812      	bhi.n	800a6ae <_realloc_r+0x5a>
 800a688:	4621      	mov	r1, r4
 800a68a:	4640      	mov	r0, r8
 800a68c:	f7ff f8d2 	bl	8009834 <_malloc_r>
 800a690:	4605      	mov	r5, r0
 800a692:	2800      	cmp	r0, #0
 800a694:	d0ed      	beq.n	800a672 <_realloc_r+0x1e>
 800a696:	42bc      	cmp	r4, r7
 800a698:	4622      	mov	r2, r4
 800a69a:	4631      	mov	r1, r6
 800a69c:	bf28      	it	cs
 800a69e:	463a      	movcs	r2, r7
 800a6a0:	f7ff ff84 	bl	800a5ac <memcpy>
 800a6a4:	4631      	mov	r1, r6
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	f7ff f850 	bl	800974c <_free_r>
 800a6ac:	e7e1      	b.n	800a672 <_realloc_r+0x1e>
 800a6ae:	4635      	mov	r5, r6
 800a6b0:	e7df      	b.n	800a672 <_realloc_r+0x1e>

0800a6b2 <__ascii_wctomb>:
 800a6b2:	b149      	cbz	r1, 800a6c8 <__ascii_wctomb+0x16>
 800a6b4:	2aff      	cmp	r2, #255	; 0xff
 800a6b6:	bf85      	ittet	hi
 800a6b8:	238a      	movhi	r3, #138	; 0x8a
 800a6ba:	6003      	strhi	r3, [r0, #0]
 800a6bc:	700a      	strbls	r2, [r1, #0]
 800a6be:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6c2:	bf98      	it	ls
 800a6c4:	2001      	movls	r0, #1
 800a6c6:	4770      	bx	lr
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	4770      	bx	lr

0800a6cc <fiprintf>:
 800a6cc:	b40e      	push	{r1, r2, r3}
 800a6ce:	b503      	push	{r0, r1, lr}
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	ab03      	add	r3, sp, #12
 800a6d4:	4805      	ldr	r0, [pc, #20]	; (800a6ec <fiprintf+0x20>)
 800a6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6da:	6800      	ldr	r0, [r0, #0]
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	f000 f83f 	bl	800a760 <_vfiprintf_r>
 800a6e2:	b002      	add	sp, #8
 800a6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6e8:	b003      	add	sp, #12
 800a6ea:	4770      	bx	lr
 800a6ec:	20000064 	.word	0x20000064

0800a6f0 <abort>:
 800a6f0:	b508      	push	{r3, lr}
 800a6f2:	2006      	movs	r0, #6
 800a6f4:	f000 f976 	bl	800a9e4 <raise>
 800a6f8:	2001      	movs	r0, #1
 800a6fa:	f7f7 f80f 	bl	800171c <_exit>

0800a6fe <_malloc_usable_size_r>:
 800a6fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a702:	1f18      	subs	r0, r3, #4
 800a704:	2b00      	cmp	r3, #0
 800a706:	bfbc      	itt	lt
 800a708:	580b      	ldrlt	r3, [r1, r0]
 800a70a:	18c0      	addlt	r0, r0, r3
 800a70c:	4770      	bx	lr

0800a70e <__sfputc_r>:
 800a70e:	6893      	ldr	r3, [r2, #8]
 800a710:	3b01      	subs	r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	b410      	push	{r4}
 800a716:	6093      	str	r3, [r2, #8]
 800a718:	da08      	bge.n	800a72c <__sfputc_r+0x1e>
 800a71a:	6994      	ldr	r4, [r2, #24]
 800a71c:	42a3      	cmp	r3, r4
 800a71e:	db01      	blt.n	800a724 <__sfputc_r+0x16>
 800a720:	290a      	cmp	r1, #10
 800a722:	d103      	bne.n	800a72c <__sfputc_r+0x1e>
 800a724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a728:	f7fe b881 	b.w	800882e <__swbuf_r>
 800a72c:	6813      	ldr	r3, [r2, #0]
 800a72e:	1c58      	adds	r0, r3, #1
 800a730:	6010      	str	r0, [r2, #0]
 800a732:	7019      	strb	r1, [r3, #0]
 800a734:	4608      	mov	r0, r1
 800a736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <__sfputs_r>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	4606      	mov	r6, r0
 800a740:	460f      	mov	r7, r1
 800a742:	4614      	mov	r4, r2
 800a744:	18d5      	adds	r5, r2, r3
 800a746:	42ac      	cmp	r4, r5
 800a748:	d101      	bne.n	800a74e <__sfputs_r+0x12>
 800a74a:	2000      	movs	r0, #0
 800a74c:	e007      	b.n	800a75e <__sfputs_r+0x22>
 800a74e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a752:	463a      	mov	r2, r7
 800a754:	4630      	mov	r0, r6
 800a756:	f7ff ffda 	bl	800a70e <__sfputc_r>
 800a75a:	1c43      	adds	r3, r0, #1
 800a75c:	d1f3      	bne.n	800a746 <__sfputs_r+0xa>
 800a75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a760 <_vfiprintf_r>:
 800a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a764:	460d      	mov	r5, r1
 800a766:	b09d      	sub	sp, #116	; 0x74
 800a768:	4614      	mov	r4, r2
 800a76a:	4698      	mov	r8, r3
 800a76c:	4606      	mov	r6, r0
 800a76e:	b118      	cbz	r0, 800a778 <_vfiprintf_r+0x18>
 800a770:	6a03      	ldr	r3, [r0, #32]
 800a772:	b90b      	cbnz	r3, 800a778 <_vfiprintf_r+0x18>
 800a774:	f7fd ff66 	bl	8008644 <__sinit>
 800a778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a77a:	07d9      	lsls	r1, r3, #31
 800a77c:	d405      	bmi.n	800a78a <_vfiprintf_r+0x2a>
 800a77e:	89ab      	ldrh	r3, [r5, #12]
 800a780:	059a      	lsls	r2, r3, #22
 800a782:	d402      	bmi.n	800a78a <_vfiprintf_r+0x2a>
 800a784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a786:	f7fe f964 	bl	8008a52 <__retarget_lock_acquire_recursive>
 800a78a:	89ab      	ldrh	r3, [r5, #12]
 800a78c:	071b      	lsls	r3, r3, #28
 800a78e:	d501      	bpl.n	800a794 <_vfiprintf_r+0x34>
 800a790:	692b      	ldr	r3, [r5, #16]
 800a792:	b99b      	cbnz	r3, 800a7bc <_vfiprintf_r+0x5c>
 800a794:	4629      	mov	r1, r5
 800a796:	4630      	mov	r0, r6
 800a798:	f7fe f886 	bl	80088a8 <__swsetup_r>
 800a79c:	b170      	cbz	r0, 800a7bc <_vfiprintf_r+0x5c>
 800a79e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7a0:	07dc      	lsls	r4, r3, #31
 800a7a2:	d504      	bpl.n	800a7ae <_vfiprintf_r+0x4e>
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a8:	b01d      	add	sp, #116	; 0x74
 800a7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ae:	89ab      	ldrh	r3, [r5, #12]
 800a7b0:	0598      	lsls	r0, r3, #22
 800a7b2:	d4f7      	bmi.n	800a7a4 <_vfiprintf_r+0x44>
 800a7b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7b6:	f7fe f94d 	bl	8008a54 <__retarget_lock_release_recursive>
 800a7ba:	e7f3      	b.n	800a7a4 <_vfiprintf_r+0x44>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	9309      	str	r3, [sp, #36]	; 0x24
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ca:	2330      	movs	r3, #48	; 0x30
 800a7cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a980 <_vfiprintf_r+0x220>
 800a7d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7d4:	f04f 0901 	mov.w	r9, #1
 800a7d8:	4623      	mov	r3, r4
 800a7da:	469a      	mov	sl, r3
 800a7dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7e0:	b10a      	cbz	r2, 800a7e6 <_vfiprintf_r+0x86>
 800a7e2:	2a25      	cmp	r2, #37	; 0x25
 800a7e4:	d1f9      	bne.n	800a7da <_vfiprintf_r+0x7a>
 800a7e6:	ebba 0b04 	subs.w	fp, sl, r4
 800a7ea:	d00b      	beq.n	800a804 <_vfiprintf_r+0xa4>
 800a7ec:	465b      	mov	r3, fp
 800a7ee:	4622      	mov	r2, r4
 800a7f0:	4629      	mov	r1, r5
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f7ff ffa2 	bl	800a73c <__sfputs_r>
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	f000 80a9 	beq.w	800a950 <_vfiprintf_r+0x1f0>
 800a7fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a800:	445a      	add	r2, fp
 800a802:	9209      	str	r2, [sp, #36]	; 0x24
 800a804:	f89a 3000 	ldrb.w	r3, [sl]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f000 80a1 	beq.w	800a950 <_vfiprintf_r+0x1f0>
 800a80e:	2300      	movs	r3, #0
 800a810:	f04f 32ff 	mov.w	r2, #4294967295
 800a814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a818:	f10a 0a01 	add.w	sl, sl, #1
 800a81c:	9304      	str	r3, [sp, #16]
 800a81e:	9307      	str	r3, [sp, #28]
 800a820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a824:	931a      	str	r3, [sp, #104]	; 0x68
 800a826:	4654      	mov	r4, sl
 800a828:	2205      	movs	r2, #5
 800a82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a82e:	4854      	ldr	r0, [pc, #336]	; (800a980 <_vfiprintf_r+0x220>)
 800a830:	f7f5 fcee 	bl	8000210 <memchr>
 800a834:	9a04      	ldr	r2, [sp, #16]
 800a836:	b9d8      	cbnz	r0, 800a870 <_vfiprintf_r+0x110>
 800a838:	06d1      	lsls	r1, r2, #27
 800a83a:	bf44      	itt	mi
 800a83c:	2320      	movmi	r3, #32
 800a83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a842:	0713      	lsls	r3, r2, #28
 800a844:	bf44      	itt	mi
 800a846:	232b      	movmi	r3, #43	; 0x2b
 800a848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a84c:	f89a 3000 	ldrb.w	r3, [sl]
 800a850:	2b2a      	cmp	r3, #42	; 0x2a
 800a852:	d015      	beq.n	800a880 <_vfiprintf_r+0x120>
 800a854:	9a07      	ldr	r2, [sp, #28]
 800a856:	4654      	mov	r4, sl
 800a858:	2000      	movs	r0, #0
 800a85a:	f04f 0c0a 	mov.w	ip, #10
 800a85e:	4621      	mov	r1, r4
 800a860:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a864:	3b30      	subs	r3, #48	; 0x30
 800a866:	2b09      	cmp	r3, #9
 800a868:	d94d      	bls.n	800a906 <_vfiprintf_r+0x1a6>
 800a86a:	b1b0      	cbz	r0, 800a89a <_vfiprintf_r+0x13a>
 800a86c:	9207      	str	r2, [sp, #28]
 800a86e:	e014      	b.n	800a89a <_vfiprintf_r+0x13a>
 800a870:	eba0 0308 	sub.w	r3, r0, r8
 800a874:	fa09 f303 	lsl.w	r3, r9, r3
 800a878:	4313      	orrs	r3, r2
 800a87a:	9304      	str	r3, [sp, #16]
 800a87c:	46a2      	mov	sl, r4
 800a87e:	e7d2      	b.n	800a826 <_vfiprintf_r+0xc6>
 800a880:	9b03      	ldr	r3, [sp, #12]
 800a882:	1d19      	adds	r1, r3, #4
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	9103      	str	r1, [sp, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	bfbb      	ittet	lt
 800a88c:	425b      	neglt	r3, r3
 800a88e:	f042 0202 	orrlt.w	r2, r2, #2
 800a892:	9307      	strge	r3, [sp, #28]
 800a894:	9307      	strlt	r3, [sp, #28]
 800a896:	bfb8      	it	lt
 800a898:	9204      	strlt	r2, [sp, #16]
 800a89a:	7823      	ldrb	r3, [r4, #0]
 800a89c:	2b2e      	cmp	r3, #46	; 0x2e
 800a89e:	d10c      	bne.n	800a8ba <_vfiprintf_r+0x15a>
 800a8a0:	7863      	ldrb	r3, [r4, #1]
 800a8a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8a4:	d134      	bne.n	800a910 <_vfiprintf_r+0x1b0>
 800a8a6:	9b03      	ldr	r3, [sp, #12]
 800a8a8:	1d1a      	adds	r2, r3, #4
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	9203      	str	r2, [sp, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	bfb8      	it	lt
 800a8b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8b6:	3402      	adds	r4, #2
 800a8b8:	9305      	str	r3, [sp, #20]
 800a8ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a990 <_vfiprintf_r+0x230>
 800a8be:	7821      	ldrb	r1, [r4, #0]
 800a8c0:	2203      	movs	r2, #3
 800a8c2:	4650      	mov	r0, sl
 800a8c4:	f7f5 fca4 	bl	8000210 <memchr>
 800a8c8:	b138      	cbz	r0, 800a8da <_vfiprintf_r+0x17a>
 800a8ca:	9b04      	ldr	r3, [sp, #16]
 800a8cc:	eba0 000a 	sub.w	r0, r0, sl
 800a8d0:	2240      	movs	r2, #64	; 0x40
 800a8d2:	4082      	lsls	r2, r0
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	3401      	adds	r4, #1
 800a8d8:	9304      	str	r3, [sp, #16]
 800a8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8de:	4829      	ldr	r0, [pc, #164]	; (800a984 <_vfiprintf_r+0x224>)
 800a8e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8e4:	2206      	movs	r2, #6
 800a8e6:	f7f5 fc93 	bl	8000210 <memchr>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d03f      	beq.n	800a96e <_vfiprintf_r+0x20e>
 800a8ee:	4b26      	ldr	r3, [pc, #152]	; (800a988 <_vfiprintf_r+0x228>)
 800a8f0:	bb1b      	cbnz	r3, 800a93a <_vfiprintf_r+0x1da>
 800a8f2:	9b03      	ldr	r3, [sp, #12]
 800a8f4:	3307      	adds	r3, #7
 800a8f6:	f023 0307 	bic.w	r3, r3, #7
 800a8fa:	3308      	adds	r3, #8
 800a8fc:	9303      	str	r3, [sp, #12]
 800a8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a900:	443b      	add	r3, r7
 800a902:	9309      	str	r3, [sp, #36]	; 0x24
 800a904:	e768      	b.n	800a7d8 <_vfiprintf_r+0x78>
 800a906:	fb0c 3202 	mla	r2, ip, r2, r3
 800a90a:	460c      	mov	r4, r1
 800a90c:	2001      	movs	r0, #1
 800a90e:	e7a6      	b.n	800a85e <_vfiprintf_r+0xfe>
 800a910:	2300      	movs	r3, #0
 800a912:	3401      	adds	r4, #1
 800a914:	9305      	str	r3, [sp, #20]
 800a916:	4619      	mov	r1, r3
 800a918:	f04f 0c0a 	mov.w	ip, #10
 800a91c:	4620      	mov	r0, r4
 800a91e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a922:	3a30      	subs	r2, #48	; 0x30
 800a924:	2a09      	cmp	r2, #9
 800a926:	d903      	bls.n	800a930 <_vfiprintf_r+0x1d0>
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d0c6      	beq.n	800a8ba <_vfiprintf_r+0x15a>
 800a92c:	9105      	str	r1, [sp, #20]
 800a92e:	e7c4      	b.n	800a8ba <_vfiprintf_r+0x15a>
 800a930:	fb0c 2101 	mla	r1, ip, r1, r2
 800a934:	4604      	mov	r4, r0
 800a936:	2301      	movs	r3, #1
 800a938:	e7f0      	b.n	800a91c <_vfiprintf_r+0x1bc>
 800a93a:	ab03      	add	r3, sp, #12
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	462a      	mov	r2, r5
 800a940:	4b12      	ldr	r3, [pc, #72]	; (800a98c <_vfiprintf_r+0x22c>)
 800a942:	a904      	add	r1, sp, #16
 800a944:	4630      	mov	r0, r6
 800a946:	f7fd fa2b 	bl	8007da0 <_printf_float>
 800a94a:	4607      	mov	r7, r0
 800a94c:	1c78      	adds	r0, r7, #1
 800a94e:	d1d6      	bne.n	800a8fe <_vfiprintf_r+0x19e>
 800a950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a952:	07d9      	lsls	r1, r3, #31
 800a954:	d405      	bmi.n	800a962 <_vfiprintf_r+0x202>
 800a956:	89ab      	ldrh	r3, [r5, #12]
 800a958:	059a      	lsls	r2, r3, #22
 800a95a:	d402      	bmi.n	800a962 <_vfiprintf_r+0x202>
 800a95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a95e:	f7fe f879 	bl	8008a54 <__retarget_lock_release_recursive>
 800a962:	89ab      	ldrh	r3, [r5, #12]
 800a964:	065b      	lsls	r3, r3, #25
 800a966:	f53f af1d 	bmi.w	800a7a4 <_vfiprintf_r+0x44>
 800a96a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a96c:	e71c      	b.n	800a7a8 <_vfiprintf_r+0x48>
 800a96e:	ab03      	add	r3, sp, #12
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	462a      	mov	r2, r5
 800a974:	4b05      	ldr	r3, [pc, #20]	; (800a98c <_vfiprintf_r+0x22c>)
 800a976:	a904      	add	r1, sp, #16
 800a978:	4630      	mov	r0, r6
 800a97a:	f7fd fcb5 	bl	80082e8 <_printf_i>
 800a97e:	e7e4      	b.n	800a94a <_vfiprintf_r+0x1ea>
 800a980:	0800acac 	.word	0x0800acac
 800a984:	0800acb6 	.word	0x0800acb6
 800a988:	08007da1 	.word	0x08007da1
 800a98c:	0800a73d 	.word	0x0800a73d
 800a990:	0800acb2 	.word	0x0800acb2

0800a994 <_raise_r>:
 800a994:	291f      	cmp	r1, #31
 800a996:	b538      	push	{r3, r4, r5, lr}
 800a998:	4604      	mov	r4, r0
 800a99a:	460d      	mov	r5, r1
 800a99c:	d904      	bls.n	800a9a8 <_raise_r+0x14>
 800a99e:	2316      	movs	r3, #22
 800a9a0:	6003      	str	r3, [r0, #0]
 800a9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a9aa:	b112      	cbz	r2, 800a9b2 <_raise_r+0x1e>
 800a9ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9b0:	b94b      	cbnz	r3, 800a9c6 <_raise_r+0x32>
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 f830 	bl	800aa18 <_getpid_r>
 800a9b8:	462a      	mov	r2, r5
 800a9ba:	4601      	mov	r1, r0
 800a9bc:	4620      	mov	r0, r4
 800a9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9c2:	f000 b817 	b.w	800a9f4 <_kill_r>
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d00a      	beq.n	800a9e0 <_raise_r+0x4c>
 800a9ca:	1c59      	adds	r1, r3, #1
 800a9cc:	d103      	bne.n	800a9d6 <_raise_r+0x42>
 800a9ce:	2316      	movs	r3, #22
 800a9d0:	6003      	str	r3, [r0, #0]
 800a9d2:	2001      	movs	r0, #1
 800a9d4:	e7e7      	b.n	800a9a6 <_raise_r+0x12>
 800a9d6:	2400      	movs	r4, #0
 800a9d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9dc:	4628      	mov	r0, r5
 800a9de:	4798      	blx	r3
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	e7e0      	b.n	800a9a6 <_raise_r+0x12>

0800a9e4 <raise>:
 800a9e4:	4b02      	ldr	r3, [pc, #8]	; (800a9f0 <raise+0xc>)
 800a9e6:	4601      	mov	r1, r0
 800a9e8:	6818      	ldr	r0, [r3, #0]
 800a9ea:	f7ff bfd3 	b.w	800a994 <_raise_r>
 800a9ee:	bf00      	nop
 800a9f0:	20000064 	.word	0x20000064

0800a9f4 <_kill_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4d07      	ldr	r5, [pc, #28]	; (800aa14 <_kill_r+0x20>)
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	4611      	mov	r1, r2
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	f7f6 fe7b 	bl	80016fc <_kill>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d102      	bne.n	800aa10 <_kill_r+0x1c>
 800aa0a:	682b      	ldr	r3, [r5, #0]
 800aa0c:	b103      	cbz	r3, 800aa10 <_kill_r+0x1c>
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	bd38      	pop	{r3, r4, r5, pc}
 800aa12:	bf00      	nop
 800aa14:	20000bfc 	.word	0x20000bfc

0800aa18 <_getpid_r>:
 800aa18:	f7f6 be68 	b.w	80016ec <_getpid>

0800aa1c <_init>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	bf00      	nop
 800aa20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa22:	bc08      	pop	{r3}
 800aa24:	469e      	mov	lr, r3
 800aa26:	4770      	bx	lr

0800aa28 <_fini>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	bf00      	nop
 800aa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2e:	bc08      	pop	{r3}
 800aa30:	469e      	mov	lr, r3
 800aa32:	4770      	bx	lr
